
stm32H7_uart-Naho_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f44  08004f44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f4c  08004f4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  24000010  08004f64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000148  08004f64  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f10  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204e  00000000  00000000  00031f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00033fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00034c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038fb6  00000000  00000000  00035828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e9e  00000000  00000000  0006e7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b033  00000000  00000000  0007f67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fa6af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  001fa700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004ef4 	.word	0x08004ef4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004ef4 	.word	0x08004ef4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <main+0x98>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9eb 	bl	8000b0c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb29 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f833 	bl	80007a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <main+0x98>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <main+0x98>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <main+0x98>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fe61 	bl	8001424 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fe77 	bl	8001458 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <main+0x98>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9bd 	bl	8000b0c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f927 	bl	80009e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f8d9 	bl	800094c <MX_USART3_UART_Init>
  MX_SPI5_Init();
 800079a:	f000 f881 	bl	80008a0 <MX_SPI5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x96>
 80007a0:	58024400 	.word	0x58024400

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	; 0x70
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	224c      	movs	r2, #76	; 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fb96 	bl	8004ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 fb90 	bl	8004ee4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c4:	2004      	movs	r0, #4
 80007c6:	f000 fe5b 	bl	8001480 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <SystemClock_Config+0xf4>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a31      	ldr	r2, [pc, #196]	; (8000898 <SystemClock_Config+0xf4>)
 80007d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <SystemClock_Config+0xf4>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <SystemClock_Config+0xf8>)
 80007e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e8:	4a2c      	ldr	r2, [pc, #176]	; (800089c <SystemClock_Config+0xf8>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <SystemClock_Config+0xf8>)
 80007f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fc:	bf00      	nop
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <SystemClock_Config+0xf4>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080a:	d1f8      	bne.n	80007fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800080c:	2303      	movs	r3, #3
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000810:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000816:	2301      	movs	r3, #1
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800082a:	23f0      	movs	r3, #240	; 0xf0
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800083a:	2308      	movs	r3, #8
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fe72 	bl	8001534 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000856:	f000 f959 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	233f      	movs	r3, #63	; 0x3f
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000866:	2308      	movs	r3, #8
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2104      	movs	r1, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fa85 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800088c:	f000 f93e 	bl	8000b0c <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3770      	adds	r7, #112	; 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024800 	.word	0x58024800
 800089c:	58000400 	.word	0x58000400

080008a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008a6:	4a28      	ldr	r2, [pc, #160]	; (8000948 <MX_SPI5_Init+0xa8>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008d4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80008d8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_SPI5_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_SPI5_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI5_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_SPI5_Init+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI5_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_SPI5_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI5_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_SPI5_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI5_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_SPI5_Init+0xa4>)
 8000932:	f003 f921 	bl	8003b78 <HAL_SPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 800093c:	f000 f8e6 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2400002c 	.word	0x2400002c
 8000948:	40015000 	.word	0x40015000

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART3_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000996:	f003 fa10 	bl	8003dba <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f8b4 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009a8:	f004 f9ae 	bl	8004d08 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f8ab 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ba:	f004 f9e3 	bl	8004d84 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f8a2 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ca:	f004 f964 	bl	8004c96 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f89a 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240000b4 	.word	0x240000b4
 80009e0:	40004800 	.word	0x40004800

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <MX_GPIO_Init+0x11c>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a3f      	ldr	r2, [pc, #252]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a18:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a38      	ldr	r2, [pc, #224]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a30      	ldr	r2, [pc, #192]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_GPIO_Init+0x11c>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	21c0      	movs	r1, #192	; 0xc0
 8000a94:	481b      	ldr	r0, [pc, #108]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a96:	f000 fcab 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <MX_GPIO_Init+0x124>)
 8000aa0:	f000 fca6 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000aba:	f000 fae9 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000abe:	23c0      	movs	r3, #192	; 0xc0
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000ad6:	f000 fadb 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_GPIO_Init+0x124>)
 8000af2:	f000 facd 	bl	8001090 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58020800 	.word	0x58020800
 8000b08:	58021000 	.word	0x58021000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x30>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b8      	sub	sp, #224	; 0xe0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	22bc      	movs	r2, #188	; 0xbc
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 f9b9 	bl	8004ee4 <memset>
  if(hspi->Instance==SPI5)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <HAL_SPI_MspInit+0xc0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d143      	bne.n	8000c04 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8000b82:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b86:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fc8b 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000b98:	f7ff ffb8 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bc2:	f043 0320 	orr.w	r3, r3, #32
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000bd8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000c00:	f000 fa46 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	37e0      	adds	r7, #224	; 0xe0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40015000 	.word	0x40015000
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58021400 	.word	0x58021400

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b8      	sub	sp, #224	; 0xe0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22bc      	movs	r2, #188	; 0xbc
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f953 	bl	8004ee4 <memset>
  if(huart->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d142      	bne.n	8000cce <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fc26 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c62:	f7ff ff53 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0xc8>)
 8000cca:	f000 f9e1 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	37e0      	adds	r7, #224	; 0xe0
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020c00 	.word	0x58020c00

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f89e 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f7ff fc4e 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f004 f899 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fccd 	bl	8000708 <main>
  bx  lr
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d78:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d7c:	08004f54 	.word	0x08004f54
  ldr r2, =_sbss
 8000d80:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d84:	24000148 	.word	0x24000148

08000d88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC3_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f94a 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d98:	f001 f9b0 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_Init+0x68>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	4913      	ldr	r1, [pc, #76]	; (8000df8 <HAL_Init+0x6c>)
 8000daa:	5ccb      	ldrb	r3, [r1, r3]
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	fa22 f303 	lsr.w	r3, r2, r3
 8000db4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_Init+0x68>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_Init+0x6c>)
 8000dc0:	5cd3      	ldrb	r3, [r2, r3]
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x70>)
 8000dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_Init+0x74>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f000 f814 	bl	8000e04 <HAL_InitTick>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e002      	b.n	8000dec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000de6:	f7ff fe97 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	58024400 	.word	0x58024400
 8000df8:	08004f0c 	.word	0x08004f0c
 8000dfc:	24000004 	.word	0x24000004
 8000e00:	24000000 	.word	0x24000000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_InitTick+0x60>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e021      	b.n	8000e5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_InitTick+0x64>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_InitTick+0x60>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f921 	bl	8001076 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e4c:	f000 f8f9 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x68>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2400000c 	.word	0x2400000c
 8000e68:	24000000 	.word	0x24000000
 8000e6c:	24000008 	.word	0x24000008

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2400000c 	.word	0x2400000c
 8000e94:	24000144 	.word	0x24000144

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	24000144 	.word	0x24000144

08000eb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetREVID+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0c1b      	lsrs	r3, r3, #16
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	5c001000 	.word	0x5c001000

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0000 	.word	0x05fa0000

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	f7ff ff8e 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff47 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff90 	bl	8000f80 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5f 	bl	8000f2c <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb2 	bl	8000fe8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_GPIO_Init+0x234>)
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010a2:	e194      	b.n	80013ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8186 	beq.w	80013c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x44>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	69b9      	ldr	r1, [r7, #24]
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0203 	and.w	r2, r3, #3
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80e0 	beq.w	80013c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_GPIO_Init+0x238>)
 800120a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800120e:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <HAL_GPIO_Init+0x238>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_GPIO_Init+0x238>)
 800121a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <HAL_GPIO_Init+0x23c>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <HAL_GPIO_Init+0x240>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d052      	beq.n	80012f8 <HAL_GPIO_Init+0x268>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_GPIO_Init+0x244>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d031      	beq.n	80012be <HAL_GPIO_Init+0x22e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_GPIO_Init+0x248>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d02b      	beq.n	80012ba <HAL_GPIO_Init+0x22a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x24c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <HAL_GPIO_Init+0x250>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x222>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_GPIO_Init+0x254>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x21e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <HAL_GPIO_Init+0x258>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x21a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_GPIO_Init+0x25c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x216>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_GPIO_Init+0x260>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x212>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_GPIO_Init+0x264>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x20e>
 800129a:	2309      	movs	r3, #9
 800129c:	e02d      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 800129e:	230a      	movs	r3, #10
 80012a0:	e02b      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e029      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e027      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012aa:	2306      	movs	r3, #6
 80012ac:	e025      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012ae:	2305      	movs	r3, #5
 80012b0:	e023      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012b2:	2304      	movs	r3, #4
 80012b4:	e021      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e01f      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e01d      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012be:	2301      	movs	r3, #1
 80012c0:	e01b      	b.n	80012fa <HAL_GPIO_Init+0x26a>
 80012c2:	bf00      	nop
 80012c4:	58000080 	.word	0x58000080
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58000400 	.word	0x58000400
 80012d0:	58020000 	.word	0x58020000
 80012d4:	58020400 	.word	0x58020400
 80012d8:	58020800 	.word	0x58020800
 80012dc:	58020c00 	.word	0x58020c00
 80012e0:	58021000 	.word	0x58021000
 80012e4:	58021400 	.word	0x58021400
 80012e8:	58021800 	.word	0x58021800
 80012ec:	58021c00 	.word	0x58021c00
 80012f0:	58022000 	.word	0x58022000
 80012f4:	58022400 	.word	0x58022400
 80012f8:	2300      	movs	r3, #0
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	f002 0203 	and.w	r2, r2, #3
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	4093      	lsls	r3, r2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130a:	4938      	ldr	r1, [pc, #224]	; (80013ec <HAL_GPIO_Init+0x35c>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800133e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800136c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	3301      	adds	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f47f ae63 	bne.w	80010a4 <HAL_GPIO_Init+0x14>
  }
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3724      	adds	r7, #36	; 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	58000400 	.word	0x58000400

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_HSEM_FastTake+0x2c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3320      	adds	r3, #32
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_HSEM_FastTake+0x30>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	58026400 	.word	0x58026400
 8001454:	80000300 	.word	0x80000300

08001458 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001462:	4906      	ldr	r1, [pc, #24]	; (800147c <HAL_HSEM_Release+0x24>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	58026400 	.word	0x58026400

08001480 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_PWREx_ConfigSupply+0xb0>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	2b06      	cmp	r3, #6
 8001492:	d00a      	beq.n	80014aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_PWREx_ConfigSupply+0xb0>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d001      	beq.n	80014a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e040      	b.n	8001528 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e03e      	b.n	8001528 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014b2:	491f      	ldr	r1, [pc, #124]	; (8001530 <HAL_PWREx_ConfigSupply+0xb0>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014ba:	f7ff fced 	bl	8000e98 <HAL_GetTick>
 80014be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014c0:	e009      	b.n	80014d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014c2:	f7ff fce9 	bl	8000e98 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014d0:	d901      	bls.n	80014d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e028      	b.n	8001528 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_PWREx_ConfigSupply+0xb0>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e2:	d1ee      	bne.n	80014c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b1e      	cmp	r3, #30
 80014e8:	d008      	beq.n	80014fc <HAL_PWREx_ConfigSupply+0x7c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b2e      	cmp	r3, #46	; 0x2e
 80014ee:	d005      	beq.n	80014fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b1d      	cmp	r3, #29
 80014f4:	d002      	beq.n	80014fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b2d      	cmp	r3, #45	; 0x2d
 80014fa:	d114      	bne.n	8001526 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014fc:	f7ff fccc 	bl	8000e98 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001502:	e009      	b.n	8001518 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001504:	f7ff fcc8 	bl	8000e98 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001512:	d901      	bls.n	8001518 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e007      	b.n	8001528 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_PWREx_ConfigSupply+0xb0>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d1ee      	bne.n	8001504 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	58024800 	.word	0x58024800

08001534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	f000 bc1d 	b.w	8001d82 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8087 	beq.w	8001664 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001556:	4b99      	ldr	r3, [pc, #612]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001560:	4b96      	ldr	r3, [pc, #600]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	2b10      	cmp	r3, #16
 800156a:	d007      	beq.n	800157c <HAL_RCC_OscConfig+0x48>
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	2b18      	cmp	r3, #24
 8001570:	d110      	bne.n	8001594 <HAL_RCC_OscConfig+0x60>
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b8f      	ldr	r3, [pc, #572]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d06c      	beq.n	8001662 <HAL_RCC_OscConfig+0x12e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d168      	bne.n	8001662 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e3f6      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x78>
 800159e:	4b87      	ldr	r3, [pc, #540]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a86      	ldr	r2, [pc, #536]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e02e      	b.n	800160a <HAL_RCC_OscConfig+0xd6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x9a>
 80015b4:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a80      	ldr	r2, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b7e      	ldr	r3, [pc, #504]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a7d      	ldr	r2, [pc, #500]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e01d      	b.n	800160a <HAL_RCC_OscConfig+0xd6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0xbe>
 80015d8:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b75      	ldr	r3, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a74      	ldr	r2, [pc, #464]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0xd6>
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80015f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d013      	beq.n	800163a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fc41 	bl	8000e98 <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fc3d 	bl	8000e98 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e3aa      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162c:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0xe6>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc2d 	bl	8000e98 <HAL_GetTick>
 800163e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001642:	f7ff fc29 	bl	8000e98 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e396      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x10e>
 8001660:	e000      	b.n	8001664 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001662:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80cb 	beq.w	8001808 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800167a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800167c:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_RCC_OscConfig+0x164>
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	2b18      	cmp	r3, #24
 800168c:	d156      	bne.n	800173c <HAL_RCC_OscConfig+0x208>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d151      	bne.n	800173c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x17c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e368      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 0219 	bic.w	r2, r3, #25
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	493f      	ldr	r1, [pc, #252]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016c2:	f7ff fbe9 	bl	8000e98 <HAL_GetTick>
 80016c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fbe5 	bl	8000e98 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e352      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016dc:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	f7ff fbe2 	bl	8000eb0 <HAL_GetREVID>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d817      	bhi.n	8001726 <HAL_RCC_OscConfig+0x1f2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x1dc>
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001706:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170e:	e07b      	b.n	8001808 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	031b      	lsls	r3, r3, #12
 800171e:	4927      	ldr	r1, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001724:	e070      	b.n	8001808 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	061b      	lsls	r3, r3, #24
 8001734:	4921      	ldr	r1, [pc, #132]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173a:	e065      	b.n	8001808 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d048      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0219 	bic.w	r2, r3, #25
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	491a      	ldr	r1, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fb9f 	bl	8000e98 <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fb9b 	bl	8000e98 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e308      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	f7ff fb98 	bl	8000eb0 <HAL_GetREVID>
 8001780:	4603      	mov	r3, r0
 8001782:	f241 0203 	movw	r2, #4099	; 0x1003
 8001786:	4293      	cmp	r3, r2
 8001788:	d81a      	bhi.n	80017c0 <HAL_RCC_OscConfig+0x28c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b40      	cmp	r3, #64	; 0x40
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x270>
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	6053      	str	r3, [r2, #4]
 80017a2:	e031      	b.n	8001808 <HAL_RCC_OscConfig+0x2d4>
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	031b      	lsls	r3, r3, #12
 80017b2:	4902      	ldr	r1, [pc, #8]	; (80017bc <HAL_RCC_OscConfig+0x288>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x2d4>
 80017ba:	bf00      	nop
 80017bc:	58024400 	.word	0x58024400
 80017c0:	4b9a      	ldr	r3, [pc, #616]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	4997      	ldr	r1, [pc, #604]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e018      	b.n	8001808 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d6:	4b95      	ldr	r3, [pc, #596]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a94      	ldr	r2, [pc, #592]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb59 	bl	8000e98 <HAL_GetTick>
 80017e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff fb55 	bl	8000e98 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e2c2      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017fc:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a9 	beq.w	8001968 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001816:	4b85      	ldr	r3, [pc, #532]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001820:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d007      	beq.n	800183c <HAL_RCC_OscConfig+0x308>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b18      	cmp	r3, #24
 8001830:	d13a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x374>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d135      	bne.n	80018a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800183c:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x320>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e296      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001854:	f7ff fb2c 	bl	8000eb0 <HAL_GetREVID>
 8001858:	4603      	mov	r3, r0
 800185a:	f241 0203 	movw	r2, #4099	; 0x1003
 800185e:	4293      	cmp	r3, r2
 8001860:	d817      	bhi.n	8001892 <HAL_RCC_OscConfig+0x35e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	2b20      	cmp	r3, #32
 8001868:	d108      	bne.n	800187c <HAL_RCC_OscConfig+0x348>
 800186a:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001878:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800187a:	e075      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	069b      	lsls	r3, r3, #26
 800188a:	4968      	ldr	r1, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001890:	e06a      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	4962      	ldr	r1, [pc, #392]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018a6:	e05f      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d042      	beq.n	8001936 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018b0:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80018b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff faec 	bl	8000e98 <HAL_GetTick>
 80018c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018c4:	f7ff fae8 	bl	8000e98 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e255      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018e2:	f7ff fae5 	bl	8000eb0 <HAL_GetREVID>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d817      	bhi.n	8001920 <HAL_RCC_OscConfig+0x3ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d108      	bne.n	800190a <HAL_RCC_OscConfig+0x3d6>
 80018f8:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001900:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001906:	6053      	str	r3, [r2, #4]
 8001908:	e02e      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
 800190a:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	4944      	ldr	r1, [pc, #272]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
 800191e:	e023      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	493f      	ldr	r1, [pc, #252]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800193c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff faa9 	bl	8000e98 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800194a:	f7ff faa5 	bl	8000e98 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e212      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d036      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d019      	beq.n	80019b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 800197e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001980:	4a2a      	ldr	r2, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fa86 	bl	8000e98 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fa82 	bl	8000e98 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1ef      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x45c>
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff fa6c 	bl	8000e98 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fa68 	bl	8000e98 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1d5      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d039      	beq.n	8001a62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa49 	bl	8000e98 <HAL_GetTick>
 8001a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a0a:	f7ff fa45 	bl	8000e98 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1b2      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_OscConfig+0x4f8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4d6>
 8001a28:	e01b      	b.n	8001a62 <HAL_RCC_OscConfig+0x52e>
 8001a2a:	bf00      	nop
 8001a2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a30:	4b9b      	ldr	r3, [pc, #620]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a9a      	ldr	r2, [pc, #616]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fa2c 	bl	8000e98 <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a44:	f7ff fa28 	bl	8000e98 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e195      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a56:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8081 	beq.w	8001b72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <HAL_RCC_OscConfig+0x770>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a8b      	ldr	r2, [pc, #556]	; (8001ca4 <HAL_RCC_OscConfig+0x770>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff fa0c 	bl	8000e98 <HAL_GetTick>
 8001a80:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a84:	f7ff fa08 	bl	8000e98 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e175      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a96:	4b83      	ldr	r3, [pc, #524]	; (8001ca4 <HAL_RCC_OscConfig+0x770>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x584>
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a7c      	ldr	r2, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	e02d      	b.n	8001b14 <HAL_RCC_OscConfig+0x5e0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x5a6>
 8001ac0:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a76      	ldr	r2, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a73      	ldr	r2, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x5e0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c8>
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a6b      	ldr	r2, [pc, #428]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0x5e0>
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a64      	ldr	r2, [pc, #400]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f9bc 	bl	8000e98 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff f9b8 	bl	8000e98 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e123      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3a:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0ee      	beq.n	8001b24 <HAL_RCC_OscConfig+0x5f0>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff f9a6 	bl	8000e98 <HAL_GetTick>
 8001b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff f9a2 	bl	8000e98 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e10d      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b66:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8102 	beq.w	8001d80 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b7c:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b84:	2b18      	cmp	r3, #24
 8001b86:	f000 80bd 	beq.w	8001d04 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	f040 809e 	bne.w	8001cd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a41      	ldr	r2, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f97a 	bl	8000e98 <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f976 	bl	8000e98 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0e3      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_OscConfig+0x774>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	4931      	ldr	r1, [pc, #196]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	628b      	str	r3, [r1, #40]	; 0x28
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	3b01      	subs	r3, #1
 8001be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c10:	4923      	ldr	r1, [pc, #140]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x778>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c2e:	00d2      	lsls	r2, r2, #3
 8001c30:	491b      	ldr	r1, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f023 020c 	bic.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4917      	ldr	r1, [pc, #92]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f023 0202 	bic.w	r2, r3, #2
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	4912      	ldr	r1, [pc, #72]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_RCC_OscConfig+0x76c>)
 8001c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f8ff 	bl	8000e98 <HAL_GetTick>
 8001c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9c:	e011      	b.n	8001cc2 <HAL_RCC_OscConfig+0x78e>
 8001c9e:	bf00      	nop
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58024800 	.word	0x58024800
 8001ca8:	fffffc0c 	.word	0xfffffc0c
 8001cac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f8f2 	bl	8000e98 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e05f      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_RCC_OscConfig+0x858>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x77c>
 8001cce:	e057      	b.n	8001d80 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_RCC_OscConfig+0x858>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2d      	ldr	r2, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x858>)
 8001cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f8dc 	bl	8000e98 <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f8d8 	bl	8000e98 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e045      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x858>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x7b0>
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x858>)
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_OscConfig+0x858>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d031      	beq.n	8001d7c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0203 	and.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d12a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d122      	bne.n	8001d7c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0a5b      	lsrs	r3, r3, #9
 8001d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0e1b      	lsrs	r3, r3, #24
 8001d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e19c      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 020f 	bic.w	r2, r3, #15
 8001dba:	4985      	ldr	r1, [pc, #532]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e184      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d908      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4975      	ldr	r1, [pc, #468]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d908      	bls.n	8001e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	496a      	ldr	r1, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	495e      	ldr	r1, [pc, #376]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d908      	bls.n	8001e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4953      	ldr	r1, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d908      	bls.n	8001eba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f023 020f 	bic.w	r2, r3, #15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4947      	ldr	r1, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d055      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4940      	ldr	r1, [pc, #256]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d121      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0f6      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d115      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0ea      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0de      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d6      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe ffa9 	bl	8000e98 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7fe ffa5 	bl	8000e98 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0be      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1eb      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d208      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f023 020f 	bic.w	r2, r3, #15
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d214      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 020f 	bic.w	r2, r3, #15
 8001fb6:	4906      	ldr	r1, [pc, #24]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e086      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
 8001fd0:	52002000 	.word	0x52002000
 8001fd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d208      	bcs.n	8002006 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4939      	ldr	r1, [pc, #228]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002002:	4313      	orrs	r3, r2
 8002004:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201e:	429a      	cmp	r2, r3
 8002020:	d208      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	492e      	ldr	r1, [pc, #184]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002030:	4313      	orrs	r3, r2
 8002032:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800204c:	429a      	cmp	r2, r3
 800204e:	d208      	bcs.n	8002062 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 800205e:	4313      	orrs	r3, r2
 8002060:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800207a:	429a      	cmp	r2, r3
 800207c:	d208      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4917      	ldr	r1, [pc, #92]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 800208c:	4313      	orrs	r3, r2
 800208e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002090:	f000 f834 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	4912      	ldr	r1, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x35c>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_RCC_ClockConfig+0x35c>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x360>)
 80020c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x364>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x368>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe96 	bl	8000e04 <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	58024400 	.word	0x58024400
 80020ec:	08004f0c 	.word	0x08004f0c
 80020f0:	24000004 	.word	0x24000004
 80020f4:	24000000 	.word	0x24000000
 80020f8:	24000008 	.word	0x24000008

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002102:	4bb3      	ldr	r3, [pc, #716]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210a:	2b18      	cmp	r3, #24
 800210c:	f200 8155 	bhi.w	80023ba <HAL_RCC_GetSysClockFreq+0x2be>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	0800217d 	.word	0x0800217d
 800211c:	080023bb 	.word	0x080023bb
 8002120:	080023bb 	.word	0x080023bb
 8002124:	080023bb 	.word	0x080023bb
 8002128:	080023bb 	.word	0x080023bb
 800212c:	080023bb 	.word	0x080023bb
 8002130:	080023bb 	.word	0x080023bb
 8002134:	080023bb 	.word	0x080023bb
 8002138:	080021a3 	.word	0x080021a3
 800213c:	080023bb 	.word	0x080023bb
 8002140:	080023bb 	.word	0x080023bb
 8002144:	080023bb 	.word	0x080023bb
 8002148:	080023bb 	.word	0x080023bb
 800214c:	080023bb 	.word	0x080023bb
 8002150:	080023bb 	.word	0x080023bb
 8002154:	080023bb 	.word	0x080023bb
 8002158:	080021a9 	.word	0x080021a9
 800215c:	080023bb 	.word	0x080023bb
 8002160:	080023bb 	.word	0x080023bb
 8002164:	080023bb 	.word	0x080023bb
 8002168:	080023bb 	.word	0x080023bb
 800216c:	080023bb 	.word	0x080023bb
 8002170:	080023bb 	.word	0x080023bb
 8002174:	080023bb 	.word	0x080023bb
 8002178:	080021af 	.word	0x080021af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800217c:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002188:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	4a90      	ldr	r2, [pc, #576]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800219a:	e111      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800219c:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219e:	61bb      	str	r3, [r7, #24]
    break;
 80021a0:	e10e      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021a4:	61bb      	str	r3, [r7, #24]
    break;
 80021a6:	e10b      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021a8:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021aa:	61bb      	str	r3, [r7, #24]
    break;
 80021ac:	e108      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021b8:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021c4:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021ce:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80e1 	beq.w	80023b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	f000 8083 	beq.w	8002300 <HAL_RCC_GetSysClockFreq+0x204>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f200 80a1 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x248>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x114>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d056      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800220e:	e099      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002210:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02d      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800221c:	4b6c      	ldr	r3, [pc, #432]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002256:	ed97 6a02 	vldr	s12, [r7, #8]
 800225a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800225e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002272:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002276:	e087      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229a:	ed97 6a02 	vldr	s12, [r7, #8]
 800229e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022ba:	e065      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ce:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022de:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022fe:	e043      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002322:	ed97 6a02 	vldr	s12, [r7, #8]
 8002326:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002342:	e021      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002366:	ed97 6a02 	vldr	s12, [r7, #8]
 800236a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800236e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002386:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	0a5b      	lsrs	r3, r3, #9
 800238e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002392:	3301      	adds	r3, #1
 8002394:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    break;
 80023b8:	e002      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023bc:	61bb      	str	r3, [r7, #24]
    break;
 80023be:	bf00      	nop
  }

  return sysclockfreq;
 80023c0:	69bb      	ldr	r3, [r7, #24]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	58024400 	.word	0x58024400
 80023d4:	03d09000 	.word	0x03d09000
 80023d8:	003d0900 	.word	0x003d0900
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	46000000 	.word	0x46000000
 80023e4:	4c742400 	.word	0x4c742400
 80023e8:	4a742400 	.word	0x4a742400
 80023ec:	4af42400 	.word	0x4af42400

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80023f6:	f7ff fe81 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_GetHCLKFreq+0x50>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490f      	ldr	r1, [pc, #60]	; (8002444 <HAL_RCC_GetHCLKFreq+0x54>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_GetHCLKFreq+0x50>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_GetHCLKFreq+0x54>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_RCC_GetHCLKFreq+0x58>)
 800242c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_RCC_GetHCLKFreq+0x58>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400
 8002444:	08004f0c 	.word	0x08004f0c
 8002448:	24000004 	.word	0x24000004
 800244c:	24000000 	.word	0x24000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002454:	f7ff ffcc 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4904      	ldr	r1, [pc, #16]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	08004f0c 	.word	0x08004f0c

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002480:	f7ff ffb6 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	58024400 	.word	0x58024400
 80024a4:	08004f0c 	.word	0x08004f0c

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d03f      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024cc:	d02a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024d2:	d824      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d8:	d018      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024de:	d81e      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e8:	d007      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024ea:	e018      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ec:	4ba3      	ldr	r3, [pc, #652]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	4aa2      	ldr	r2, [pc, #648]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024f8:	e015      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2102      	movs	r1, #2
 8002500:	4618      	mov	r0, r3
 8002502:	f001 f9d5 	bl	80038b0 <RCCEx_PLL2_Config>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800250a:	e00c      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3324      	adds	r3, #36	; 0x24
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fa7e 	bl	8003a14 <RCCEx_PLL3_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800251c:	e003      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
      break;
 8002522:	e000      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800252c:	4b93      	ldr	r3, [pc, #588]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002538:	4990      	ldr	r1, [pc, #576]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	650b      	str	r3, [r1, #80]	; 0x50
 800253e:	e001      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d03d      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	2b04      	cmp	r3, #4
 8002556:	d826      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002575 	.word	0x08002575
 8002564:	08002583 	.word	0x08002583
 8002568:	08002595 	.word	0x08002595
 800256c:	080025ad 	.word	0x080025ad
 8002570:	080025ad 	.word	0x080025ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a80      	ldr	r2, [pc, #512]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002580:	e015      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f991 	bl	80038b0 <RCCEx_PLL2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002592:	e00c      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3324      	adds	r3, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 fa3a 	bl	8003a14 <RCCEx_PLL3_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025a4:	e003      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      break;
 80025aa:	e000      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80025ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b4:	4b71      	ldr	r3, [pc, #452]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	f023 0207 	bic.w	r2, r3, #7
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	496e      	ldr	r1, [pc, #440]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	650b      	str	r3, [r1, #80]	; 0x50
 80025c6:	e001      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d042      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e0:	d02b      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d825      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80025e8:	2bc0      	cmp	r3, #192	; 0xc0
 80025ea:	d028      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025ec:	2bc0      	cmp	r3, #192	; 0xc0
 80025ee:	d821      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d016      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d81d      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d007      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002600:	e018      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002602:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	4a5d      	ldr	r2, [pc, #372]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800260e:	e017      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f94a 	bl	80038b0 <RCCEx_PLL2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002620:	e00e      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3324      	adds	r3, #36	; 0x24
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f9f3 	bl	8003a14 <RCCEx_PLL3_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002632:	e005      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
      break;
 8002638:	e002      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800263e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	494a      	ldr	r1, [pc, #296]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	650b      	str	r3, [r1, #80]	; 0x50
 8002658:	e001      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	2b00      	cmp	r3, #0
 8002668:	d049      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002674:	d030      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800267a:	d82a      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800267c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002680:	d02c      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002682:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002686:	d824      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268c:	d018      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002692:	d81e      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269c:	d007      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800269e:	e018      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	4a35      	ldr	r2, [pc, #212]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026ac:	e017      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 f8fb 	bl	80038b0 <RCCEx_PLL2_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026be:	e00e      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3324      	adds	r3, #36	; 0x24
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 f9a4 	bl	8003a14 <RCCEx_PLL3_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026d0:	e005      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
      break;
 80026d6:	e002      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026f2:	4922      	ldr	r1, [pc, #136]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	658b      	str	r3, [r1, #88]	; 0x58
 80026f8:	e001      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	2b00      	cmp	r3, #0
 8002708:	d04b      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002714:	d030      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271a:	d82a      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800271c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002720:	d02e      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002722:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002726:	d824      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272c:	d018      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800272e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002732:	d81e      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d007      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800273e:	e018      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800274c:	e019      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f001 f8ab 	bl	80038b0 <RCCEx_PLL2_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800275e:	e010      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3324      	adds	r3, #36	; 0x24
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f001 f954 	bl	8003a14 <RCCEx_PLL3_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002770:	e007      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
      break;
 8002776:	e004      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002778:	bf00      	nop
 800277a:	e002      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800277c:	58024400 	.word	0x58024400
      break;
 8002780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002788:	4b99      	ldr	r3, [pc, #612]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002796:	4996      	ldr	r1, [pc, #600]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002798:	4313      	orrs	r3, r2
 800279a:	658b      	str	r3, [r1, #88]	; 0x58
 800279c:	e001      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d032      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	2b30      	cmp	r3, #48	; 0x30
 80027b4:	d01c      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80027b6:	2b30      	cmp	r3, #48	; 0x30
 80027b8:	d817      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d00c      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d813      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d10f      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	4a88      	ldr	r2, [pc, #544]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027d6:	e00e      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	2102      	movs	r1, #2
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 f866 	bl	80038b0 <RCCEx_PLL2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027e8:	e005      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80027f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027fc:	4b7c      	ldr	r3, [pc, #496]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	4979      	ldr	r1, [pc, #484]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800280a:	4313      	orrs	r3, r2
 800280c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d047      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002828:	d030      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800282a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800282e:	d82a      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002834:	d02c      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800283a:	d824      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d018      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	d81e      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002850:	d007      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002852:	e018      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002860:	e017      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f821 	bl	80038b0 <RCCEx_PLL2_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002872:	e00e      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f001 f8ca 	bl	8003a14 <RCCEx_PLL3_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002884:	e005      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
      break;
 800288a:	e002      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002898:	4b55      	ldr	r3, [pc, #340]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800289a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	4952      	ldr	r1, [pc, #328]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	650b      	str	r3, [r1, #80]	; 0x50
 80028aa:	e001      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d049      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d02e      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ca:	d828      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80028cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d0:	d02a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80028d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d6:	d822      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80028d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028dc:	d026      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80028de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028e2:	d81c      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80028e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e8:	d010      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x464>
 80028ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ee:	d816      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01d      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d111      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ffd5 	bl	80038b0 <RCCEx_PLL2_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800290a:	e012      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f001 f87e 	bl	8003a14 <RCCEx_PLL3_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800291c:	e009      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
      break;
 8002922:	e006      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002924:	bf00      	nop
 8002926:	e004      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002928:	bf00      	nop
 800292a:	e002      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002944:	492a      	ldr	r1, [pc, #168]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002946:	4313      	orrs	r3, r2
 8002948:	650b      	str	r3, [r1, #80]	; 0x50
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002966:	d02e      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296c:	d828      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d02a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d822      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800297a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800297e:	d026      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002984:	d81c      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800298a:	d010      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002990:	d816      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01d      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800299a:	d111      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 ff84 	bl	80038b0 <RCCEx_PLL2_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029ac:	e012      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3324      	adds	r3, #36	; 0x24
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f82d 	bl	8003a14 <RCCEx_PLL3_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029be:	e009      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
      break;
 80029c4:	e006      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80029c6:	bf00      	nop
 80029c8:	e004      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80029ca:	bf00      	nop
 80029cc:	e002      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80029d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029e8:	4901      	ldr	r1, [pc, #4]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	658b      	str	r3, [r1, #88]	; 0x58
 80029ee:	e003      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80029f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02f      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0c:	d00e      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a12:	d814      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1c:	d10f      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1e:	4baf      	ldr	r3, [pc, #700]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	4aae      	ldr	r2, [pc, #696]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a2a:	e00c      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 ff3c 	bl	80038b0 <RCCEx_PLL2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a3c:	e003      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
      break;
 8002a42:	e000      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a4c:	4ba3      	ldr	r3, [pc, #652]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a58:	49a0      	ldr	r1, [pc, #640]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a5e:	e001      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d032      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d81b      	bhi.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002ab7 	.word	0x08002ab7
 8002a84:	08002a91 	.word	0x08002a91
 8002a88:	08002a9f 	.word	0x08002a9f
 8002a8c:	08002ab7 	.word	0x08002ab7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4a91      	ldr	r2, [pc, #580]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a9c:	e00c      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ff03 	bl	80038b0 <RCCEx_PLL2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002aae:	e003      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002abe:	4b87      	ldr	r3, [pc, #540]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4984      	ldr	r1, [pc, #528]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ad0:	e001      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8086 	beq.w	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae4:	4b7e      	ldr	r3, [pc, #504]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a7d      	ldr	r2, [pc, #500]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af0:	f7fe f9d2 	bl	8000e98 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe f9ce 	bl	8000e98 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d902      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	75fb      	strb	r3, [r7, #23]
        break;
 8002b0a:	e005      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0c:	4b74      	ldr	r3, [pc, #464]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d166      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b28:	4053      	eors	r3, r2
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d013      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b32:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3c:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a66      	ldr	r2, [pc, #408]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a63      	ldr	r2, [pc, #396]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b54:	4a61      	ldr	r2, [pc, #388]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b64:	d115      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe f997 	bl	8000e98 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe f993 	bl	8000e98 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d902      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	75fb      	strb	r3, [r7, #23]
            break;
 8002b84:	e005      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b86:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ed      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d126      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bb6:	0919      	lsrs	r1, r3, #4
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002bba:	400b      	ands	r3, r1
 8002bbc:	4947      	ldr	r1, [pc, #284]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	610b      	str	r3, [r1, #16]
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002bc4:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4a44      	ldr	r2, [pc, #272]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bce:	6113      	str	r3, [r2, #16]
 8002bd0:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	493f      	ldr	r1, [pc, #252]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	670b      	str	r3, [r1, #112]	; 0x70
 8002be4:	e004      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	75bb      	strb	r3, [r7, #22]
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8085 	beq.w	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c02:	2b28      	cmp	r3, #40	; 0x28
 8002c04:	d866      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002ce9 	.word	0x08002ce9
 8002c10:	08002cd5 	.word	0x08002cd5
 8002c14:	08002cd5 	.word	0x08002cd5
 8002c18:	08002cd5 	.word	0x08002cd5
 8002c1c:	08002cd5 	.word	0x08002cd5
 8002c20:	08002cd5 	.word	0x08002cd5
 8002c24:	08002cd5 	.word	0x08002cd5
 8002c28:	08002cd5 	.word	0x08002cd5
 8002c2c:	08002cb1 	.word	0x08002cb1
 8002c30:	08002cd5 	.word	0x08002cd5
 8002c34:	08002cd5 	.word	0x08002cd5
 8002c38:	08002cd5 	.word	0x08002cd5
 8002c3c:	08002cd5 	.word	0x08002cd5
 8002c40:	08002cd5 	.word	0x08002cd5
 8002c44:	08002cd5 	.word	0x08002cd5
 8002c48:	08002cd5 	.word	0x08002cd5
 8002c4c:	08002cc3 	.word	0x08002cc3
 8002c50:	08002cd5 	.word	0x08002cd5
 8002c54:	08002cd5 	.word	0x08002cd5
 8002c58:	08002cd5 	.word	0x08002cd5
 8002c5c:	08002cd5 	.word	0x08002cd5
 8002c60:	08002cd5 	.word	0x08002cd5
 8002c64:	08002cd5 	.word	0x08002cd5
 8002c68:	08002cd5 	.word	0x08002cd5
 8002c6c:	08002ce9 	.word	0x08002ce9
 8002c70:	08002cd5 	.word	0x08002cd5
 8002c74:	08002cd5 	.word	0x08002cd5
 8002c78:	08002cd5 	.word	0x08002cd5
 8002c7c:	08002cd5 	.word	0x08002cd5
 8002c80:	08002cd5 	.word	0x08002cd5
 8002c84:	08002cd5 	.word	0x08002cd5
 8002c88:	08002cd5 	.word	0x08002cd5
 8002c8c:	08002ce9 	.word	0x08002ce9
 8002c90:	08002cd5 	.word	0x08002cd5
 8002c94:	08002cd5 	.word	0x08002cd5
 8002c98:	08002cd5 	.word	0x08002cd5
 8002c9c:	08002cd5 	.word	0x08002cd5
 8002ca0:	08002cd5 	.word	0x08002cd5
 8002ca4:	08002cd5 	.word	0x08002cd5
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	08002ce9 	.word	0x08002ce9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fdfa 	bl	80038b0 <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cc0:	e013      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fea3 	bl	8003a14 <RCCEx_PLL3_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cd2:	e00a      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd8:	e007      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cda:	bf00      	nop
 8002cdc:	58024400 	.word	0x58024400
 8002ce0:	58024800 	.word	0x58024800
 8002ce4:	00ffffcf 	.word	0x00ffffcf
      break;
 8002ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cf0:	4b96      	ldr	r3, [pc, #600]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfc:	4993      	ldr	r1, [pc, #588]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	654b      	str	r3, [r1, #84]	; 0x54
 8002d02:	e001      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d038      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d821      	bhi.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d67 	.word	0x08002d67
 8002d28:	08002d3d 	.word	0x08002d3d
 8002d2c:	08002d4f 	.word	0x08002d4f
 8002d30:	08002d67 	.word	0x08002d67
 8002d34:	08002d67 	.word	0x08002d67
 8002d38:	08002d67 	.word	0x08002d67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fdb4 	bl	80038b0 <RCCEx_PLL2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d4c:	e00c      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3324      	adds	r3, #36	; 0x24
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fe5d 	bl	8003a14 <RCCEx_PLL3_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d5e:	e003      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
      break;
 8002d64:	e000      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	4974      	ldr	r1, [pc, #464]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002d80:	e001      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d821      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002de7 	.word	0x08002de7
 8002da8:	08002dbd 	.word	0x08002dbd
 8002dac:	08002dcf 	.word	0x08002dcf
 8002db0:	08002de7 	.word	0x08002de7
 8002db4:	08002de7 	.word	0x08002de7
 8002db8:	08002de7 	.word	0x08002de7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd74 	bl	80038b0 <RCCEx_PLL2_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3324      	adds	r3, #36	; 0x24
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fe1d 	bl	8003a14 <RCCEx_PLL3_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002dde:	e003      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	4953      	ldr	r1, [pc, #332]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	658b      	str	r3, [r1, #88]	; 0x58
 8002e02:	e001      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d04b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1e:	d02e      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e24:	d828      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d02a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d822      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e36:	d026      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e3c:	d81c      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e42:	d010      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e48:	d816      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01d      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e52:	d111      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd28 	bl	80038b0 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e64:	e012      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3324      	adds	r3, #36	; 0x24
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fdd1 	bl	8003a14 <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e76:	e009      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	e006      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e004      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002e82:	bf00      	nop
 8002e84:	e002      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e92:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea0:	492a      	ldr	r1, [pc, #168]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	654b      	str	r3, [r1, #84]	; 0x54
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d04d      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ebe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ec2:	d02e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002ec4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ec8:	d828      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	d02a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d822      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002ed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002eda:	d026      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ee0:	d81c      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee6:	d010      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eec:	d816      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01d      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d111      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fcd6 	bl	80038b0 <RCCEx_PLL2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f08:	e012      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3324      	adds	r3, #36	; 0x24
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fd7f 	bl	8003a14 <RCCEx_PLL3_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f1a:	e009      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f20:	e006      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f22:	bf00      	nop
 8002f24:	e004      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f44:	4901      	ldr	r1, [pc, #4]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	658b      	str	r3, [r1, #88]	; 0x58
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d04b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f6a:	d02e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002f6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f70:	d828      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f76:	d02a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7c:	d822      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002f7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f82:	d026      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002f84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f88:	d81c      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f94:	d816      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fc82 	bl	80038b0 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fb0:	e012      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3324      	adds	r3, #36	; 0x24
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fd2b 	bl	8003a14 <RCCEx_PLL3_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002fde:	4b9d      	ldr	r3, [pc, #628]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fec:	4999      	ldr	r1, [pc, #612]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300e:	d10a      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fcfc 	bl	8003a14 <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003026:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003034:	4987      	ldr	r1, [pc, #540]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003036:	4313      	orrs	r3, r2
 8003038:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003050:	d10a      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3324      	adds	r3, #36	; 0x24
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fcdb 	bl	8003a14 <RCCEx_PLL3_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003068:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003076:	4977      	ldr	r1, [pc, #476]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003078:	4313      	orrs	r3, r2
 800307a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d034      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800308e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003092:	d01d      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003098:	d817      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800309e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a2:	d009      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80030a4:	e011      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fbff 	bl	80038b0 <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030b6:	e00c      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3324      	adds	r3, #36	; 0x24
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fca8 	bl	8003a14 <RCCEx_PLL3_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
      break;
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80030d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b5e      	ldr	r3, [pc, #376]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030e6:	495b      	ldr	r1, [pc, #364]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	658b      	str	r3, [r1, #88]	; 0x58
 80030ec:	e001      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d033      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003108:	d01c      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800310a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800310e:	d816      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003114:	d003      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800311a:	d007      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800311c:	e00f      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311e:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800312a:	e00c      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fc6e 	bl	8003a14 <RCCEx_PLL3_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
      break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315a:	493e      	ldr	r1, [pc, #248]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800315c:	4313      	orrs	r3, r2
 800315e:	654b      	str	r3, [r1, #84]	; 0x54
 8003160:	e001      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d029      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d007      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003180:	e00f      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	4a33      	ldr	r2, [pc, #204]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800318e:	e00b      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fb8a 	bl	80038b0 <RCCEx_PLL2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
      break;
 80031a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031ae:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	4926      	ldr	r1, [pc, #152]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031c0:	e001      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3324      	adds	r3, #36	; 0x24
 80031d6:	2102      	movs	r1, #2
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fc1b 	bl	8003a14 <RCCEx_PLL3_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d033      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fc:	d017      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80031fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003202:	d811      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d013      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d80b      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d106      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003226:	e007      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
      break;
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	4902      	ldr	r1, [pc, #8]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800324c:	4313      	orrs	r3, r2
 800324e:	654b      	str	r3, [r1, #84]	; 0x54
 8003250:	e004      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003252:	bf00      	nop
 8003254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003268:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	492e      	ldr	r1, [pc, #184]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003276:	4313      	orrs	r3, r2
 8003278:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003294:	4926      	ldr	r1, [pc, #152]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003296:	4313      	orrs	r3, r2
 8003298:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b2:	491f      	ldr	r1, [pc, #124]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032ce:	6113      	str	r3, [r2, #16]
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032da:	4915      	ldr	r1, [pc, #84]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da08      	bge.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	490e      	ldr	r1, [pc, #56]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003316:	4313      	orrs	r3, r2
 8003318:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800331a:	7dbb      	ldrb	r3, [r7, #22]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	58024400 	.word	0x58024400

08003334 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003338:	f7ff f85a 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4904      	ldr	r1, [pc, #16]	; (800335c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	58024400 	.word	0x58024400
 800335c:	08004f0c 	.word	0x08004f0c

08003360 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003368:	4ba1      	ldr	r3, [pc, #644]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003372:	4b9f      	ldr	r3, [pc, #636]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	0b1b      	lsrs	r3, r3, #12
 8003378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800337c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800337e:	4b9c      	ldr	r3, [pc, #624]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800338a:	4b99      	ldr	r3, [pc, #612]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	08db      	lsrs	r3, r3, #3
 8003390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8111 	beq.w	80035d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	f000 8083 	beq.w	80034bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f200 80a1 	bhi.w	8003500 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d056      	beq.n	8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80033ca:	e099      	b.n	8003500 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033cc:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02d      	beq.n	8003434 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033d8:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	4a84      	ldr	r2, [pc, #528]	; (80035f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003412:	ed97 6a03 	vldr	s12, [r7, #12]
 8003416:	eddf 5a78 	vldr	s11, [pc, #480]	; 80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003432:	e087      	b.n	8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80035fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003456:	ed97 6a03 	vldr	s12, [r7, #12]
 800345a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003476:	e065      	b.n	8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	ed97 6a03 	vldr	s12, [r7, #12]
 800349e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034ba:	e043      	b.n	8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80034ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ce:	4b48      	ldr	r3, [pc, #288]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034de:	ed97 6a03 	vldr	s12, [r7, #12]
 80034e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034fe:	e021      	b.n	8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800350e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003522:	ed97 6a03 	vldr	s12, [r7, #12]
 8003526:	eddf 5a34 	vldr	s11, [pc, #208]	; 80035f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800352a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800352e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003542:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003544:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800355a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800355e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356a:	ee17 2a90 	vmov	r2, s15
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800358c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003598:	ee17 2a90 	vmov	r2, s15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80035be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c6:	ee17 2a90 	vmov	r2, s15
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035ce:	e008      	b.n	80035e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	58024400 	.word	0x58024400
 80035f4:	03d09000 	.word	0x03d09000
 80035f8:	46000000 	.word	0x46000000
 80035fc:	4c742400 	.word	0x4c742400
 8003600:	4a742400 	.word	0x4a742400
 8003604:	4af42400 	.word	0x4af42400

08003608 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003610:	4ba1      	ldr	r3, [pc, #644]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800361a:	4b9f      	ldr	r3, [pc, #636]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	0d1b      	lsrs	r3, r3, #20
 8003620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003624:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003626:	4b9c      	ldr	r3, [pc, #624]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003632:	4b99      	ldr	r3, [pc, #612]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	08db      	lsrs	r3, r3, #3
 8003638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8111 	beq.w	8003878 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b02      	cmp	r3, #2
 800365a:	f000 8083 	beq.w	8003764 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b02      	cmp	r3, #2
 8003662:	f200 80a1 	bhi.w	80037a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d056      	beq.n	8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003672:	e099      	b.n	80037a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003674:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02d      	beq.n	80036dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	08db      	lsrs	r3, r3, #3
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	4a84      	ldr	r2, [pc, #528]	; (800389c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036aa:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80036be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036da:	e087      	b.n	80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80036ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003702:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800371e:	e065      	b.n	80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a03 	vldr	s12, [r7, #12]
 8003746:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003762:	e043      	b.n	80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b48      	ldr	r3, [pc, #288]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a03 	vldr	s12, [r7, #12]
 800378a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037a6:	e021      	b.n	80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	0a5b      	lsrs	r3, r3, #9
 80037f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003806:	edd7 6a07 	vldr	s13, [r7, #28]
 800380a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003812:	ee17 2a90 	vmov	r2, s15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003834:	edd7 6a07 	vldr	s13, [r7, #28]
 8003838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800383c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003840:	ee17 2a90 	vmov	r2, s15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800385e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003862:	edd7 6a07 	vldr	s13, [r7, #28]
 8003866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 2a90 	vmov	r2, s15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003876:	e008      	b.n	800388a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
}
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58024400 	.word	0x58024400
 800389c:	03d09000 	.word	0x03d09000
 80038a0:	46000000 	.word	0x46000000
 80038a4:	4c742400 	.word	0x4c742400
 80038a8:	4a742400 	.word	0x4a742400
 80038ac:	4af42400 	.word	0x4af42400

080038b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038be:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d101      	bne.n	80038ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e099      	b.n	8003a02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80038ce:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4e      	ldr	r2, [pc, #312]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80038d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038da:	f7fd fadd 	bl	8000e98 <HAL_GetTick>
 80038de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038e2:	f7fd fad9 	bl	8000e98 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e086      	b.n	8003a02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038f4:	4b45      	ldr	r3, [pc, #276]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003900:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	493f      	ldr	r1, [pc, #252]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	628b      	str	r3, [r1, #40]	; 0x28
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	3b01      	subs	r3, #1
 800391a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	3b01      	subs	r3, #1
 8003924:	025b      	lsls	r3, r3, #9
 8003926:	b29b      	uxth	r3, r3
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	3b01      	subs	r3, #1
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003944:	4931      	ldr	r1, [pc, #196]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800394a:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	492d      	ldr	r1, [pc, #180]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f023 0220 	bic.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	4928      	ldr	r1, [pc, #160]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800396e:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003974:	f023 0310 	bic.w	r3, r3, #16
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 800397c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <RCCEx_PLL2_Config+0x160>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	69d2      	ldr	r2, [r2, #28]
 8003986:	00d2      	lsls	r2, r2, #3
 8003988:	4920      	ldr	r1, [pc, #128]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 800398a:	4313      	orrs	r3, r2
 800398c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039ac:	e00f      	b.n	80039ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039c0:	e005      	b.n	80039ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039da:	f7fd fa5d 	bl	8000e98 <HAL_GetTick>
 80039de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039e2:	f7fd fa59 	bl	8000e98 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e006      	b.n	8003a02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <RCCEx_PLL2_Config+0x15c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	ffff0007 	.word	0xffff0007

08003a14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d101      	bne.n	8003a32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e099      	b.n	8003b66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a32:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fa2b 	bl	8000e98 <HAL_GetTick>
 8003a42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a46:	f7fd fa27 	bl	8000e98 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e086      	b.n	8003b66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a58:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a64:	4b42      	ldr	r3, [pc, #264]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	051b      	lsls	r3, r3, #20
 8003a72:	493f      	ldr	r1, [pc, #252]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	628b      	str	r3, [r1, #40]	; 0x28
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	025b      	lsls	r3, r3, #9
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aa8:	4931      	ldr	r1, [pc, #196]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003aae:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	492d      	ldr	r1, [pc, #180]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	4928      	ldr	r1, [pc, #160]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <RCCEx_PLL3_Config+0x160>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	69d2      	ldr	r2, [r2, #28]
 8003aea:	00d2      	lsls	r2, r2, #3
 8003aec:	4920      	ldr	r1, [pc, #128]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003af2:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b10:	e00f      	b.n	8003b32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d106      	bne.n	8003b26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b18:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b24:	e005      	b.n	8003b32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f9ab 	bl	8000e98 <HAL_GetTick>
 8003b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b44:	e008      	b.n	8003b58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b46:	f7fd f9a7 	bl	8000e98 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e006      	b.n	8003b66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <RCCEx_PLL3_Config+0x15c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	58024400 	.word	0x58024400
 8003b74:	ffff0007 	.word	0xffff0007

08003b78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0f1      	b.n	8003d6e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a78      	ldr	r2, [pc, #480]	; (8003d78 <HAL_SPI_Init+0x200>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00f      	beq.n	8003bba <HAL_SPI_Init+0x42>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a77      	ldr	r2, [pc, #476]	; (8003d7c <HAL_SPI_Init+0x204>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00a      	beq.n	8003bba <HAL_SPI_Init+0x42>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_SPI_Init+0x208>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d005      	beq.n	8003bba <HAL_SPI_Init+0x42>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d901      	bls.n	8003bba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0d9      	b.n	8003d6e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8e2 	bl	8003d84 <SPI_GetPacketSize>
 8003bc0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6c      	ldr	r2, [pc, #432]	; (8003d78 <HAL_SPI_Init+0x200>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00c      	beq.n	8003be6 <HAL_SPI_Init+0x6e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <HAL_SPI_Init+0x204>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_SPI_Init+0x6e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_SPI_Init+0x208>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Init+0x6e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d811      	bhi.n	8003c0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003bea:	4a63      	ldr	r2, [pc, #396]	; (8003d78 <HAL_SPI_Init+0x200>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a61      	ldr	r2, [pc, #388]	; (8003d7c <HAL_SPI_Init+0x204>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_SPI_Init+0x8c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a60      	ldr	r2, [pc, #384]	; (8003d80 <HAL_SPI_Init+0x208>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d104      	bne.n	8003c0e <HAL_SPI_Init+0x96>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d901      	bls.n	8003c0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0af      	b.n	8003d6e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fc ff92 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003c4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c54:	d119      	bne.n	8003c8a <HAL_SPI_Init+0x112>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5e:	d103      	bne.n	8003c68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10c      	bne.n	8003c8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c78:	d107      	bne.n	8003c8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	ea42 0103 	orr.w	r1, r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d113      	bne.n	8003d2a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40013000 	.word	0x40013000
 8003d7c:	40003800 	.word	0x40003800
 8003d80:	40003c00 	.word	0x40003c00

08003d84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3307      	adds	r3, #7
 8003da2:	08db      	lsrs	r3, r3, #3
 8003da4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e042      	b.n	8003e52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fc ff1a 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f82d 	bl	8003e5c <UART_SetConfig>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e022      	b.n	8003e52 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fd89 	bl	800492c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fe10 	bl	8004a70 <UART_CheckIdleState>
 8003e50:	4603      	mov	r3, r0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b092      	sub	sp, #72	; 0x48
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4bbe      	ldr	r3, [pc, #760]	; (8004184 <UART_SetConfig+0x328>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4ab3      	ldr	r2, [pc, #716]	; (8004188 <UART_SetConfig+0x32c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	4baf      	ldr	r3, [pc, #700]	; (800418c <UART_SetConfig+0x330>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f023 010f 	bic.w	r1, r3, #15
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4aa6      	ldr	r2, [pc, #664]	; (8004190 <UART_SetConfig+0x334>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d177      	bne.n	8003fec <UART_SetConfig+0x190>
 8003efc:	4ba5      	ldr	r3, [pc, #660]	; (8004194 <UART_SetConfig+0x338>)
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f04:	2b28      	cmp	r3, #40	; 0x28
 8003f06:	d86d      	bhi.n	8003fe4 <UART_SetConfig+0x188>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <UART_SetConfig+0xb4>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003fb5 	.word	0x08003fb5
 8003f14:	08003fe5 	.word	0x08003fe5
 8003f18:	08003fe5 	.word	0x08003fe5
 8003f1c:	08003fe5 	.word	0x08003fe5
 8003f20:	08003fe5 	.word	0x08003fe5
 8003f24:	08003fe5 	.word	0x08003fe5
 8003f28:	08003fe5 	.word	0x08003fe5
 8003f2c:	08003fe5 	.word	0x08003fe5
 8003f30:	08003fbd 	.word	0x08003fbd
 8003f34:	08003fe5 	.word	0x08003fe5
 8003f38:	08003fe5 	.word	0x08003fe5
 8003f3c:	08003fe5 	.word	0x08003fe5
 8003f40:	08003fe5 	.word	0x08003fe5
 8003f44:	08003fe5 	.word	0x08003fe5
 8003f48:	08003fe5 	.word	0x08003fe5
 8003f4c:	08003fe5 	.word	0x08003fe5
 8003f50:	08003fc5 	.word	0x08003fc5
 8003f54:	08003fe5 	.word	0x08003fe5
 8003f58:	08003fe5 	.word	0x08003fe5
 8003f5c:	08003fe5 	.word	0x08003fe5
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	08003fe5 	.word	0x08003fe5
 8003f68:	08003fe5 	.word	0x08003fe5
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fcd 	.word	0x08003fcd
 8003f74:	08003fe5 	.word	0x08003fe5
 8003f78:	08003fe5 	.word	0x08003fe5
 8003f7c:	08003fe5 	.word	0x08003fe5
 8003f80:	08003fe5 	.word	0x08003fe5
 8003f84:	08003fe5 	.word	0x08003fe5
 8003f88:	08003fe5 	.word	0x08003fe5
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003fd5 	.word	0x08003fd5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fe5 	.word	0x08003fe5
 8003fac:	08003fe5 	.word	0x08003fe5
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fba:	e222      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fc2:	e21e      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fca:	e21a      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fd2:	e216      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fda:	e212      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fdc:	2340      	movs	r3, #64	; 0x40
 8003fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fe2:	e20e      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fea:	e20a      	b.n	8004402 <UART_SetConfig+0x5a6>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a69      	ldr	r2, [pc, #420]	; (8004198 <UART_SetConfig+0x33c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d130      	bne.n	8004058 <UART_SetConfig+0x1fc>
 8003ff6:	4b67      	ldr	r3, [pc, #412]	; (8004194 <UART_SetConfig+0x338>)
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d826      	bhi.n	8004050 <UART_SetConfig+0x1f4>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x1ac>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004021 	.word	0x08004021
 800400c:	08004029 	.word	0x08004029
 8004010:	08004031 	.word	0x08004031
 8004014:	08004039 	.word	0x08004039
 8004018:	08004041 	.word	0x08004041
 800401c:	08004049 	.word	0x08004049
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004026:	e1ec      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004028:	2304      	movs	r3, #4
 800402a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800402e:	e1e8      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004030:	2308      	movs	r3, #8
 8004032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004036:	e1e4      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004038:	2310      	movs	r3, #16
 800403a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800403e:	e1e0      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004040:	2320      	movs	r3, #32
 8004042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004046:	e1dc      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800404e:	e1d8      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004056:	e1d4      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a4f      	ldr	r2, [pc, #316]	; (800419c <UART_SetConfig+0x340>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d130      	bne.n	80040c4 <UART_SetConfig+0x268>
 8004062:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <UART_SetConfig+0x338>)
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	2b05      	cmp	r3, #5
 800406c:	d826      	bhi.n	80040bc <UART_SetConfig+0x260>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x218>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	0800408d 	.word	0x0800408d
 8004078:	08004095 	.word	0x08004095
 800407c:	0800409d 	.word	0x0800409d
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040ad 	.word	0x080040ad
 8004088:	080040b5 	.word	0x080040b5
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004092:	e1b6      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800409a:	e1b2      	b.n	8004402 <UART_SetConfig+0x5a6>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040a2:	e1ae      	b.n	8004402 <UART_SetConfig+0x5a6>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040aa:	e1aa      	b.n	8004402 <UART_SetConfig+0x5a6>
 80040ac:	2320      	movs	r3, #32
 80040ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040b2:	e1a6      	b.n	8004402 <UART_SetConfig+0x5a6>
 80040b4:	2340      	movs	r3, #64	; 0x40
 80040b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ba:	e1a2      	b.n	8004402 <UART_SetConfig+0x5a6>
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c2:	e19e      	b.n	8004402 <UART_SetConfig+0x5a6>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a35      	ldr	r2, [pc, #212]	; (80041a0 <UART_SetConfig+0x344>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d130      	bne.n	8004130 <UART_SetConfig+0x2d4>
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <UART_SetConfig+0x338>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d826      	bhi.n	8004128 <UART_SetConfig+0x2cc>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x284>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	080040f9 	.word	0x080040f9
 80040e4:	08004101 	.word	0x08004101
 80040e8:	08004109 	.word	0x08004109
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040fe:	e180      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004100:	2304      	movs	r3, #4
 8004102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004106:	e17c      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004108:	2308      	movs	r3, #8
 800410a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800410e:	e178      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004110:	2310      	movs	r3, #16
 8004112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004116:	e174      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004118:	2320      	movs	r3, #32
 800411a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800411e:	e170      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004126:	e16c      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800412e:	e168      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <UART_SetConfig+0x348>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d142      	bne.n	80041c0 <UART_SetConfig+0x364>
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <UART_SetConfig+0x338>)
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	2b05      	cmp	r3, #5
 8004144:	d838      	bhi.n	80041b8 <UART_SetConfig+0x35c>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0x2f0>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004165 	.word	0x08004165
 8004150:	0800416d 	.word	0x0800416d
 8004154:	08004175 	.word	0x08004175
 8004158:	0800417d 	.word	0x0800417d
 800415c:	080041a9 	.word	0x080041a9
 8004160:	080041b1 	.word	0x080041b1
 8004164:	2300      	movs	r3, #0
 8004166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800416a:	e14a      	b.n	8004402 <UART_SetConfig+0x5a6>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004172:	e146      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417a:	e142      	b.n	8004402 <UART_SetConfig+0x5a6>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004182:	e13e      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004184:	cfff69f3 	.word	0xcfff69f3
 8004188:	58000c00 	.word	0x58000c00
 800418c:	11fff4ff 	.word	0x11fff4ff
 8004190:	40011000 	.word	0x40011000
 8004194:	58024400 	.word	0x58024400
 8004198:	40004400 	.word	0x40004400
 800419c:	40004800 	.word	0x40004800
 80041a0:	40004c00 	.word	0x40004c00
 80041a4:	40005000 	.word	0x40005000
 80041a8:	2320      	movs	r3, #32
 80041aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ae:	e128      	b.n	8004402 <UART_SetConfig+0x5a6>
 80041b0:	2340      	movs	r3, #64	; 0x40
 80041b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b6:	e124      	b.n	8004402 <UART_SetConfig+0x5a6>
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041be:	e120      	b.n	8004402 <UART_SetConfig+0x5a6>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4acb      	ldr	r2, [pc, #812]	; (80044f4 <UART_SetConfig+0x698>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d176      	bne.n	80042b8 <UART_SetConfig+0x45c>
 80041ca:	4bcb      	ldr	r3, [pc, #812]	; (80044f8 <UART_SetConfig+0x69c>)
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d2:	2b28      	cmp	r3, #40	; 0x28
 80041d4:	d86c      	bhi.n	80042b0 <UART_SetConfig+0x454>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x380>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	08004281 	.word	0x08004281
 80041e0:	080042b1 	.word	0x080042b1
 80041e4:	080042b1 	.word	0x080042b1
 80041e8:	080042b1 	.word	0x080042b1
 80041ec:	080042b1 	.word	0x080042b1
 80041f0:	080042b1 	.word	0x080042b1
 80041f4:	080042b1 	.word	0x080042b1
 80041f8:	080042b1 	.word	0x080042b1
 80041fc:	08004289 	.word	0x08004289
 8004200:	080042b1 	.word	0x080042b1
 8004204:	080042b1 	.word	0x080042b1
 8004208:	080042b1 	.word	0x080042b1
 800420c:	080042b1 	.word	0x080042b1
 8004210:	080042b1 	.word	0x080042b1
 8004214:	080042b1 	.word	0x080042b1
 8004218:	080042b1 	.word	0x080042b1
 800421c:	08004291 	.word	0x08004291
 8004220:	080042b1 	.word	0x080042b1
 8004224:	080042b1 	.word	0x080042b1
 8004228:	080042b1 	.word	0x080042b1
 800422c:	080042b1 	.word	0x080042b1
 8004230:	080042b1 	.word	0x080042b1
 8004234:	080042b1 	.word	0x080042b1
 8004238:	080042b1 	.word	0x080042b1
 800423c:	08004299 	.word	0x08004299
 8004240:	080042b1 	.word	0x080042b1
 8004244:	080042b1 	.word	0x080042b1
 8004248:	080042b1 	.word	0x080042b1
 800424c:	080042b1 	.word	0x080042b1
 8004250:	080042b1 	.word	0x080042b1
 8004254:	080042b1 	.word	0x080042b1
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042a1 	.word	0x080042a1
 8004260:	080042b1 	.word	0x080042b1
 8004264:	080042b1 	.word	0x080042b1
 8004268:	080042b1 	.word	0x080042b1
 800426c:	080042b1 	.word	0x080042b1
 8004270:	080042b1 	.word	0x080042b1
 8004274:	080042b1 	.word	0x080042b1
 8004278:	080042b1 	.word	0x080042b1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004286:	e0bc      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428e:	e0b8      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004296:	e0b4      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e0b0      	b.n	8004402 <UART_SetConfig+0x5a6>
 80042a0:	2320      	movs	r3, #32
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e0ac      	b.n	8004402 <UART_SetConfig+0x5a6>
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ae:	e0a8      	b.n	8004402 <UART_SetConfig+0x5a6>
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b6:	e0a4      	b.n	8004402 <UART_SetConfig+0x5a6>
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a8f      	ldr	r2, [pc, #572]	; (80044fc <UART_SetConfig+0x6a0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d130      	bne.n	8004324 <UART_SetConfig+0x4c8>
 80042c2:	4b8d      	ldr	r3, [pc, #564]	; (80044f8 <UART_SetConfig+0x69c>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d826      	bhi.n	800431c <UART_SetConfig+0x4c0>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0x478>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042ed 	.word	0x080042ed
 80042d8:	080042f5 	.word	0x080042f5
 80042dc:	080042fd 	.word	0x080042fd
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e086      	b.n	8004402 <UART_SetConfig+0x5a6>
 80042f4:	2304      	movs	r3, #4
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e082      	b.n	8004402 <UART_SetConfig+0x5a6>
 80042fc:	2308      	movs	r3, #8
 80042fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004302:	e07e      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004304:	2310      	movs	r3, #16
 8004306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430a:	e07a      	b.n	8004402 <UART_SetConfig+0x5a6>
 800430c:	2320      	movs	r3, #32
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e076      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431a:	e072      	b.n	8004402 <UART_SetConfig+0x5a6>
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004322:	e06e      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a75      	ldr	r2, [pc, #468]	; (8004500 <UART_SetConfig+0x6a4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d130      	bne.n	8004390 <UART_SetConfig+0x534>
 800432e:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <UART_SetConfig+0x69c>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	2b05      	cmp	r3, #5
 8004338:	d826      	bhi.n	8004388 <UART_SetConfig+0x52c>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x4e4>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004359 	.word	0x08004359
 8004344:	08004361 	.word	0x08004361
 8004348:	08004369 	.word	0x08004369
 800434c:	08004371 	.word	0x08004371
 8004350:	08004379 	.word	0x08004379
 8004354:	08004381 	.word	0x08004381
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e050      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004360:	2304      	movs	r3, #4
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e04c      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004368:	2308      	movs	r3, #8
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436e:	e048      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004370:	2310      	movs	r3, #16
 8004372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004376:	e044      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004378:	2320      	movs	r3, #32
 800437a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437e:	e040      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004386:	e03c      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438e:	e038      	b.n	8004402 <UART_SetConfig+0x5a6>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5b      	ldr	r2, [pc, #364]	; (8004504 <UART_SetConfig+0x6a8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d130      	bne.n	80043fc <UART_SetConfig+0x5a0>
 800439a:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <UART_SetConfig+0x69c>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d826      	bhi.n	80043f4 <UART_SetConfig+0x598>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0x550>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043c5 	.word	0x080043c5
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	080043d5 	.word	0x080043d5
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043ed 	.word	0x080043ed
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e01a      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e016      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e012      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e00e      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043e4:	2320      	movs	r3, #32
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e00a      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e006      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fa:	e002      	b.n	8004402 <UART_SetConfig+0x5a6>
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3f      	ldr	r2, [pc, #252]	; (8004504 <UART_SetConfig+0x6a8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 80f8 	bne.w	80045fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800440e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004412:	2b20      	cmp	r3, #32
 8004414:	dc46      	bgt.n	80044a4 <UART_SetConfig+0x648>
 8004416:	2b02      	cmp	r3, #2
 8004418:	f2c0 8082 	blt.w	8004520 <UART_SetConfig+0x6c4>
 800441c:	3b02      	subs	r3, #2
 800441e:	2b1e      	cmp	r3, #30
 8004420:	d87e      	bhi.n	8004520 <UART_SetConfig+0x6c4>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x5cc>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	080044ab 	.word	0x080044ab
 800442c:	08004521 	.word	0x08004521
 8004430:	080044b3 	.word	0x080044b3
 8004434:	08004521 	.word	0x08004521
 8004438:	08004521 	.word	0x08004521
 800443c:	08004521 	.word	0x08004521
 8004440:	080044c3 	.word	0x080044c3
 8004444:	08004521 	.word	0x08004521
 8004448:	08004521 	.word	0x08004521
 800444c:	08004521 	.word	0x08004521
 8004450:	08004521 	.word	0x08004521
 8004454:	08004521 	.word	0x08004521
 8004458:	08004521 	.word	0x08004521
 800445c:	08004521 	.word	0x08004521
 8004460:	080044d3 	.word	0x080044d3
 8004464:	08004521 	.word	0x08004521
 8004468:	08004521 	.word	0x08004521
 800446c:	08004521 	.word	0x08004521
 8004470:	08004521 	.word	0x08004521
 8004474:	08004521 	.word	0x08004521
 8004478:	08004521 	.word	0x08004521
 800447c:	08004521 	.word	0x08004521
 8004480:	08004521 	.word	0x08004521
 8004484:	08004521 	.word	0x08004521
 8004488:	08004521 	.word	0x08004521
 800448c:	08004521 	.word	0x08004521
 8004490:	08004521 	.word	0x08004521
 8004494:	08004521 	.word	0x08004521
 8004498:	08004521 	.word	0x08004521
 800449c:	08004521 	.word	0x08004521
 80044a0:	08004513 	.word	0x08004513
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d037      	beq.n	8004518 <UART_SetConfig+0x6bc>
 80044a8:	e03a      	b.n	8004520 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80044aa:	f7fe ff43 	bl	8003334 <HAL_RCCEx_GetD3PCLK1Freq>
 80044ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044b0:	e03c      	b.n	800452c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe ff52 	bl	8003360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044c0:	e034      	b.n	800452c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044c2:	f107 0318 	add.w	r3, r7, #24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff f89e 	bl	8003608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044d0:	e02c      	b.n	800452c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <UART_SetConfig+0x69c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <UART_SetConfig+0x69c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	08db      	lsrs	r3, r3, #3
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	4a07      	ldr	r2, [pc, #28]	; (8004508 <UART_SetConfig+0x6ac>)
 80044ea:	fa22 f303 	lsr.w	r3, r2, r3
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044f0:	e01c      	b.n	800452c <UART_SetConfig+0x6d0>
 80044f2:	bf00      	nop
 80044f4:	40011400 	.word	0x40011400
 80044f8:	58024400 	.word	0x58024400
 80044fc:	40007800 	.word	0x40007800
 8004500:	40007c00 	.word	0x40007c00
 8004504:	58000c00 	.word	0x58000c00
 8004508:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800450c:	4b9d      	ldr	r3, [pc, #628]	; (8004784 <UART_SetConfig+0x928>)
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004510:	e00c      	b.n	800452c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004512:	4b9d      	ldr	r3, [pc, #628]	; (8004788 <UART_SetConfig+0x92c>)
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004516:	e009      	b.n	800452c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800451e:	e005      	b.n	800452c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800452a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800452c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 81de 	beq.w	80048f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	4a94      	ldr	r2, [pc, #592]	; (800478c <UART_SetConfig+0x930>)
 800453a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800453e:	461a      	mov	r2, r3
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	fbb3 f3f2 	udiv	r3, r3, r2
 8004546:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004554:	429a      	cmp	r2, r3
 8004556:	d305      	bcc.n	8004564 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800455e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800456a:	e1c1      	b.n	80048f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	2200      	movs	r2, #0
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	60fa      	str	r2, [r7, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	4a84      	ldr	r2, [pc, #528]	; (800478c <UART_SetConfig+0x930>)
 800457a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800457e:	b29b      	uxth	r3, r3
 8004580:	2200      	movs	r2, #0
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800458e:	f7fb fea3 	bl	80002d8 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	020b      	lsls	r3, r1, #8
 80045a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045a8:	0202      	lsls	r2, r0, #8
 80045aa:	6979      	ldr	r1, [r7, #20]
 80045ac:	6849      	ldr	r1, [r1, #4]
 80045ae:	0849      	lsrs	r1, r1, #1
 80045b0:	2000      	movs	r0, #0
 80045b2:	460c      	mov	r4, r1
 80045b4:	4605      	mov	r5, r0
 80045b6:	eb12 0804 	adds.w	r8, r2, r4
 80045ba:	eb43 0905 	adc.w	r9, r3, r5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	469a      	mov	sl, r3
 80045c6:	4693      	mov	fp, r2
 80045c8:	4652      	mov	r2, sl
 80045ca:	465b      	mov	r3, fp
 80045cc:	4640      	mov	r0, r8
 80045ce:	4649      	mov	r1, r9
 80045d0:	f7fb fe82 	bl	80002d8 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4613      	mov	r3, r2
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e2:	d308      	bcc.n	80045f6 <UART_SetConfig+0x79a>
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ea:	d204      	bcs.n	80045f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e17c      	b.n	80048f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80045fc:	e178      	b.n	80048f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004606:	f040 80c5 	bne.w	8004794 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800460a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800460e:	2b20      	cmp	r3, #32
 8004610:	dc48      	bgt.n	80046a4 <UART_SetConfig+0x848>
 8004612:	2b00      	cmp	r3, #0
 8004614:	db7b      	blt.n	800470e <UART_SetConfig+0x8b2>
 8004616:	2b20      	cmp	r3, #32
 8004618:	d879      	bhi.n	800470e <UART_SetConfig+0x8b2>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x7c4>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	080046ab 	.word	0x080046ab
 8004624:	080046b3 	.word	0x080046b3
 8004628:	0800470f 	.word	0x0800470f
 800462c:	0800470f 	.word	0x0800470f
 8004630:	080046bb 	.word	0x080046bb
 8004634:	0800470f 	.word	0x0800470f
 8004638:	0800470f 	.word	0x0800470f
 800463c:	0800470f 	.word	0x0800470f
 8004640:	080046cb 	.word	0x080046cb
 8004644:	0800470f 	.word	0x0800470f
 8004648:	0800470f 	.word	0x0800470f
 800464c:	0800470f 	.word	0x0800470f
 8004650:	0800470f 	.word	0x0800470f
 8004654:	0800470f 	.word	0x0800470f
 8004658:	0800470f 	.word	0x0800470f
 800465c:	0800470f 	.word	0x0800470f
 8004660:	080046db 	.word	0x080046db
 8004664:	0800470f 	.word	0x0800470f
 8004668:	0800470f 	.word	0x0800470f
 800466c:	0800470f 	.word	0x0800470f
 8004670:	0800470f 	.word	0x0800470f
 8004674:	0800470f 	.word	0x0800470f
 8004678:	0800470f 	.word	0x0800470f
 800467c:	0800470f 	.word	0x0800470f
 8004680:	0800470f 	.word	0x0800470f
 8004684:	0800470f 	.word	0x0800470f
 8004688:	0800470f 	.word	0x0800470f
 800468c:	0800470f 	.word	0x0800470f
 8004690:	0800470f 	.word	0x0800470f
 8004694:	0800470f 	.word	0x0800470f
 8004698:	0800470f 	.word	0x0800470f
 800469c:	0800470f 	.word	0x0800470f
 80046a0:	08004701 	.word	0x08004701
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d02e      	beq.n	8004706 <UART_SetConfig+0x8aa>
 80046a8:	e031      	b.n	800470e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fd fed1 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 80046ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80046b0:	e033      	b.n	800471a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b2:	f7fd fee3 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 80046b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80046b8:	e02f      	b.n	800471a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fe4e 	bl	8003360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046c8:	e027      	b.n	800471a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046ca:	f107 0318 	add.w	r3, r7, #24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe ff9a 	bl	8003608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046d8:	e01f      	b.n	800471a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046da:	4b2d      	ldr	r3, [pc, #180]	; (8004790 <UART_SetConfig+0x934>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <UART_SetConfig+0x934>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	08db      	lsrs	r3, r3, #3
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <UART_SetConfig+0x928>)
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046f8:	e00f      	b.n	800471a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <UART_SetConfig+0x928>)
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046fe:	e00c      	b.n	800471a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <UART_SetConfig+0x92c>)
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004704:	e009      	b.n	800471a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800470c:	e005      	b.n	800471a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80e7 	beq.w	80048f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	4a19      	ldr	r2, [pc, #100]	; (800478c <UART_SetConfig+0x930>)
 8004728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800472c:	461a      	mov	r2, r3
 800472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004730:	fbb3 f3f2 	udiv	r3, r3, r2
 8004734:	005a      	lsls	r2, r3, #1
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	441a      	add	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d916      	bls.n	800477c <UART_SetConfig+0x920>
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d212      	bcs.n	800477c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	b29b      	uxth	r3, r3
 800475a:	f023 030f 	bic.w	r3, r3, #15
 800475e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	b29b      	uxth	r3, r3
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	b29a      	uxth	r2, r3
 800476c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800476e:	4313      	orrs	r3, r2
 8004770:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	e0b9      	b.n	80048f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004782:	e0b5      	b.n	80048f0 <UART_SetConfig+0xa94>
 8004784:	03d09000 	.word	0x03d09000
 8004788:	003d0900 	.word	0x003d0900
 800478c:	08004f1c 	.word	0x08004f1c
 8004790:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004794:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004798:	2b20      	cmp	r3, #32
 800479a:	dc49      	bgt.n	8004830 <UART_SetConfig+0x9d4>
 800479c:	2b00      	cmp	r3, #0
 800479e:	db7c      	blt.n	800489a <UART_SetConfig+0xa3e>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d87a      	bhi.n	800489a <UART_SetConfig+0xa3e>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0x950>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	08004837 	.word	0x08004837
 80047b0:	0800483f 	.word	0x0800483f
 80047b4:	0800489b 	.word	0x0800489b
 80047b8:	0800489b 	.word	0x0800489b
 80047bc:	08004847 	.word	0x08004847
 80047c0:	0800489b 	.word	0x0800489b
 80047c4:	0800489b 	.word	0x0800489b
 80047c8:	0800489b 	.word	0x0800489b
 80047cc:	08004857 	.word	0x08004857
 80047d0:	0800489b 	.word	0x0800489b
 80047d4:	0800489b 	.word	0x0800489b
 80047d8:	0800489b 	.word	0x0800489b
 80047dc:	0800489b 	.word	0x0800489b
 80047e0:	0800489b 	.word	0x0800489b
 80047e4:	0800489b 	.word	0x0800489b
 80047e8:	0800489b 	.word	0x0800489b
 80047ec:	08004867 	.word	0x08004867
 80047f0:	0800489b 	.word	0x0800489b
 80047f4:	0800489b 	.word	0x0800489b
 80047f8:	0800489b 	.word	0x0800489b
 80047fc:	0800489b 	.word	0x0800489b
 8004800:	0800489b 	.word	0x0800489b
 8004804:	0800489b 	.word	0x0800489b
 8004808:	0800489b 	.word	0x0800489b
 800480c:	0800489b 	.word	0x0800489b
 8004810:	0800489b 	.word	0x0800489b
 8004814:	0800489b 	.word	0x0800489b
 8004818:	0800489b 	.word	0x0800489b
 800481c:	0800489b 	.word	0x0800489b
 8004820:	0800489b 	.word	0x0800489b
 8004824:	0800489b 	.word	0x0800489b
 8004828:	0800489b 	.word	0x0800489b
 800482c:	0800488d 	.word	0x0800488d
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d02e      	beq.n	8004892 <UART_SetConfig+0xa36>
 8004834:	e031      	b.n	800489a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004836:	f7fd fe0b 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 800483a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800483c:	e033      	b.n	80048a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800483e:	f7fd fe1d 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8004842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004844:	e02f      	b.n	80048a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fd88 	bl	8003360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004854:	e027      	b.n	80048a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004856:	f107 0318 	add.w	r3, r7, #24
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe fed4 	bl	8003608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004864:	e01f      	b.n	80048a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004866:	4b2d      	ldr	r3, [pc, #180]	; (800491c <UART_SetConfig+0xac0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <UART_SetConfig+0xac0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	08db      	lsrs	r3, r3, #3
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	4a28      	ldr	r2, [pc, #160]	; (8004920 <UART_SetConfig+0xac4>)
 800487e:	fa22 f303 	lsr.w	r3, r2, r3
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004884:	e00f      	b.n	80048a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <UART_SetConfig+0xac4>)
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800488a:	e00c      	b.n	80048a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <UART_SetConfig+0xac8>)
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004890:	e009      	b.n	80048a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004898:	e005      	b.n	80048a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80048a4:	bf00      	nop
    }

    if (pclk != 0U)
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d021      	beq.n	80048f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <UART_SetConfig+0xacc>)
 80048b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d909      	bls.n	80048ea <UART_SetConfig+0xa8e>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d205      	bcs.n	80048ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e002      	b.n	80048f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2200      	movs	r2, #0
 8004904:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800490c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004910:	4618      	mov	r0, r3
 8004912:	3748      	adds	r7, #72	; 0x48
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
 8004920:	03d09000 	.word	0x03d09000
 8004924:	003d0900 	.word	0x003d0900
 8004928:	08004f1c 	.word	0x08004f1c

0800492c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2a:	d10a      	bne.n	8004a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a80:	f7fc fa0a 	bl	8000e98 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d10e      	bne.n	8004ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f82f 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e025      	b.n	8004afe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d10e      	bne.n	8004ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f819 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e00f      	b.n	8004afe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b09c      	sub	sp, #112	; 0x70
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	e0a9      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1e:	f000 80a5 	beq.w	8004c6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7fc f9b9 	bl	8000e98 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d140      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e6      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	663b      	str	r3, [r7, #96]	; 0x60
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e5      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e069      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d051      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd6:	d149      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e6      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	613b      	str	r3, [r7, #16]
   return(result);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c34:	623a      	str	r2, [r7, #32]
 8004c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69f9      	ldr	r1, [r7, #28]
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e5      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e010      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	f43f af46 	beq.w	8004b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3770      	adds	r7, #112	; 0x70
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_UARTEx_DisableFifoMode+0x16>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e027      	b.n	8004cfc <HAL_UARTEx_DisableFifoMode+0x66>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	; 0x24
 8004cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e02d      	b.n	8004d7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f84f 	bl	8004e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e02d      	b.n	8004df8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f811 	bl	8004e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e20:	e031      	b.n	8004e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e22:	2310      	movs	r3, #16
 8004e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e26:	2310      	movs	r3, #16
 8004e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	0e5b      	lsrs	r3, r3, #25
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	0f5b      	lsrs	r3, r3, #29
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e4a:	7bbb      	ldrb	r3, [r7, #14]
 8004e4c:	7b3a      	ldrb	r2, [r7, #12]
 8004e4e:	4911      	ldr	r1, [pc, #68]	; (8004e94 <UARTEx_SetNbDataToProcess+0x94>)
 8004e50:	5c8a      	ldrb	r2, [r1, r2]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e56:	7b3a      	ldrb	r2, [r7, #12]
 8004e58:	490f      	ldr	r1, [pc, #60]	; (8004e98 <UARTEx_SetNbDataToProcess+0x98>)
 8004e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	7b7a      	ldrb	r2, [r7, #13]
 8004e6c:	4909      	ldr	r1, [pc, #36]	; (8004e94 <UARTEx_SetNbDataToProcess+0x94>)
 8004e6e:	5c8a      	ldrb	r2, [r1, r2]
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e74:	7b7a      	ldrb	r2, [r7, #13]
 8004e76:	4908      	ldr	r1, [pc, #32]	; (8004e98 <UARTEx_SetNbDataToProcess+0x98>)
 8004e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	08004f34 	.word	0x08004f34
 8004e98:	08004f3c 	.word	0x08004f3c

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	; (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	; (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	; (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	; (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 f820 	bl	8004ef4 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08004f4c 	.word	0x08004f4c
 8004ed8:	08004f4c 	.word	0x08004f4c
 8004edc:	08004f4c 	.word	0x08004f4c
 8004ee0:	08004f50 	.word	0x08004f50

08004ee4 <memset>:
 8004ee4:	4402      	add	r2, r0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d100      	bne.n	8004eee <memset+0xa>
 8004eec:	4770      	bx	lr
 8004eee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef2:	e7f9      	b.n	8004ee8 <memset+0x4>

08004ef4 <_init>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr

08004f00 <_fini>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr
