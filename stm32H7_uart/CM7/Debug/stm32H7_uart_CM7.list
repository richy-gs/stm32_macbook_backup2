
stm32H7_uart_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e58  08004e58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08004e70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08004e70  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001018f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dac  00000000  00000000  000301cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038c40  00000000  00000000  000334a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eabf  00000000  00000000  0006c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179ab7  00000000  00000000  0007aba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f465e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c70  00000000  00000000  001f46b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e00 	.word	0x08004e00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004e00 	.word	0x08004e00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <main+0xc4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f98f 	bl	8000a54 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fa67 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f84d 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <main+0xc4>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <main+0xc4>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0xc4>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fd9f 	bl	80012a0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fdb5 	bl	80012d4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <main+0xc4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f961 	bl	8000a54 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f8eb 	bl	800096c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f899 	bl	80008cc <MX_USART3_UART_Init>
//	  HAL_UART_Transmit(&huart3, &tx_buffer, 10, 10);
//	  HAL_Delay(100);

//	  printf("A\n\r");

	  if(HAL_UART_Receive(&huart3, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	2201      	movs	r2, #1
 80007a0:	490b      	ldr	r1, [pc, #44]	; (80007d0 <main+0xc8>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <main+0xcc>)
 80007a4:	f003 fa0c 	bl	8003bc0 <HAL_UART_Receive>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10b      	bne.n	80007c6 <main+0xbe>
	  {
		  const uint8_t c = rx_buff + 1;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <main+0xc8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	71fb      	strb	r3, [r7, #7]
		  HAL_UART_Transmit(&huart3, &c, 1, 10);
 80007b8:	1df9      	adds	r1, r7, #7
 80007ba:	230a      	movs	r3, #10
 80007bc:	2201      	movs	r2, #1
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <main+0xcc>)
 80007c0:	f003 f968 	bl	8003a94 <HAL_UART_Transmit>
 80007c4:	e7e9      	b.n	800079a <main+0x92>
	  } else {
	      __NOP();
 80007c6:	bf00      	nop
	  if(HAL_UART_Receive(&huart3, &rx_buff, 1, 1000)==HAL_OK) //if transfer is successful
 80007c8:	e7e7      	b.n	800079a <main+0x92>
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	240000bc 	.word	0x240000bc
 80007d4:	2400002c 	.word	0x2400002c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fb02 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fafc 	bl	8004df0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f000 fd7f 	bl	80012fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <SystemClock_Config+0xec>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <SystemClock_Config+0xec>)
 8000808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <SystemClock_Config+0xec>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <SystemClock_Config+0xf0>)
 800081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <SystemClock_Config+0xf0>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemClock_Config+0xf0>)
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000830:	bf00      	nop
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <SystemClock_Config+0xec>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800083e:	d1f8      	bne.n	8000832 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	2302      	movs	r3, #2
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000856:	23f0      	movs	r3, #240	; 0xf0
 8000858:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000866:	2308      	movs	r3, #8
 8000868:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800086a:	2300      	movs	r3, #0
 800086c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fd9a 	bl	80013b0 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000882:	f000 f8e7 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	233f      	movs	r3, #63	; 0x3f
 8000888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2303      	movs	r3, #3
 800088c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000892:	2308      	movs	r3, #8
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2104      	movs	r1, #4
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f9ad 	bl	8001c0c <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008b8:	f000 f8cc 	bl	8000a54 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3770      	adds	r7, #112	; 0x70
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	58024800 	.word	0x58024800
 80008c8:	58000400 	.word	0x58000400

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008d2:	4a25      	ldr	r2, [pc, #148]	; (8000968 <MX_USART3_UART_Init+0x9c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80008f4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008f8:	220c      	movs	r2, #12
 80008fa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_USART3_UART_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_USART3_UART_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_USART3_UART_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_USART3_UART_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_USART3_UART_Init+0x98>)
 800091c:	f003 f86a 	bl	80039f4 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000926:	f000 f895 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_USART3_UART_Init+0x98>)
 800092e:	f004 f971 	bl	8004c14 <HAL_UARTEx_SetTxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 f88c 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_USART3_UART_Init+0x98>)
 8000940:	f004 f9a6 	bl	8004c90 <HAL_UARTEx_SetRxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 800094a:	f000 f883 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART3_UART_Init+0x98>)
 8000950:	f004 f927 	bl	8004ba2 <HAL_UARTEx_DisableFifoMode>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 800095a:	f000 f87b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2400002c 	.word	0x2400002c
 8000968:	40004800 	.word	0x40004800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_GPIO_Init+0xdc>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <MX_GPIO_Init+0xdc>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0xdc>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a0:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_GPIO_Init+0xdc>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0xe0>)
 8000a02:	f000 fc33 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0xe4>)
 8000a1c:	f000 fa76 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a20:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0xe0>)
 8000a3a:	f000 fa67 	bl	8000f0c <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	58020800 	.word	0x58020800

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x30>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x30>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x30>)
 8000a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	58024400 	.word	0x58024400

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0b8      	sub	sp, #224	; 0xe0
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	22bc      	movs	r2, #188	; 0xbc
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 f99b 	bl	8004df0 <memset>
  if(huart->Instance==USART3)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <HAL_UART_MspInit+0xc0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d142      	bne.n	8000b4a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fc26 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ffb9 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <HAL_UART_MspInit+0xc4>)
 8000ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_UART_MspInit+0xc4>)
 8000aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0xc4>)
 8000af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0xc4>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <HAL_UART_MspInit+0xc4>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_MspInit+0xc4>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_UART_MspInit+0xc8>)
 8000b46:	f000 f9e1 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	37e0      	adds	r7, #224	; 0xe0
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004800 	.word	0x40004800
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020c00 	.word	0x58020c00

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f89e 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f7ff fd10 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f004 f8e1 	bl	8004da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fd8f 	bl	8000708 <main>
  bx  lr
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bf4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bf8:	08004e60 	.word	0x08004e60
  ldr r2, =_sbss
 8000bfc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c00:	240000c4 	.word	0x240000c4

08000c04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC3_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f000 f94a 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c14:	f001 f9b0 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_Init+0x68>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	4913      	ldr	r1, [pc, #76]	; (8000c74 <HAL_Init+0x6c>)
 8000c26:	5ccb      	ldrb	r3, [r1, r3]
 8000c28:	f003 031f 	and.w	r3, r3, #31
 8000c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_Init+0x68>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_Init+0x6c>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	f003 031f 	and.w	r3, r3, #31
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <HAL_Init+0x70>)
 8000c4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_Init+0x74>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 f814 	bl	8000c80 <HAL_InitTick>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e002      	b.n	8000c68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c62:	f7ff fefd 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	58024400 	.word	0x58024400
 8000c74:	08004e18 	.word	0x08004e18
 8000c78:	24000004 	.word	0x24000004
 8000c7c:	24000000 	.word	0x24000000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e021      	b.n	8000cd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_InitTick+0x64>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_InitTick+0x60>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f921 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc8:	f000 f8f9 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x68>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2400000c 	.word	0x2400000c
 8000ce4:	24000000 	.word	0x24000000
 8000ce8:	24000008 	.word	0x24000008

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2400000c 	.word	0x2400000c
 8000d10:	240000c0 	.word	0x240000c0

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	240000c0 	.word	0x240000c0

08000d2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetREVID+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	0c1b      	lsrs	r3, r3, #16
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	5c001000 	.word	0x5c001000

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	05fa0000 	.word	0x05fa0000

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff5e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff90 	bl	8000dfc <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5f 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffb2 	bl	8000e64 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f1a:	4b89      	ldr	r3, [pc, #548]	; (8001140 <HAL_GPIO_Init+0x234>)
 8000f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f1e:	e194      	b.n	800124a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8186 	beq.w	8001244 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d005      	beq.n	8000f50 <HAL_GPIO_Init+0x44>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d130      	bne.n	8000fb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f86:	2201      	movs	r2, #1
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	f003 0201 	and.w	r2, r3, #1
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d017      	beq.n	8000fee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d123      	bne.n	8001042 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	69b9      	ldr	r1, [r7, #24]
 800103e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0203 	and.w	r2, r3, #3
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80e0 	beq.w	8001244 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001084:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <HAL_GPIO_Init+0x238>)
 8001086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108a:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <HAL_GPIO_Init+0x238>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_GPIO_Init+0x238>)
 8001096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a29      	ldr	r2, [pc, #164]	; (8001148 <HAL_GPIO_Init+0x23c>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a20      	ldr	r2, [pc, #128]	; (800114c <HAL_GPIO_Init+0x240>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d052      	beq.n	8001174 <HAL_GPIO_Init+0x268>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_GPIO_Init+0x244>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d031      	beq.n	800113a <HAL_GPIO_Init+0x22e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_GPIO_Init+0x248>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x22a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <HAL_GPIO_Init+0x24c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x226>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <HAL_GPIO_Init+0x250>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x222>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_GPIO_Init+0x254>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x258>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x21a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_GPIO_Init+0x25c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x216>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_GPIO_Init+0x260>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x212>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_GPIO_Init+0x264>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20e>
 8001116:	2309      	movs	r3, #9
 8001118:	e02d      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 800111a:	230a      	movs	r3, #10
 800111c:	e02b      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 800111e:	2308      	movs	r3, #8
 8001120:	e029      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 8001122:	2307      	movs	r3, #7
 8001124:	e027      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 8001126:	2306      	movs	r3, #6
 8001128:	e025      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 800112a:	2305      	movs	r3, #5
 800112c:	e023      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 800112e:	2304      	movs	r3, #4
 8001130:	e021      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 8001132:	2303      	movs	r3, #3
 8001134:	e01f      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 8001136:	2302      	movs	r3, #2
 8001138:	e01d      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 800113a:	2301      	movs	r3, #1
 800113c:	e01b      	b.n	8001176 <HAL_GPIO_Init+0x26a>
 800113e:	bf00      	nop
 8001140:	58000080 	.word	0x58000080
 8001144:	58024400 	.word	0x58024400
 8001148:	58000400 	.word	0x58000400
 800114c:	58020000 	.word	0x58020000
 8001150:	58020400 	.word	0x58020400
 8001154:	58020800 	.word	0x58020800
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58021000 	.word	0x58021000
 8001160:	58021400 	.word	0x58021400
 8001164:	58021800 	.word	0x58021800
 8001168:	58021c00 	.word	0x58021c00
 800116c:	58022000 	.word	0x58022000
 8001170:	58022400 	.word	0x58022400
 8001174:	2300      	movs	r3, #0
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <HAL_GPIO_Init+0x35c>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f ae63 	bne.w	8000f20 <HAL_GPIO_Init+0x14>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	58000400 	.word	0x58000400

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_HSEM_FastTake+0x2c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3320      	adds	r3, #32
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_HSEM_FastTake+0x30>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d101      	bne.n	80012bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e000      	b.n	80012be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	58026400 	.word	0x58026400
 80012d0:	80000300 	.word	0x80000300

080012d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012de:	4906      	ldr	r1, [pc, #24]	; (80012f8 <HAL_HSEM_Release+0x24>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	58026400 	.word	0x58026400

080012fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	2b06      	cmp	r3, #6
 800130e:	d00a      	beq.n	8001326 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	d001      	beq.n	8001322 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e040      	b.n	80013a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e03e      	b.n	80013a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800132e:	491f      	ldr	r1, [pc, #124]	; (80013ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4313      	orrs	r3, r2
 8001334:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001336:	f7ff fced 	bl	8000d14 <HAL_GetTick>
 800133a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800133c:	e009      	b.n	8001352 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800133e:	f7ff fce9 	bl	8000d14 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800134c:	d901      	bls.n	8001352 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e028      	b.n	80013a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800135e:	d1ee      	bne.n	800133e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b1e      	cmp	r3, #30
 8001364:	d008      	beq.n	8001378 <HAL_PWREx_ConfigSupply+0x7c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b2e      	cmp	r3, #46	; 0x2e
 800136a:	d005      	beq.n	8001378 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b1d      	cmp	r3, #29
 8001370:	d002      	beq.n	8001378 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b2d      	cmp	r3, #45	; 0x2d
 8001376:	d114      	bne.n	80013a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001378:	f7ff fccc 	bl	8000d14 <HAL_GetTick>
 800137c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800137e:	e009      	b.n	8001394 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001380:	f7ff fcc8 	bl	8000d14 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800138e:	d901      	bls.n	8001394 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e007      	b.n	80013a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d1ee      	bne.n	8001380 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024800 	.word	0x58024800

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f000 bc1d 	b.w	8001bfe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8087 	beq.w	80014e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d2:	4b99      	ldr	r3, [pc, #612]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013dc:	4b96      	ldr	r3, [pc, #600]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e4:	2b10      	cmp	r3, #16
 80013e6:	d007      	beq.n	80013f8 <HAL_RCC_OscConfig+0x48>
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	2b18      	cmp	r3, #24
 80013ec:	d110      	bne.n	8001410 <HAL_RCC_OscConfig+0x60>
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b8f      	ldr	r3, [pc, #572]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d06c      	beq.n	80014de <HAL_RCC_OscConfig+0x12e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d168      	bne.n	80014de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e3f6      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x78>
 800141a:	4b87      	ldr	r3, [pc, #540]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a86      	ldr	r2, [pc, #536]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e02e      	b.n	8001486 <HAL_RCC_OscConfig+0xd6>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <HAL_RCC_OscConfig+0x9a>
 8001430:	4b81      	ldr	r3, [pc, #516]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a80      	ldr	r2, [pc, #512]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a7d      	ldr	r2, [pc, #500]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e01d      	b.n	8001486 <HAL_RCC_OscConfig+0xd6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0xbe>
 8001454:	4b78      	ldr	r3, [pc, #480]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a77      	ldr	r2, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800145a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b75      	ldr	r3, [pc, #468]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a74      	ldr	r2, [pc, #464]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0xd6>
 800146e:	4b72      	ldr	r3, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a71      	ldr	r2, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fc41 	bl	8000d14 <HAL_GetTick>
 8001492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001496:	f7ff fc3d 	bl	8000d14 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	; 0x64
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e3aa      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014a8:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0xe6>
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc2d 	bl	8000d14 <HAL_GetTick>
 80014ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014be:	f7ff fc29 	bl	8000d14 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e396      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x10e>
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80cb 	beq.w	8001684 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f8:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_RCC_OscConfig+0x164>
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	2b18      	cmp	r3, #24
 8001508:	d156      	bne.n	80015b8 <HAL_RCC_OscConfig+0x208>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d151      	bne.n	80015b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x17c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e368      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 0219 	bic.w	r2, r3, #25
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	493f      	ldr	r1, [pc, #252]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800153e:	f7ff fbe9 	bl	8000d14 <HAL_GetTick>
 8001542:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fbe5 	bl	8000d14 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e352      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001558:	4b37      	ldr	r3, [pc, #220]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	f7ff fbe2 	bl	8000d2c <HAL_GetREVID>
 8001568:	4603      	mov	r3, r0
 800156a:	f241 0203 	movw	r2, #4099	; 0x1003
 800156e:	4293      	cmp	r3, r2
 8001570:	d817      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x1f2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d108      	bne.n	800158c <HAL_RCC_OscConfig+0x1dc>
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001582:	4a2d      	ldr	r2, [pc, #180]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158a:	e07b      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	031b      	lsls	r3, r3, #12
 800159a:	4927      	ldr	r1, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	e070      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	061b      	lsls	r3, r3, #24
 80015b0:	4921      	ldr	r1, [pc, #132]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b6:	e065      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d048      	beq.n	8001652 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 0219 	bic.w	r2, r3, #25
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	491a      	ldr	r1, [pc, #104]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb9f 	bl	8000d14 <HAL_GetTick>
 80015d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fb9b 	bl	8000d14 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e308      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	f7ff fb98 	bl	8000d2c <HAL_GetREVID>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001602:	4293      	cmp	r3, r2
 8001604:	d81a      	bhi.n	800163c <HAL_RCC_OscConfig+0x28c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b40      	cmp	r3, #64	; 0x40
 800160c:	d108      	bne.n	8001620 <HAL_RCC_OscConfig+0x270>
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6053      	str	r3, [r2, #4]
 800161e:	e031      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	031b      	lsls	r3, r3, #12
 800162e:	4902      	ldr	r1, [pc, #8]	; (8001638 <HAL_RCC_OscConfig+0x288>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e026      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
 8001636:	bf00      	nop
 8001638:	58024400 	.word	0x58024400
 800163c:	4b9a      	ldr	r3, [pc, #616]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	4997      	ldr	r1, [pc, #604]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e018      	b.n	8001684 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b95      	ldr	r3, [pc, #596]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a94      	ldr	r2, [pc, #592]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff fb59 	bl	8000d14 <HAL_GetTick>
 8001662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001666:	f7ff fb55 	bl	8000d14 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e2c2      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001678:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a9 	beq.w	80017e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001692:	4b85      	ldr	r3, [pc, #532]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800169a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800169c:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d007      	beq.n	80016b8 <HAL_RCC_OscConfig+0x308>
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b18      	cmp	r3, #24
 80016ac:	d13a      	bne.n	8001724 <HAL_RCC_OscConfig+0x374>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d135      	bne.n	8001724 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x320>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b80      	cmp	r3, #128	; 0x80
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e296      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d0:	f7ff fb2c 	bl	8000d2c <HAL_GetREVID>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80016da:	4293      	cmp	r3, r2
 80016dc:	d817      	bhi.n	800170e <HAL_RCC_OscConfig+0x35e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d108      	bne.n	80016f8 <HAL_RCC_OscConfig+0x348>
 80016e6:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80016f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016f6:	e075      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016f8:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	069b      	lsls	r3, r3, #26
 8001706:	4968      	ldr	r1, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800170c:	e06a      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	061b      	lsls	r3, r3, #24
 800171c:	4962      	ldr	r1, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800171e:	4313      	orrs	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001722:	e05f      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d042      	beq.n	80017b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff faec 	bl	8000d14 <HAL_GetTick>
 800173c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001740:	f7ff fae8 	bl	8000d14 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e255      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001752:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800175e:	f7ff fae5 	bl	8000d2c <HAL_GetREVID>
 8001762:	4603      	mov	r3, r0
 8001764:	f241 0203 	movw	r2, #4099	; 0x1003
 8001768:	4293      	cmp	r3, r2
 800176a:	d817      	bhi.n	800179c <HAL_RCC_OscConfig+0x3ec>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	2b20      	cmp	r3, #32
 8001772:	d108      	bne.n	8001786 <HAL_RCC_OscConfig+0x3d6>
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800177c:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800177e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001782:	6053      	str	r3, [r2, #4]
 8001784:	e02e      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
 8001786:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	069b      	lsls	r3, r3, #26
 8001794:	4944      	ldr	r1, [pc, #272]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
 800179a:	e023      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	493f      	ldr	r1, [pc, #252]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60cb      	str	r3, [r1, #12]
 80017b0:	e018      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80017b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff faa9 	bl	8000d14 <HAL_GetTick>
 80017c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017c6:	f7ff faa5 	bl	8000d14 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e212      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d036      	beq.n	800185e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fa86 	bl	8000d14 <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fa82 	bl	8000d14 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1ef      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x45c>
 800182a:	e018      	b.n	800185e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fa6c 	bl	8000d14 <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fa68 	bl	8000d14 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1d5      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b00      	cmp	r3, #0
 8001868:	d039      	beq.n	80018de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01c      	beq.n	80018ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800187c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800187e:	f7ff fa49 	bl	8000d14 <HAL_GetTick>
 8001882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001886:	f7ff fa45 	bl	8000d14 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1b2      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x4d6>
 80018a4:	e01b      	b.n	80018de <HAL_RCC_OscConfig+0x52e>
 80018a6:	bf00      	nop
 80018a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ac:	4b9b      	ldr	r3, [pc, #620]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a9a      	ldr	r2, [pc, #616]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 80018b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa2c 	bl	8000d14 <HAL_GetTick>
 80018bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018c0:	f7ff fa28 	bl	8000d14 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e195      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018d2:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8081 	beq.w	80019ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x770>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a8b      	ldr	r2, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x770>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa0c 	bl	8000d14 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff fa08 	bl	8000d14 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e175      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_RCC_OscConfig+0x770>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x584>
 8001926:	4b7d      	ldr	r3, [pc, #500]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a7c      	ldr	r2, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e02d      	b.n	8001990 <HAL_RCC_OscConfig+0x5e0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10c      	bne.n	8001956 <HAL_RCC_OscConfig+0x5a6>
 800193c:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a76      	ldr	r2, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	4b74      	ldr	r3, [pc, #464]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a73      	ldr	r2, [pc, #460]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e01c      	b.n	8001990 <HAL_RCC_OscConfig+0x5e0>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x5c8>
 800195e:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a6e      	ldr	r2, [pc, #440]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a6b      	ldr	r2, [pc, #428]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x5e0>
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a64      	ldr	r2, [pc, #400]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 800198a:	f023 0304 	bic.w	r3, r3, #4
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d015      	beq.n	80019c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f9bc 	bl	8000d14 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f9b8 	bl	8000d14 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e123      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0ee      	beq.n	80019a0 <HAL_RCC_OscConfig+0x5f0>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9a6 	bl	8000d14 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f9a2 	bl	8000d14 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e10d      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ee      	bne.n	80019cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8102 	beq.w	8001bfc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019f8:	4b48      	ldr	r3, [pc, #288]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a00:	2b18      	cmp	r3, #24
 8001a02:	f000 80bd 	beq.w	8001b80 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	f040 809e 	bne.w	8001b4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f97a 	bl	8000d14 <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f976 	bl	8000d14 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0e3      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x774>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	430a      	orrs	r2, r1
 8001a56:	4931      	ldr	r1, [pc, #196]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	628b      	str	r3, [r1, #40]	; 0x28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	3b01      	subs	r3, #1
 8001a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	025b      	lsls	r3, r3, #9
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	3b01      	subs	r3, #1
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	3b01      	subs	r3, #1
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a8c:	4923      	ldr	r1, [pc, #140]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_RCC_OscConfig+0x778>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	491b      	ldr	r1, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f023 020c 	bic.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4917      	ldr	r1, [pc, #92]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f023 0202 	bic.w	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	4912      	ldr	r1, [pc, #72]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_RCC_OscConfig+0x76c>)
 8001b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f8ff 	bl	8000d14 <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b18:	e011      	b.n	8001b3e <HAL_RCC_OscConfig+0x78e>
 8001b1a:	bf00      	nop
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	58024800 	.word	0x58024800
 8001b24:	fffffc0c 	.word	0xfffffc0c
 8001b28:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f8f2 	bl	8000d14 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e05f      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3e:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <HAL_RCC_OscConfig+0x858>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x77c>
 8001b4a:	e057      	b.n	8001bfc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_OscConfig+0x858>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x858>)
 8001b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f8dc 	bl	8000d14 <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f8d8 	bl	8000d14 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e045      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_RCC_OscConfig+0x858>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x7b0>
 8001b7e:	e03d      	b.n	8001bfc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x858>)
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_RCC_OscConfig+0x858>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d031      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f003 0203 	and.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d12a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d122      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0a5b      	lsrs	r3, r3, #9
 8001bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d111      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d108      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0e1b      	lsrs	r3, r3, #24
 8001bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3730      	adds	r7, #48	; 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	58024400 	.word	0x58024400

08001c0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e19c      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 020f 	bic.w	r2, r3, #15
 8001c36:	4985      	ldr	r1, [pc, #532]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e184      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d908      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	4975      	ldr	r1, [pc, #468]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d908      	bls.n	8001cac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	496a      	ldr	r1, [pc, #424]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d908      	bls.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	495e      	ldr	r1, [pc, #376]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cf6:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4953      	ldr	r1, [pc, #332]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d908      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f023 020f 	bic.w	r2, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4947      	ldr	r1, [pc, #284]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d055      	beq.n	8001dee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d42:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4940      	ldr	r1, [pc, #256]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d121      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0f6      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d115      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0ea      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0de      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0d6      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f023 0207 	bic.w	r2, r3, #7
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4925      	ldr	r1, [pc, #148]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7fe ffa9 	bl	8000d14 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7fe ffa5 	bl	8000d14 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0be      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d1eb      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d010      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d208      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	490e      	ldr	r1, [pc, #56]	; (8001e50 <HAL_RCC_ClockConfig+0x244>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d214      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 020f 	bic.w	r2, r3, #15
 8001e32:	4906      	ldr	r1, [pc, #24]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_RCC_ClockConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e086      	b.n	8001f5a <HAL_RCC_ClockConfig+0x34e>
 8001e4c:	52002000 	.word	0x52002000
 8001e50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d010      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d208      	bcs.n	8001e82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d208      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	492e      	ldr	r1, [pc, #184]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d208      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d208      	bcs.n	8001f0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4917      	ldr	r1, [pc, #92]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f0c:	f000 f834 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <HAL_RCC_ClockConfig+0x35c>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x358>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_RCC_ClockConfig+0x35c>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x360>)
 8001f42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x364>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_ClockConfig+0x368>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fe96 	bl	8000c80 <HAL_InitTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	58024400 	.word	0x58024400
 8001f68:	08004e18 	.word	0x08004e18
 8001f6c:	24000004 	.word	0x24000004
 8001f70:	24000000 	.word	0x24000000
 8001f74:	24000008 	.word	0x24000008

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f7e:	4bb3      	ldr	r3, [pc, #716]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f86:	2b18      	cmp	r3, #24
 8001f88:	f200 8155 	bhi.w	8002236 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001ff9 	.word	0x08001ff9
 8001f98:	08002237 	.word	0x08002237
 8001f9c:	08002237 	.word	0x08002237
 8001fa0:	08002237 	.word	0x08002237
 8001fa4:	08002237 	.word	0x08002237
 8001fa8:	08002237 	.word	0x08002237
 8001fac:	08002237 	.word	0x08002237
 8001fb0:	08002237 	.word	0x08002237
 8001fb4:	0800201f 	.word	0x0800201f
 8001fb8:	08002237 	.word	0x08002237
 8001fbc:	08002237 	.word	0x08002237
 8001fc0:	08002237 	.word	0x08002237
 8001fc4:	08002237 	.word	0x08002237
 8001fc8:	08002237 	.word	0x08002237
 8001fcc:	08002237 	.word	0x08002237
 8001fd0:	08002237 	.word	0x08002237
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	08002237 	.word	0x08002237
 8001fdc:	08002237 	.word	0x08002237
 8001fe0:	08002237 	.word	0x08002237
 8001fe4:	08002237 	.word	0x08002237
 8001fe8:	08002237 	.word	0x08002237
 8001fec:	08002237 	.word	0x08002237
 8001ff0:	08002237 	.word	0x08002237
 8001ff4:	0800202b 	.word	0x0800202b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ff8:	4b94      	ldr	r3, [pc, #592]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002004:	4b91      	ldr	r3, [pc, #580]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	4a90      	ldr	r2, [pc, #576]	; (8002250 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002016:	e111      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002018:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800201a:	61bb      	str	r3, [r7, #24]
    break;
 800201c:	e10e      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800201e:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002020:	61bb      	str	r3, [r7, #24]
    break;
 8002022:	e10b      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002024:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002026:	61bb      	str	r3, [r7, #24]
    break;
 8002028:	e108      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002034:	4b85      	ldr	r3, [pc, #532]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002040:	4b82      	ldr	r3, [pc, #520]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800204a:	4b80      	ldr	r3, [pc, #512]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80e1 	beq.w	8002230 <HAL_RCC_GetSysClockFreq+0x2b8>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b02      	cmp	r3, #2
 8002072:	f000 8083 	beq.w	800217c <HAL_RCC_GetSysClockFreq+0x204>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b02      	cmp	r3, #2
 800207a:	f200 80a1 	bhi.w	80021c0 <HAL_RCC_GetSysClockFreq+0x248>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x114>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d056      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x1c0>
 800208a:	e099      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800208c:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02d      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002098:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	ee07 3a90 	vmov	s15, r3
 80020b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020c2:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800225c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020f2:	e087      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002260 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002116:	ed97 6a02 	vldr	s12, [r7, #8]
 800211a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800225c <HAL_RCC_GetSysClockFreq+0x2e4>
 800211e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800212a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002136:	e065      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002142:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002264 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800214a:	4b40      	ldr	r3, [pc, #256]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800215a:	ed97 6a02 	vldr	s12, [r7, #8]
 800215e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800225c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800216a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800216e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800217a:	e043      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002186:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002268 <HAL_RCC_GetSysClockFreq+0x2f0>
 800218a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219e:	ed97 6a02 	vldr	s12, [r7, #8]
 80021a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800225c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021be:	e021      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002264 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800225c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002202:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	0a5b      	lsrs	r3, r3, #9
 800220a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800220e:	3301      	adds	r3, #1
 8002210:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800221c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002228:	ee17 3a90 	vmov	r3, s15
 800222c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800222e:	e005      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
    break;
 8002234:	e002      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002238:	61bb      	str	r3, [r7, #24]
    break;
 800223a:	bf00      	nop
  }

  return sysclockfreq;
 800223c:	69bb      	ldr	r3, [r7, #24]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	58024400 	.word	0x58024400
 8002250:	03d09000 	.word	0x03d09000
 8002254:	003d0900 	.word	0x003d0900
 8002258:	007a1200 	.word	0x007a1200
 800225c:	46000000 	.word	0x46000000
 8002260:	4c742400 	.word	0x4c742400
 8002264:	4a742400 	.word	0x4a742400
 8002268:	4af42400 	.word	0x4af42400

0800226c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002272:	f7ff fe81 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_GetHCLKFreq+0x50>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490f      	ldr	r1, [pc, #60]	; (80022c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCC_GetHCLKFreq+0x50>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80022a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58024400 	.word	0x58024400
 80022c0:	08004e18 	.word	0x08004e18
 80022c4:	24000004 	.word	0x24000004
 80022c8:	24000000 	.word	0x24000000

080022cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022d0:	f7ff ffcc 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4904      	ldr	r1, [pc, #16]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	58024400 	.word	0x58024400
 80022f4:	08004e18 	.word	0x08004e18

080022f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022fc:	f7ff ffb6 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4904      	ldr	r1, [pc, #16]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	58024400 	.word	0x58024400
 8002320:	08004e18 	.word	0x08004e18

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002330:	2300      	movs	r3, #0
 8002332:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03f      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002344:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002348:	d02a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800234a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800234e:	d824      	bhi.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002354:	d018      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235a:	d81e      	bhi.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002364:	d007      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002366:	e018      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002368:	4ba3      	ldr	r3, [pc, #652]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	4aa2      	ldr	r2, [pc, #648]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800236e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002374:	e015      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2102      	movs	r1, #2
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f9d5 	bl	800372c <RCCEx_PLL2_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002386:	e00c      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3324      	adds	r3, #36	; 0x24
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fa7e 	bl	8003890 <RCCEx_PLL3_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002398:	e003      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
      break;
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023a8:	4b93      	ldr	r3, [pc, #588]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b4:	4990      	ldr	r1, [pc, #576]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	650b      	str	r3, [r1, #80]	; 0x50
 80023ba:	e001      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d03d      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d826      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023d4:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80023d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023da:	bf00      	nop
 80023dc:	080023f1 	.word	0x080023f1
 80023e0:	080023ff 	.word	0x080023ff
 80023e4:	08002411 	.word	0x08002411
 80023e8:	08002429 	.word	0x08002429
 80023ec:	08002429 	.word	0x08002429
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f0:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	4a80      	ldr	r2, [pc, #512]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023fc:	e015      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f001 f991 	bl	800372c <RCCEx_PLL2_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3324      	adds	r3, #36	; 0x24
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fa3a 	bl	8003890 <RCCEx_PLL3_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002430:	4b71      	ldr	r3, [pc, #452]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	496e      	ldr	r1, [pc, #440]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	650b      	str	r3, [r1, #80]	; 0x50
 8002442:	e001      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d042      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d02b      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800245e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002462:	d825      	bhi.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002464:	2bc0      	cmp	r3, #192	; 0xc0
 8002466:	d028      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002468:	2bc0      	cmp	r3, #192	; 0xc0
 800246a:	d821      	bhi.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	d016      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d81d      	bhi.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d007      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800247c:	e018      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800248a:	e017      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f001 f94a 	bl	800372c <RCCEx_PLL2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800249c:	e00e      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3324      	adds	r3, #36	; 0x24
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f9f3 	bl	8003890 <RCCEx_PLL3_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024ae:	e005      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
      break;
 80024b4:	e002      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024c2:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	494a      	ldr	r1, [pc, #296]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	650b      	str	r3, [r1, #80]	; 0x50
 80024d4:	e001      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d049      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f0:	d030      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80024f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f6:	d82a      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024fc:	d02c      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80024fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002502:	d824      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002508:	d018      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800250a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250e:	d81e      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002518:	d007      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800251a:	e018      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002528:	e017      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f001 f8fb 	bl	800372c <RCCEx_PLL2_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800253a:	e00e      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f9a4 	bl	8003890 <RCCEx_PLL3_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800254c:	e005      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800256e:	4922      	ldr	r1, [pc, #136]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	658b      	str	r3, [r1, #88]	; 0x58
 8002574:	e001      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04b      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800258c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002590:	d030      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002596:	d82a      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800259c:	d02e      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800259e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025a2:	d824      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a8:	d018      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80025aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ae:	d81e      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d007      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80025ba:	e018      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025c8:	e019      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f8ab 	bl	800372c <RCCEx_PLL2_Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025da:	e010      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3324      	adds	r3, #36	; 0x24
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 f954 	bl	8003890 <RCCEx_PLL3_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025ec:	e007      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
      break;
 80025f2:	e004      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80025f4:	bf00      	nop
 80025f6:	e002      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80025f8:	58024400 	.word	0x58024400
      break;
 80025fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002604:	4b99      	ldr	r3, [pc, #612]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002612:	4996      	ldr	r1, [pc, #600]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002614:	4313      	orrs	r3, r2
 8002616:	658b      	str	r3, [r1, #88]	; 0x58
 8002618:	e001      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d032      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	2b30      	cmp	r3, #48	; 0x30
 8002630:	d01c      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002632:	2b30      	cmp	r3, #48	; 0x30
 8002634:	d817      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002636:	2b20      	cmp	r3, #32
 8002638:	d00c      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800263a:	2b20      	cmp	r3, #32
 800263c:	d813      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002642:	2b10      	cmp	r3, #16
 8002644:	d10f      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002646:	4b89      	ldr	r3, [pc, #548]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	4a88      	ldr	r2, [pc, #544]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002652:	e00e      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f866 	bl	800372c <RCCEx_PLL2_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002664:	e005      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800266c:	bf00      	nop
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002678:	4b7c      	ldr	r3, [pc, #496]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	4979      	ldr	r1, [pc, #484]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002686:	4313      	orrs	r3, r2
 8002688:	64cb      	str	r3, [r1, #76]	; 0x4c
 800268a:	e001      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d047      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a4:	d030      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026aa:	d82a      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026b0:	d02c      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026b6:	d824      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026bc:	d018      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80026be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c2:	d81e      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026cc:	d007      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80026ce:	e018      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026dc:	e017      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 f821 	bl	800372c <RCCEx_PLL2_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026ee:	e00e      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3324      	adds	r3, #36	; 0x24
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 f8ca 	bl	8003890 <RCCEx_PLL3_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002700:	e005      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002708:	bf00      	nop
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	4952      	ldr	r1, [pc, #328]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002722:	4313      	orrs	r3, r2
 8002724:	650b      	str	r3, [r1, #80]	; 0x50
 8002726:	e001      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d049      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d02e      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002746:	d828      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002748:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800274c:	d02a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800274e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002752:	d822      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002758:	d026      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800275a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800275e:	d81c      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002764:	d010      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800276a:	d816      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01d      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d111      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	2101      	movs	r1, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f000 ffd5 	bl	800372c <RCCEx_PLL2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002786:	e012      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3324      	adds	r3, #36	; 0x24
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f87e 	bl	8003890 <RCCEx_PLL3_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002798:	e009      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
      break;
 800279e:	e006      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027a0:	bf00      	nop
 80027a2:	e004      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027a4:	bf00      	nop
 80027a6:	e002      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	492a      	ldr	r1, [pc, #168]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	650b      	str	r3, [r1, #80]	; 0x50
 80027c6:	e001      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d04d      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e2:	d02e      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e8:	d828      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ee:	d02a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d822      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80027f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027fa:	d026      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80027fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002800:	d81c      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002806:	d010      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d816      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01d      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002816:	d111      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff84 	bl	800372c <RCCEx_PLL2_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002828:	e012      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3324      	adds	r3, #36	; 0x24
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f82d 	bl	8003890 <RCCEx_PLL3_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800283a:	e009      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	75fb      	strb	r3, [r7, #23]
      break;
 8002840:	e006      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002842:	bf00      	nop
 8002844:	e004      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800284e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002864:	4901      	ldr	r1, [pc, #4]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002866:	4313      	orrs	r3, r2
 8002868:	658b      	str	r3, [r1, #88]	; 0x58
 800286a:	e003      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800286c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02f      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002888:	d00e      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800288a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800288e:	d814      	bhi.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002898:	d10f      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4baf      	ldr	r3, [pc, #700]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	4aae      	ldr	r2, [pc, #696]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028a6:	e00c      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2101      	movs	r1, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 ff3c 	bl	800372c <RCCEx_PLL2_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028b8:	e003      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
      break;
 80028be:	e000      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80028c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028c8:	4ba3      	ldr	r3, [pc, #652]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d4:	49a0      	ldr	r1, [pc, #640]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	650b      	str	r3, [r1, #80]	; 0x50
 80028da:	e001      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d032      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d81b      	bhi.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	08002933 	.word	0x08002933
 8002900:	0800290d 	.word	0x0800290d
 8002904:	0800291b 	.word	0x0800291b
 8002908:	08002933 	.word	0x08002933
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290c:	4b92      	ldr	r3, [pc, #584]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4a91      	ldr	r2, [pc, #580]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002918:	e00c      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	2102      	movs	r1, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f000 ff03 	bl	800372c <RCCEx_PLL2_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800292a:	e003      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	75fb      	strb	r3, [r7, #23]
      break;
 8002930:	e000      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800293a:	4b87      	ldr	r3, [pc, #540]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4984      	ldr	r1, [pc, #528]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002948:	4313      	orrs	r3, r2
 800294a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800294c:	e001      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8086 	beq.w	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b7e      	ldr	r3, [pc, #504]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a7d      	ldr	r2, [pc, #500]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800296c:	f7fe f9d2 	bl	8000d14 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002972:	e009      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe f9ce 	bl	8000d14 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d902      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	75fb      	strb	r3, [r7, #23]
        break;
 8002986:	e005      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002988:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d166      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800299a:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800299c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029a4:	4053      	eors	r3, r2
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d013      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ae:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b8:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a66      	ldr	r2, [pc, #408]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c4:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029d0:	4a61      	ldr	r2, [pc, #388]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e0:	d115      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe f997 	bl	8000d14 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e8:	e00b      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe f993 	bl	8000d14 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d902      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	75fb      	strb	r3, [r7, #23]
            break;
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a02:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ed      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d126      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002a24:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a32:	0919      	lsrs	r1, r3, #4
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002a36:	400b      	ands	r3, r1
 8002a38:	4947      	ldr	r1, [pc, #284]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	610b      	str	r3, [r1, #16]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002a40:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4a44      	ldr	r2, [pc, #272]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a4a:	6113      	str	r3, [r2, #16]
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	493f      	ldr	r1, [pc, #252]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	670b      	str	r3, [r1, #112]	; 0x70
 8002a60:	e004      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	75bb      	strb	r3, [r7, #22]
 8002a66:	e001      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8085 	beq.w	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7e:	2b28      	cmp	r3, #40	; 0x28
 8002a80:	d866      	bhi.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002a82:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002b65 	.word	0x08002b65
 8002a8c:	08002b51 	.word	0x08002b51
 8002a90:	08002b51 	.word	0x08002b51
 8002a94:	08002b51 	.word	0x08002b51
 8002a98:	08002b51 	.word	0x08002b51
 8002a9c:	08002b51 	.word	0x08002b51
 8002aa0:	08002b51 	.word	0x08002b51
 8002aa4:	08002b51 	.word	0x08002b51
 8002aa8:	08002b2d 	.word	0x08002b2d
 8002aac:	08002b51 	.word	0x08002b51
 8002ab0:	08002b51 	.word	0x08002b51
 8002ab4:	08002b51 	.word	0x08002b51
 8002ab8:	08002b51 	.word	0x08002b51
 8002abc:	08002b51 	.word	0x08002b51
 8002ac0:	08002b51 	.word	0x08002b51
 8002ac4:	08002b51 	.word	0x08002b51
 8002ac8:	08002b3f 	.word	0x08002b3f
 8002acc:	08002b51 	.word	0x08002b51
 8002ad0:	08002b51 	.word	0x08002b51
 8002ad4:	08002b51 	.word	0x08002b51
 8002ad8:	08002b51 	.word	0x08002b51
 8002adc:	08002b51 	.word	0x08002b51
 8002ae0:	08002b51 	.word	0x08002b51
 8002ae4:	08002b51 	.word	0x08002b51
 8002ae8:	08002b65 	.word	0x08002b65
 8002aec:	08002b51 	.word	0x08002b51
 8002af0:	08002b51 	.word	0x08002b51
 8002af4:	08002b51 	.word	0x08002b51
 8002af8:	08002b51 	.word	0x08002b51
 8002afc:	08002b51 	.word	0x08002b51
 8002b00:	08002b51 	.word	0x08002b51
 8002b04:	08002b51 	.word	0x08002b51
 8002b08:	08002b65 	.word	0x08002b65
 8002b0c:	08002b51 	.word	0x08002b51
 8002b10:	08002b51 	.word	0x08002b51
 8002b14:	08002b51 	.word	0x08002b51
 8002b18:	08002b51 	.word	0x08002b51
 8002b1c:	08002b51 	.word	0x08002b51
 8002b20:	08002b51 	.word	0x08002b51
 8002b24:	08002b51 	.word	0x08002b51
 8002b28:	08002b65 	.word	0x08002b65
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	2101      	movs	r1, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fdfa 	bl	800372c <RCCEx_PLL2_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b3c:	e013      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3324      	adds	r3, #36	; 0x24
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fea3 	bl	8003890 <RCCEx_PLL3_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	75fb      	strb	r3, [r7, #23]
      break;
 8002b54:	e007      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	58024800 	.word	0x58024800
 8002b60:	00ffffcf 	.word	0x00ffffcf
      break;
 8002b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b6c:	4b96      	ldr	r3, [pc, #600]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b78:	4993      	ldr	r1, [pc, #588]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	654b      	str	r3, [r1, #84]	; 0x54
 8002b7e:	e001      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d038      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d821      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002b98:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002be3 	.word	0x08002be3
 8002ba4:	08002bb9 	.word	0x08002bb9
 8002ba8:	08002bcb 	.word	0x08002bcb
 8002bac:	08002be3 	.word	0x08002be3
 8002bb0:	08002be3 	.word	0x08002be3
 8002bb4:	08002be3 	.word	0x08002be3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fdb4 	bl	800372c <RCCEx_PLL2_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bc8:	e00c      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3324      	adds	r3, #36	; 0x24
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fe5d 	bl	8003890 <RCCEx_PLL3_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bda:	e003      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
      break;
 8002be0:	e000      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bea:	4b77      	ldr	r3, [pc, #476]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf6:	4974      	ldr	r1, [pc, #464]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	654b      	str	r3, [r1, #84]	; 0x54
 8002bfc:	e001      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d03a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d821      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c63 	.word	0x08002c63
 8002c24:	08002c39 	.word	0x08002c39
 8002c28:	08002c4b 	.word	0x08002c4b
 8002c2c:	08002c63 	.word	0x08002c63
 8002c30:	08002c63 	.word	0x08002c63
 8002c34:	08002c63 	.word	0x08002c63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd74 	bl	800372c <RCCEx_PLL2_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c48:	e00c      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3324      	adds	r3, #36	; 0x24
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fe1d 	bl	8003890 <RCCEx_PLL3_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e003      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	4953      	ldr	r1, [pc, #332]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8002c7e:	e001      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d04b      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c9a:	d02e      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca0:	d828      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d02a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cac:	d822      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cb2:	d026      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cb8:	d81c      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc4:	d816      	bhi.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01d      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fd28 	bl	800372c <RCCEx_PLL2_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ce0:	e012      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3324      	adds	r3, #36	; 0x24
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fdd1 	bl	8003890 <RCCEx_PLL3_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cf2:	e009      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf8:	e006      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e004      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e002      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1c:	492a      	ldr	r1, [pc, #168]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	654b      	str	r3, [r1, #84]	; 0x54
 8002d22:	e001      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d04d      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d3e:	d02e      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002d40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d44:	d828      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4a:	d02a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d50:	d822      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d56:	d026      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d5c:	d81c      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d62:	d010      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d68:	d816      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01d      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d111      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fcd6 	bl	800372c <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d84:	e012      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3324      	adds	r3, #36	; 0x24
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd7f 	bl	8003890 <RCCEx_PLL3_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d96:	e009      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e004      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002da2:	bf00      	nop
 8002da4:	e002      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc0:	4901      	ldr	r1, [pc, #4]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	658b      	str	r3, [r1, #88]	; 0x58
 8002dc6:	e003      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d04b      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002de2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002de6:	d02e      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002de8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dec:	d828      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df2:	d02a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df8:	d822      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002dfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002dfe:	d026      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002e00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e04:	d81c      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e10:	d816      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01d      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fc82 	bl	800372c <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e2c:	e012      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3324      	adds	r3, #36	; 0x24
 8002e32:	2102      	movs	r1, #2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fd2b 	bl	8003890 <RCCEx_PLL3_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e5a:	4b9d      	ldr	r3, [pc, #628]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e68:	4999      	ldr	r1, [pc, #612]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e6e:	e001      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3324      	adds	r3, #36	; 0x24
 8002e90:	2102      	movs	r1, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fcfc 	bl	8003890 <RCCEx_PLL3_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb0:	4987      	ldr	r1, [pc, #540]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3324      	adds	r3, #36	; 0x24
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fcdb 	bl	8003890 <RCCEx_PLL3_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ee4:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	4977      	ldr	r1, [pc, #476]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d034      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f0e:	d01d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f14:	d817      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d009      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002f20:	e011      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fbff 	bl	800372c <RCCEx_PLL2_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f32:	e00c      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3324      	adds	r3, #36	; 0x24
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fca8 	bl	8003890 <RCCEx_PLL3_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
      break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f54:	4b5e      	ldr	r3, [pc, #376]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f62:	495b      	ldr	r1, [pc, #364]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	658b      	str	r3, [r1, #88]	; 0x58
 8002f68:	e001      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d033      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f84:	d01c      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f8a:	d816      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f90:	d003      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f96:	d007      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002f98:	e00f      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fa6:	e00c      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3324      	adds	r3, #36	; 0x24
 8002fac:	2101      	movs	r1, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fc6e 	bl	8003890 <RCCEx_PLL3_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fb8:	e003      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc8:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd6:	493e      	ldr	r1, [pc, #248]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	654b      	str	r3, [r1, #84]	; 0x54
 8002fdc:	e001      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d029      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d007      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002ffc:	e00f      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800300a:	e00b      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	2102      	movs	r1, #2
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb8a 	bl	800372c <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800301c:	e002      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
      break;
 8003022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4926      	ldr	r1, [pc, #152]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fc1b 	bl	8003890 <RCCEx_PLL3_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d033      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003078:	d017      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800307a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307e:	d811      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d013      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308a:	d80b      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d106      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030a2:	e007      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
      break;
 80030a8:	e004      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c6:	4902      	ldr	r1, [pc, #8]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	654b      	str	r3, [r1, #84]	; 0x54
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030e4:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	492e      	ldr	r1, [pc, #184]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003110:	4926      	ldr	r1, [pc, #152]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003112:	4313      	orrs	r3, r2
 8003114:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003122:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003126:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800312e:	491f      	ldr	r1, [pc, #124]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003130:	4313      	orrs	r3, r2
 8003132:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003146:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800314a:	6113      	str	r3, [r2, #16]
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003156:	4915      	ldr	r1, [pc, #84]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003158:	4313      	orrs	r3, r2
 800315a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da08      	bge.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	490e      	ldr	r1, [pc, #56]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003172:	4313      	orrs	r3, r2
 8003174:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	4906      	ldr	r1, [pc, #24]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003192:	4313      	orrs	r3, r2
 8003194:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003196:	7dbb      	ldrb	r3, [r7, #22]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400

080031b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80031b4:	f7ff f85a 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4904      	ldr	r1, [pc, #16]	; (80031d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	58024400 	.word	0x58024400
 80031d8:	08004e18 	.word	0x08004e18

080031dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031e4:	4ba1      	ldr	r3, [pc, #644]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80031ee:	4b9f      	ldr	r3, [pc, #636]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	0b1b      	lsrs	r3, r3, #12
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80031fa:	4b9c      	ldr	r3, [pc, #624]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003206:	4b99      	ldr	r3, [pc, #612]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8111 	beq.w	800344c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b02      	cmp	r3, #2
 800322e:	f000 8083 	beq.w	8003338 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b02      	cmp	r3, #2
 8003236:	f200 80a1 	bhi.w	800337c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d056      	beq.n	80032f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003246:	e099      	b.n	800337c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003248:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02d      	beq.n	80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003254:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	4a84      	ldr	r2, [pc, #528]	; (8003470 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b7b      	ldr	r3, [pc, #492]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003292:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032ae:	e087      	b.n	80033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003478 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b6a      	ldr	r3, [pc, #424]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032f2:	e065      	b.n	80033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800347c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a03 	vldr	s12, [r7, #12]
 800331a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003336:	e043      	b.n	80033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b48      	ldr	r3, [pc, #288]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a03 	vldr	s12, [r7, #12]
 800335e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800337a:	e021      	b.n	80033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800347c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a03 	vldr	s12, [r7, #12]
 80033a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80033c0:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033da:	edd7 6a07 	vldr	s13, [r7, #28]
 80033de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e6:	ee17 2a90 	vmov	r2, s15
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003408:	edd7 6a07 	vldr	s13, [r7, #28]
 800340c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003414:	ee17 2a90 	vmov	r2, s15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	0e1b      	lsrs	r3, r3, #24
 8003422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003436:	edd7 6a07 	vldr	s13, [r7, #28]
 800343a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800344a:	e008      	b.n	800345e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
}
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	03d09000 	.word	0x03d09000
 8003474:	46000000 	.word	0x46000000
 8003478:	4c742400 	.word	0x4c742400
 800347c:	4a742400 	.word	0x4a742400
 8003480:	4af42400 	.word	0x4af42400

08003484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800348c:	4ba1      	ldr	r3, [pc, #644]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003496:	4b9f      	ldr	r3, [pc, #636]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	0d1b      	lsrs	r3, r3, #20
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80034a2:	4b9c      	ldr	r3, [pc, #624]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80034ae:	4b99      	ldr	r3, [pc, #612]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	08db      	lsrs	r3, r3, #3
 80034b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8111 	beq.w	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	f000 8083 	beq.w	80035e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	f200 80a1 	bhi.w	8003624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d056      	beq.n	800359c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80034ee:	e099      	b.n	8003624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f0:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d02d      	beq.n	8003558 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034fc:	4b85      	ldr	r3, [pc, #532]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	08db      	lsrs	r3, r3, #3
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	4a84      	ldr	r2, [pc, #528]	; (8003718 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
 800350c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003526:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003536:	ed97 6a03 	vldr	s12, [r7, #12]
 800353a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800371c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800353e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800354a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800354e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003552:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003556:	e087      	b.n	8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003562:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003720 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357a:	ed97 6a03 	vldr	s12, [r7, #12]
 800357e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800371c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800359a:	e065      	b.n	8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80035aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ae:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035be:	ed97 6a03 	vldr	s12, [r7, #12]
 80035c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800371c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035de:	e043      	b.n	8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80035ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f2:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003602:	ed97 6a03 	vldr	s12, [r7, #12]
 8003606:	eddf 5a45 	vldr	s11, [pc, #276]	; 800371c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800360a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003622:	e021      	b.n	8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003646:	ed97 6a03 	vldr	s12, [r7, #12]
 800364a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800371c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003666:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	0a5b      	lsrs	r3, r3, #9
 800366e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800367e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003682:	edd7 6a07 	vldr	s13, [r7, #28]
 8003686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800368a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368e:	ee17 2a90 	vmov	r2, s15
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036bc:	ee17 2a90 	vmov	r2, s15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	0e1b      	lsrs	r3, r3, #24
 80036ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036de:	edd7 6a07 	vldr	s13, [r7, #28]
 80036e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ea:	ee17 2a90 	vmov	r2, s15
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80036f2:	e008      	b.n	8003706 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
}
 8003706:	bf00      	nop
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400
 8003718:	03d09000 	.word	0x03d09000
 800371c:	46000000 	.word	0x46000000
 8003720:	4c742400 	.word	0x4c742400
 8003724:	4a742400 	.word	0x4a742400
 8003728:	4af42400 	.word	0x4af42400

0800372c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800373a:	4b53      	ldr	r3, [pc, #332]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b03      	cmp	r3, #3
 8003744:	d101      	bne.n	800374a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e099      	b.n	800387e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800374a:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003750:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003756:	f7fd fadd 	bl	8000d14 <HAL_GetTick>
 800375a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800375c:	e008      	b.n	8003770 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800375e:	f7fd fad9 	bl	8000d14 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e086      	b.n	800387e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800377c:	4b42      	ldr	r3, [pc, #264]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	031b      	lsls	r3, r3, #12
 800378a:	493f      	ldr	r1, [pc, #252]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	628b      	str	r3, [r1, #40]	; 0x28
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	3b01      	subs	r3, #1
 8003796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	3b01      	subs	r3, #1
 80037a0:	025b      	lsls	r3, r3, #9
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	061b      	lsls	r3, r3, #24
 80037bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037c0:	4931      	ldr	r1, [pc, #196]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037c6:	4b30      	ldr	r3, [pc, #192]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	492d      	ldr	r1, [pc, #180]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	f023 0220 	bic.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	4928      	ldr	r1, [pc, #160]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80037ea:	4b27      	ldr	r3, [pc, #156]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	4a26      	ldr	r2, [pc, #152]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037f0:	f023 0310 	bic.w	r3, r3, #16
 80037f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80037f6:	4b24      	ldr	r3, [pc, #144]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 80037f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <RCCEx_PLL2_Config+0x160>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	69d2      	ldr	r2, [r2, #28]
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	4920      	ldr	r1, [pc, #128]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800380a:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003810:	f043 0310 	orr.w	r3, r3, #16
 8003814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003828:	e00f      	b.n	800384a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003830:	4b15      	ldr	r3, [pc, #84]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800383c:	e005      	b.n	800384a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4a11      	ldr	r2, [pc, #68]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003856:	f7fd fa5d 	bl	8000d14 <HAL_GetTick>
 800385a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800385c:	e008      	b.n	8003870 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800385e:	f7fd fa59 	bl	8000d14 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e006      	b.n	800387e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <RCCEx_PLL2_Config+0x15c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	ffff0007 	.word	0xffff0007

08003890 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800389e:	4b53      	ldr	r3, [pc, #332]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d101      	bne.n	80038ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e099      	b.n	80039e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80038ae:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a4e      	ldr	r2, [pc, #312]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ba:	f7fd fa2b 	bl	8000d14 <HAL_GetTick>
 80038be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038c2:	f7fd fa27 	bl	8000d14 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e086      	b.n	80039e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038d4:	4b45      	ldr	r3, [pc, #276]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80038e0:	4b42      	ldr	r3, [pc, #264]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	493f      	ldr	r1, [pc, #252]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	628b      	str	r3, [r1, #40]	; 0x28
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	3b01      	subs	r3, #1
 8003904:	025b      	lsls	r3, r3, #9
 8003906:	b29b      	uxth	r3, r3
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	3b01      	subs	r3, #1
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	3b01      	subs	r3, #1
 800391e:	061b      	lsls	r3, r3, #24
 8003920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003924:	4931      	ldr	r1, [pc, #196]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	492d      	ldr	r1, [pc, #180]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4928      	ldr	r1, [pc, #160]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	4a26      	ldr	r2, [pc, #152]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 800395c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <RCCEx_PLL3_Config+0x160>)
 8003960:	4013      	ands	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	69d2      	ldr	r2, [r2, #28]
 8003966:	00d2      	lsls	r2, r2, #3
 8003968:	4920      	ldr	r1, [pc, #128]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800396e:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800398a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800398c:	e00f      	b.n	80039ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 800399a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800399e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039a0:	e005      	b.n	80039ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	4a11      	ldr	r2, [pc, #68]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80039a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ba:	f7fd f9ab 	bl	8000d14 <HAL_GetTick>
 80039be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039c0:	e008      	b.n	80039d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039c2:	f7fd f9a7 	bl	8000d14 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e006      	b.n	80039e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <RCCEx_PLL3_Config+0x15c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	58024400 	.word	0x58024400
 80039f0:	ffff0007 	.word	0xffff0007

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e042      	b.n	8003a8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd f83b 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2224      	movs	r2, #36	; 0x24
 8003a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f996 	bl	8003d68 <UART_SetConfig>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e022      	b.n	8003a8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fef2 	bl	8004838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 ff79 	bl	800497c <UART_CheckIdleState>
 8003a8a:	4603      	mov	r3, r0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	f040 8083 	bne.w	8003bb6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_UART_Transmit+0x28>
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e07b      	b.n	8003bb8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit+0x3a>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e074      	b.n	8003bb8 <HAL_UART_Transmit+0x124>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2221      	movs	r2, #33	; 0x21
 8003ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae6:	f7fd f915 	bl	8000d14 <HAL_GetTick>
 8003aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	d108      	bne.n	8003b18 <HAL_UART_Transmit+0x84>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e003      	b.n	8003b20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b28:	e02c      	b.n	8003b84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 ff6c 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e039      	b.n	8003bb8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10b      	bne.n	8003b62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e007      	b.n	8003b72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1cc      	bne.n	8003b2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	2140      	movs	r1, #64	; 0x40
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 ff39 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e006      	b.n	8003bb8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	f040 80c0 	bne.w	8003d5c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Receive+0x28>
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Receive+0x3a>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e0b1      	b.n	8003d5e <HAL_UART_Receive+0x19e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2222      	movs	r2, #34	; 0x22
 8003c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c18:	f7fd f87c 	bl	8000d14 <HAL_GetTick>
 8003c1c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c36:	d10e      	bne.n	8003c56 <HAL_UART_Receive+0x96>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <HAL_UART_Receive+0x8c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c4a:	e02d      	b.n	8003ca8 <HAL_UART_Receive+0xe8>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c54:	e028      	b.n	8003ca8 <HAL_UART_Receive+0xe8>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_UART_Receive+0xba>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Receive+0xb0>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c6e:	e01b      	b.n	8003ca8 <HAL_UART_Receive+0xe8>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	227f      	movs	r2, #127	; 0x7f
 8003c74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c78:	e016      	b.n	8003ca8 <HAL_UART_Receive+0xe8>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c82:	d10d      	bne.n	8003ca0 <HAL_UART_Receive+0xe0>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_UART_Receive+0xd6>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	227f      	movs	r2, #127	; 0x7f
 8003c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c94:	e008      	b.n	8003ca8 <HAL_UART_Receive+0xe8>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	223f      	movs	r2, #63	; 0x3f
 8003c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c9e:	e003      	b.n	8003ca8 <HAL_UART_Receive+0xe8>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003cae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d108      	bne.n	8003ccc <HAL_UART_Receive+0x10c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e003      	b.n	8003cd4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003cdc:	e032      	b.n	8003d44 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fe92 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e032      	b.n	8003d5e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	8a7b      	ldrh	r3, [r7, #18]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	3302      	adds	r3, #2
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e00c      	b.n	8003d32 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	8a7b      	ldrh	r3, [r7, #18]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4013      	ands	r3, r2
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1c6      	bne.n	8003cde <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d6c:	b092      	sub	sp, #72	; 0x48
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4bbe      	ldr	r3, [pc, #760]	; (8004090 <UART_SetConfig+0x328>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4ab3      	ldr	r2, [pc, #716]	; (8004094 <UART_SetConfig+0x32c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	4baf      	ldr	r3, [pc, #700]	; (8004098 <UART_SetConfig+0x330>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f023 010f 	bic.w	r1, r3, #15
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4aa6      	ldr	r2, [pc, #664]	; (800409c <UART_SetConfig+0x334>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d177      	bne.n	8003ef8 <UART_SetConfig+0x190>
 8003e08:	4ba5      	ldr	r3, [pc, #660]	; (80040a0 <UART_SetConfig+0x338>)
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e10:	2b28      	cmp	r3, #40	; 0x28
 8003e12:	d86d      	bhi.n	8003ef0 <UART_SetConfig+0x188>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0xb4>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003ec1 	.word	0x08003ec1
 8003e20:	08003ef1 	.word	0x08003ef1
 8003e24:	08003ef1 	.word	0x08003ef1
 8003e28:	08003ef1 	.word	0x08003ef1
 8003e2c:	08003ef1 	.word	0x08003ef1
 8003e30:	08003ef1 	.word	0x08003ef1
 8003e34:	08003ef1 	.word	0x08003ef1
 8003e38:	08003ef1 	.word	0x08003ef1
 8003e3c:	08003ec9 	.word	0x08003ec9
 8003e40:	08003ef1 	.word	0x08003ef1
 8003e44:	08003ef1 	.word	0x08003ef1
 8003e48:	08003ef1 	.word	0x08003ef1
 8003e4c:	08003ef1 	.word	0x08003ef1
 8003e50:	08003ef1 	.word	0x08003ef1
 8003e54:	08003ef1 	.word	0x08003ef1
 8003e58:	08003ef1 	.word	0x08003ef1
 8003e5c:	08003ed1 	.word	0x08003ed1
 8003e60:	08003ef1 	.word	0x08003ef1
 8003e64:	08003ef1 	.word	0x08003ef1
 8003e68:	08003ef1 	.word	0x08003ef1
 8003e6c:	08003ef1 	.word	0x08003ef1
 8003e70:	08003ef1 	.word	0x08003ef1
 8003e74:	08003ef1 	.word	0x08003ef1
 8003e78:	08003ef1 	.word	0x08003ef1
 8003e7c:	08003ed9 	.word	0x08003ed9
 8003e80:	08003ef1 	.word	0x08003ef1
 8003e84:	08003ef1 	.word	0x08003ef1
 8003e88:	08003ef1 	.word	0x08003ef1
 8003e8c:	08003ef1 	.word	0x08003ef1
 8003e90:	08003ef1 	.word	0x08003ef1
 8003e94:	08003ef1 	.word	0x08003ef1
 8003e98:	08003ef1 	.word	0x08003ef1
 8003e9c:	08003ee1 	.word	0x08003ee1
 8003ea0:	08003ef1 	.word	0x08003ef1
 8003ea4:	08003ef1 	.word	0x08003ef1
 8003ea8:	08003ef1 	.word	0x08003ef1
 8003eac:	08003ef1 	.word	0x08003ef1
 8003eb0:	08003ef1 	.word	0x08003ef1
 8003eb4:	08003ef1 	.word	0x08003ef1
 8003eb8:	08003ef1 	.word	0x08003ef1
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ec6:	e222      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ece:	e21e      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ed6:	e21a      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ede:	e216      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e212      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ee8:	2340      	movs	r3, #64	; 0x40
 8003eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eee:	e20e      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef6:	e20a      	b.n	800430e <UART_SetConfig+0x5a6>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a69      	ldr	r2, [pc, #420]	; (80040a4 <UART_SetConfig+0x33c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d130      	bne.n	8003f64 <UART_SetConfig+0x1fc>
 8003f02:	4b67      	ldr	r3, [pc, #412]	; (80040a0 <UART_SetConfig+0x338>)
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d826      	bhi.n	8003f5c <UART_SetConfig+0x1f4>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0x1ac>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f2d 	.word	0x08003f2d
 8003f18:	08003f35 	.word	0x08003f35
 8003f1c:	08003f3d 	.word	0x08003f3d
 8003f20:	08003f45 	.word	0x08003f45
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f32:	e1ec      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f3a:	e1e8      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f42:	e1e4      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4a:	e1e0      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f52:	e1dc      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f5a:	e1d8      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f62:	e1d4      	b.n	800430e <UART_SetConfig+0x5a6>
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a4f      	ldr	r2, [pc, #316]	; (80040a8 <UART_SetConfig+0x340>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d130      	bne.n	8003fd0 <UART_SetConfig+0x268>
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <UART_SetConfig+0x338>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d826      	bhi.n	8003fc8 <UART_SetConfig+0x260>
 8003f7a:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0x218>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003f99 	.word	0x08003f99
 8003f84:	08003fa1 	.word	0x08003fa1
 8003f88:	08003fa9 	.word	0x08003fa9
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f9e:	e1b6      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fa6:	e1b2      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fa8:	2308      	movs	r3, #8
 8003faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fae:	e1ae      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fb6:	e1aa      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fb8:	2320      	movs	r3, #32
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fbe:	e1a6      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fc6:	e1a2      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fce:	e19e      	b.n	800430e <UART_SetConfig+0x5a6>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a35      	ldr	r2, [pc, #212]	; (80040ac <UART_SetConfig+0x344>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d130      	bne.n	800403c <UART_SetConfig+0x2d4>
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <UART_SetConfig+0x338>)
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d826      	bhi.n	8004034 <UART_SetConfig+0x2cc>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <UART_SetConfig+0x284>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004005 	.word	0x08004005
 8003ff0:	0800400d 	.word	0x0800400d
 8003ff4:	08004015 	.word	0x08004015
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800400a:	e180      	b.n	800430e <UART_SetConfig+0x5a6>
 800400c:	2304      	movs	r3, #4
 800400e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004012:	e17c      	b.n	800430e <UART_SetConfig+0x5a6>
 8004014:	2308      	movs	r3, #8
 8004016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800401a:	e178      	b.n	800430e <UART_SetConfig+0x5a6>
 800401c:	2310      	movs	r3, #16
 800401e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004022:	e174      	b.n	800430e <UART_SetConfig+0x5a6>
 8004024:	2320      	movs	r3, #32
 8004026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800402a:	e170      	b.n	800430e <UART_SetConfig+0x5a6>
 800402c:	2340      	movs	r3, #64	; 0x40
 800402e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004032:	e16c      	b.n	800430e <UART_SetConfig+0x5a6>
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800403a:	e168      	b.n	800430e <UART_SetConfig+0x5a6>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <UART_SetConfig+0x348>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d142      	bne.n	80040cc <UART_SetConfig+0x364>
 8004046:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <UART_SetConfig+0x338>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2b05      	cmp	r3, #5
 8004050:	d838      	bhi.n	80040c4 <UART_SetConfig+0x35c>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <UART_SetConfig+0x2f0>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	08004071 	.word	0x08004071
 800405c:	08004079 	.word	0x08004079
 8004060:	08004081 	.word	0x08004081
 8004064:	08004089 	.word	0x08004089
 8004068:	080040b5 	.word	0x080040b5
 800406c:	080040bd 	.word	0x080040bd
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004076:	e14a      	b.n	800430e <UART_SetConfig+0x5a6>
 8004078:	2304      	movs	r3, #4
 800407a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800407e:	e146      	b.n	800430e <UART_SetConfig+0x5a6>
 8004080:	2308      	movs	r3, #8
 8004082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004086:	e142      	b.n	800430e <UART_SetConfig+0x5a6>
 8004088:	2310      	movs	r3, #16
 800408a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800408e:	e13e      	b.n	800430e <UART_SetConfig+0x5a6>
 8004090:	cfff69f3 	.word	0xcfff69f3
 8004094:	58000c00 	.word	0x58000c00
 8004098:	11fff4ff 	.word	0x11fff4ff
 800409c:	40011000 	.word	0x40011000
 80040a0:	58024400 	.word	0x58024400
 80040a4:	40004400 	.word	0x40004400
 80040a8:	40004800 	.word	0x40004800
 80040ac:	40004c00 	.word	0x40004c00
 80040b0:	40005000 	.word	0x40005000
 80040b4:	2320      	movs	r3, #32
 80040b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ba:	e128      	b.n	800430e <UART_SetConfig+0x5a6>
 80040bc:	2340      	movs	r3, #64	; 0x40
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c2:	e124      	b.n	800430e <UART_SetConfig+0x5a6>
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ca:	e120      	b.n	800430e <UART_SetConfig+0x5a6>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4acb      	ldr	r2, [pc, #812]	; (8004400 <UART_SetConfig+0x698>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d176      	bne.n	80041c4 <UART_SetConfig+0x45c>
 80040d6:	4bcb      	ldr	r3, [pc, #812]	; (8004404 <UART_SetConfig+0x69c>)
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040de:	2b28      	cmp	r3, #40	; 0x28
 80040e0:	d86c      	bhi.n	80041bc <UART_SetConfig+0x454>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <UART_SetConfig+0x380>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800418d 	.word	0x0800418d
 80040ec:	080041bd 	.word	0x080041bd
 80040f0:	080041bd 	.word	0x080041bd
 80040f4:	080041bd 	.word	0x080041bd
 80040f8:	080041bd 	.word	0x080041bd
 80040fc:	080041bd 	.word	0x080041bd
 8004100:	080041bd 	.word	0x080041bd
 8004104:	080041bd 	.word	0x080041bd
 8004108:	08004195 	.word	0x08004195
 800410c:	080041bd 	.word	0x080041bd
 8004110:	080041bd 	.word	0x080041bd
 8004114:	080041bd 	.word	0x080041bd
 8004118:	080041bd 	.word	0x080041bd
 800411c:	080041bd 	.word	0x080041bd
 8004120:	080041bd 	.word	0x080041bd
 8004124:	080041bd 	.word	0x080041bd
 8004128:	0800419d 	.word	0x0800419d
 800412c:	080041bd 	.word	0x080041bd
 8004130:	080041bd 	.word	0x080041bd
 8004134:	080041bd 	.word	0x080041bd
 8004138:	080041bd 	.word	0x080041bd
 800413c:	080041bd 	.word	0x080041bd
 8004140:	080041bd 	.word	0x080041bd
 8004144:	080041bd 	.word	0x080041bd
 8004148:	080041a5 	.word	0x080041a5
 800414c:	080041bd 	.word	0x080041bd
 8004150:	080041bd 	.word	0x080041bd
 8004154:	080041bd 	.word	0x080041bd
 8004158:	080041bd 	.word	0x080041bd
 800415c:	080041bd 	.word	0x080041bd
 8004160:	080041bd 	.word	0x080041bd
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041ad 	.word	0x080041ad
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080041bd 	.word	0x080041bd
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041bd 	.word	0x080041bd
 8004184:	080041bd 	.word	0x080041bd
 8004188:	080041b5 	.word	0x080041b5
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004192:	e0bc      	b.n	800430e <UART_SetConfig+0x5a6>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419a:	e0b8      	b.n	800430e <UART_SetConfig+0x5a6>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a2:	e0b4      	b.n	800430e <UART_SetConfig+0x5a6>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041aa:	e0b0      	b.n	800430e <UART_SetConfig+0x5a6>
 80041ac:	2320      	movs	r3, #32
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b2:	e0ac      	b.n	800430e <UART_SetConfig+0x5a6>
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e0a8      	b.n	800430e <UART_SetConfig+0x5a6>
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e0a4      	b.n	800430e <UART_SetConfig+0x5a6>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a8f      	ldr	r2, [pc, #572]	; (8004408 <UART_SetConfig+0x6a0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d130      	bne.n	8004230 <UART_SetConfig+0x4c8>
 80041ce:	4b8d      	ldr	r3, [pc, #564]	; (8004404 <UART_SetConfig+0x69c>)
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d826      	bhi.n	8004228 <UART_SetConfig+0x4c0>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x478>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	08004201 	.word	0x08004201
 80041e8:	08004209 	.word	0x08004209
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004221 	.word	0x08004221
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041fe:	e086      	b.n	800430e <UART_SetConfig+0x5a6>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004206:	e082      	b.n	800430e <UART_SetConfig+0x5a6>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420e:	e07e      	b.n	800430e <UART_SetConfig+0x5a6>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004216:	e07a      	b.n	800430e <UART_SetConfig+0x5a6>
 8004218:	2320      	movs	r3, #32
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421e:	e076      	b.n	800430e <UART_SetConfig+0x5a6>
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004226:	e072      	b.n	800430e <UART_SetConfig+0x5a6>
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422e:	e06e      	b.n	800430e <UART_SetConfig+0x5a6>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a75      	ldr	r2, [pc, #468]	; (800440c <UART_SetConfig+0x6a4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d130      	bne.n	800429c <UART_SetConfig+0x534>
 800423a:	4b72      	ldr	r3, [pc, #456]	; (8004404 <UART_SetConfig+0x69c>)
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	2b05      	cmp	r3, #5
 8004244:	d826      	bhi.n	8004294 <UART_SetConfig+0x52c>
 8004246:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0x4e4>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	08004265 	.word	0x08004265
 8004250:	0800426d 	.word	0x0800426d
 8004254:	08004275 	.word	0x08004275
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428d 	.word	0x0800428d
 8004264:	2300      	movs	r3, #0
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800426a:	e050      	b.n	800430e <UART_SetConfig+0x5a6>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004272:	e04c      	b.n	800430e <UART_SetConfig+0x5a6>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800427a:	e048      	b.n	800430e <UART_SetConfig+0x5a6>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004282:	e044      	b.n	800430e <UART_SetConfig+0x5a6>
 8004284:	2320      	movs	r3, #32
 8004286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428a:	e040      	b.n	800430e <UART_SetConfig+0x5a6>
 800428c:	2340      	movs	r3, #64	; 0x40
 800428e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004292:	e03c      	b.n	800430e <UART_SetConfig+0x5a6>
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429a:	e038      	b.n	800430e <UART_SetConfig+0x5a6>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5b      	ldr	r2, [pc, #364]	; (8004410 <UART_SetConfig+0x6a8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d130      	bne.n	8004308 <UART_SetConfig+0x5a0>
 80042a6:	4b57      	ldr	r3, [pc, #348]	; (8004404 <UART_SetConfig+0x69c>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d826      	bhi.n	8004300 <UART_SetConfig+0x598>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <UART_SetConfig+0x550>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042d1 	.word	0x080042d1
 80042bc:	080042d9 	.word	0x080042d9
 80042c0:	080042e1 	.word	0x080042e1
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	2302      	movs	r3, #2
 80042d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042d6:	e01a      	b.n	800430e <UART_SetConfig+0x5a6>
 80042d8:	2304      	movs	r3, #4
 80042da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042de:	e016      	b.n	800430e <UART_SetConfig+0x5a6>
 80042e0:	2308      	movs	r3, #8
 80042e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e6:	e012      	b.n	800430e <UART_SetConfig+0x5a6>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ee:	e00e      	b.n	800430e <UART_SetConfig+0x5a6>
 80042f0:	2320      	movs	r3, #32
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f6:	e00a      	b.n	800430e <UART_SetConfig+0x5a6>
 80042f8:	2340      	movs	r3, #64	; 0x40
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fe:	e006      	b.n	800430e <UART_SetConfig+0x5a6>
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004306:	e002      	b.n	800430e <UART_SetConfig+0x5a6>
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3f      	ldr	r2, [pc, #252]	; (8004410 <UART_SetConfig+0x6a8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	f040 80f8 	bne.w	800450a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800431a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800431e:	2b20      	cmp	r3, #32
 8004320:	dc46      	bgt.n	80043b0 <UART_SetConfig+0x648>
 8004322:	2b02      	cmp	r3, #2
 8004324:	f2c0 8082 	blt.w	800442c <UART_SetConfig+0x6c4>
 8004328:	3b02      	subs	r3, #2
 800432a:	2b1e      	cmp	r3, #30
 800432c:	d87e      	bhi.n	800442c <UART_SetConfig+0x6c4>
 800432e:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0x5cc>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	080043b7 	.word	0x080043b7
 8004338:	0800442d 	.word	0x0800442d
 800433c:	080043bf 	.word	0x080043bf
 8004340:	0800442d 	.word	0x0800442d
 8004344:	0800442d 	.word	0x0800442d
 8004348:	0800442d 	.word	0x0800442d
 800434c:	080043cf 	.word	0x080043cf
 8004350:	0800442d 	.word	0x0800442d
 8004354:	0800442d 	.word	0x0800442d
 8004358:	0800442d 	.word	0x0800442d
 800435c:	0800442d 	.word	0x0800442d
 8004360:	0800442d 	.word	0x0800442d
 8004364:	0800442d 	.word	0x0800442d
 8004368:	0800442d 	.word	0x0800442d
 800436c:	080043df 	.word	0x080043df
 8004370:	0800442d 	.word	0x0800442d
 8004374:	0800442d 	.word	0x0800442d
 8004378:	0800442d 	.word	0x0800442d
 800437c:	0800442d 	.word	0x0800442d
 8004380:	0800442d 	.word	0x0800442d
 8004384:	0800442d 	.word	0x0800442d
 8004388:	0800442d 	.word	0x0800442d
 800438c:	0800442d 	.word	0x0800442d
 8004390:	0800442d 	.word	0x0800442d
 8004394:	0800442d 	.word	0x0800442d
 8004398:	0800442d 	.word	0x0800442d
 800439c:	0800442d 	.word	0x0800442d
 80043a0:	0800442d 	.word	0x0800442d
 80043a4:	0800442d 	.word	0x0800442d
 80043a8:	0800442d 	.word	0x0800442d
 80043ac:	0800441f 	.word	0x0800441f
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d037      	beq.n	8004424 <UART_SetConfig+0x6bc>
 80043b4:	e03a      	b.n	800442c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80043b6:	f7fe fefb 	bl	80031b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80043ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80043bc:	e03c      	b.n	8004438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe ff0a 	bl	80031dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043cc:	e034      	b.n	8004438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043ce:	f107 0318 	add.w	r3, r7, #24
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff f856 	bl	8003484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043dc:	e02c      	b.n	8004438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <UART_SetConfig+0x69c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <UART_SetConfig+0x69c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	08db      	lsrs	r3, r3, #3
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <UART_SetConfig+0x6ac>)
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043fc:	e01c      	b.n	8004438 <UART_SetConfig+0x6d0>
 80043fe:	bf00      	nop
 8004400:	40011400 	.word	0x40011400
 8004404:	58024400 	.word	0x58024400
 8004408:	40007800 	.word	0x40007800
 800440c:	40007c00 	.word	0x40007c00
 8004410:	58000c00 	.word	0x58000c00
 8004414:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004418:	4b9d      	ldr	r3, [pc, #628]	; (8004690 <UART_SetConfig+0x928>)
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800441c:	e00c      	b.n	8004438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800441e:	4b9d      	ldr	r3, [pc, #628]	; (8004694 <UART_SetConfig+0x92c>)
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004422:	e009      	b.n	8004438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800442a:	e005      	b.n	8004438 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004436:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 81de 	beq.w	80047fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	4a94      	ldr	r2, [pc, #592]	; (8004698 <UART_SetConfig+0x930>)
 8004446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800444a:	461a      	mov	r2, r3
 800444c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004452:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	429a      	cmp	r2, r3
 8004462:	d305      	bcc.n	8004470 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800446a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446c:	429a      	cmp	r2, r3
 800446e:	d903      	bls.n	8004478 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004476:	e1c1      	b.n	80047fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447a:	2200      	movs	r2, #0
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	60fa      	str	r2, [r7, #12]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	4a84      	ldr	r2, [pc, #528]	; (8004698 <UART_SetConfig+0x930>)
 8004486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448a:	b29b      	uxth	r3, r3
 800448c:	2200      	movs	r2, #0
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800449a:	f7fb ff1d 	bl	80002d8 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	020b      	lsls	r3, r1, #8
 80044b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044b4:	0202      	lsls	r2, r0, #8
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	6849      	ldr	r1, [r1, #4]
 80044ba:	0849      	lsrs	r1, r1, #1
 80044bc:	2000      	movs	r0, #0
 80044be:	460c      	mov	r4, r1
 80044c0:	4605      	mov	r5, r0
 80044c2:	eb12 0804 	adds.w	r8, r2, r4
 80044c6:	eb43 0905 	adc.w	r9, r3, r5
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	469a      	mov	sl, r3
 80044d2:	4693      	mov	fp, r2
 80044d4:	4652      	mov	r2, sl
 80044d6:	465b      	mov	r3, fp
 80044d8:	4640      	mov	r0, r8
 80044da:	4649      	mov	r1, r9
 80044dc:	f7fb fefc 	bl	80002d8 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ee:	d308      	bcc.n	8004502 <UART_SetConfig+0x79a>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d204      	bcs.n	8004502 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e17c      	b.n	80047fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004508:	e178      	b.n	80047fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004512:	f040 80c5 	bne.w	80046a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004516:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800451a:	2b20      	cmp	r3, #32
 800451c:	dc48      	bgt.n	80045b0 <UART_SetConfig+0x848>
 800451e:	2b00      	cmp	r3, #0
 8004520:	db7b      	blt.n	800461a <UART_SetConfig+0x8b2>
 8004522:	2b20      	cmp	r3, #32
 8004524:	d879      	bhi.n	800461a <UART_SetConfig+0x8b2>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x7c4>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	080045b7 	.word	0x080045b7
 8004530:	080045bf 	.word	0x080045bf
 8004534:	0800461b 	.word	0x0800461b
 8004538:	0800461b 	.word	0x0800461b
 800453c:	080045c7 	.word	0x080045c7
 8004540:	0800461b 	.word	0x0800461b
 8004544:	0800461b 	.word	0x0800461b
 8004548:	0800461b 	.word	0x0800461b
 800454c:	080045d7 	.word	0x080045d7
 8004550:	0800461b 	.word	0x0800461b
 8004554:	0800461b 	.word	0x0800461b
 8004558:	0800461b 	.word	0x0800461b
 800455c:	0800461b 	.word	0x0800461b
 8004560:	0800461b 	.word	0x0800461b
 8004564:	0800461b 	.word	0x0800461b
 8004568:	0800461b 	.word	0x0800461b
 800456c:	080045e7 	.word	0x080045e7
 8004570:	0800461b 	.word	0x0800461b
 8004574:	0800461b 	.word	0x0800461b
 8004578:	0800461b 	.word	0x0800461b
 800457c:	0800461b 	.word	0x0800461b
 8004580:	0800461b 	.word	0x0800461b
 8004584:	0800461b 	.word	0x0800461b
 8004588:	0800461b 	.word	0x0800461b
 800458c:	0800461b 	.word	0x0800461b
 8004590:	0800461b 	.word	0x0800461b
 8004594:	0800461b 	.word	0x0800461b
 8004598:	0800461b 	.word	0x0800461b
 800459c:	0800461b 	.word	0x0800461b
 80045a0:	0800461b 	.word	0x0800461b
 80045a4:	0800461b 	.word	0x0800461b
 80045a8:	0800461b 	.word	0x0800461b
 80045ac:	0800460d 	.word	0x0800460d
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d02e      	beq.n	8004612 <UART_SetConfig+0x8aa>
 80045b4:	e031      	b.n	800461a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b6:	f7fd fe89 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 80045ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045bc:	e033      	b.n	8004626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045be:	f7fd fe9b 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 80045c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045c4:	e02f      	b.n	8004626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fe06 	bl	80031dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045d4:	e027      	b.n	8004626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045d6:	f107 0318 	add.w	r3, r7, #24
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe ff52 	bl	8003484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045e4:	e01f      	b.n	8004626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <UART_SetConfig+0x934>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <UART_SetConfig+0x934>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	4a24      	ldr	r2, [pc, #144]	; (8004690 <UART_SetConfig+0x928>)
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004604:	e00f      	b.n	8004626 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <UART_SetConfig+0x928>)
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800460a:	e00c      	b.n	8004626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800460c:	4b21      	ldr	r3, [pc, #132]	; (8004694 <UART_SetConfig+0x92c>)
 800460e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80e7 	beq.w	80047fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	4a19      	ldr	r2, [pc, #100]	; (8004698 <UART_SetConfig+0x930>)
 8004634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004638:	461a      	mov	r2, r3
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004640:	005a      	lsls	r2, r3, #1
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	441a      	add	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d916      	bls.n	8004688 <UART_SetConfig+0x920>
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d212      	bcs.n	8004688 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	b29b      	uxth	r3, r3
 8004666:	f023 030f 	bic.w	r3, r3, #15
 800466a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	b29a      	uxth	r2, r3
 8004678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800467a:	4313      	orrs	r3, r2
 800467c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	e0b9      	b.n	80047fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800468e:	e0b5      	b.n	80047fc <UART_SetConfig+0xa94>
 8004690:	03d09000 	.word	0x03d09000
 8004694:	003d0900 	.word	0x003d0900
 8004698:	08004e28 	.word	0x08004e28
 800469c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80046a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	dc49      	bgt.n	800473c <UART_SetConfig+0x9d4>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db7c      	blt.n	80047a6 <UART_SetConfig+0xa3e>
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d87a      	bhi.n	80047a6 <UART_SetConfig+0xa3e>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x950>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	08004743 	.word	0x08004743
 80046bc:	0800474b 	.word	0x0800474b
 80046c0:	080047a7 	.word	0x080047a7
 80046c4:	080047a7 	.word	0x080047a7
 80046c8:	08004753 	.word	0x08004753
 80046cc:	080047a7 	.word	0x080047a7
 80046d0:	080047a7 	.word	0x080047a7
 80046d4:	080047a7 	.word	0x080047a7
 80046d8:	08004763 	.word	0x08004763
 80046dc:	080047a7 	.word	0x080047a7
 80046e0:	080047a7 	.word	0x080047a7
 80046e4:	080047a7 	.word	0x080047a7
 80046e8:	080047a7 	.word	0x080047a7
 80046ec:	080047a7 	.word	0x080047a7
 80046f0:	080047a7 	.word	0x080047a7
 80046f4:	080047a7 	.word	0x080047a7
 80046f8:	08004773 	.word	0x08004773
 80046fc:	080047a7 	.word	0x080047a7
 8004700:	080047a7 	.word	0x080047a7
 8004704:	080047a7 	.word	0x080047a7
 8004708:	080047a7 	.word	0x080047a7
 800470c:	080047a7 	.word	0x080047a7
 8004710:	080047a7 	.word	0x080047a7
 8004714:	080047a7 	.word	0x080047a7
 8004718:	080047a7 	.word	0x080047a7
 800471c:	080047a7 	.word	0x080047a7
 8004720:	080047a7 	.word	0x080047a7
 8004724:	080047a7 	.word	0x080047a7
 8004728:	080047a7 	.word	0x080047a7
 800472c:	080047a7 	.word	0x080047a7
 8004730:	080047a7 	.word	0x080047a7
 8004734:	080047a7 	.word	0x080047a7
 8004738:	08004799 	.word	0x08004799
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d02e      	beq.n	800479e <UART_SetConfig+0xa36>
 8004740:	e031      	b.n	80047a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004742:	f7fd fdc3 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8004746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004748:	e033      	b.n	80047b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474a:	f7fd fdd5 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 800474e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004750:	e02f      	b.n	80047b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fd40 	bl	80031dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004760:	e027      	b.n	80047b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004762:	f107 0318 	add.w	r3, r7, #24
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fe8c 	bl	8003484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004770:	e01f      	b.n	80047b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004772:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <UART_SetConfig+0xac0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <UART_SetConfig+0xac0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	4a28      	ldr	r2, [pc, #160]	; (800482c <UART_SetConfig+0xac4>)
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004790:	e00f      	b.n	80047b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <UART_SetConfig+0xac4>)
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004796:	e00c      	b.n	80047b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <UART_SetConfig+0xac8>)
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800479c:	e009      	b.n	80047b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047a4:	e005      	b.n	80047b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80047b0:	bf00      	nop
    }

    if (pclk != 0U)
 80047b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d021      	beq.n	80047fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <UART_SetConfig+0xacc>)
 80047be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c2:	461a      	mov	r2, r3
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	441a      	add	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	2b0f      	cmp	r3, #15
 80047e0:	d909      	bls.n	80047f6 <UART_SetConfig+0xa8e>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d205      	bcs.n	80047f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e002      	b.n	80047fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2201      	movs	r2, #1
 8004800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2201      	movs	r2, #1
 8004808:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004818:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800481c:	4618      	mov	r0, r3
 800481e:	3748      	adds	r7, #72	; 0x48
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	58024400 	.word	0x58024400
 800482c:	03d09000 	.word	0x03d09000
 8004830:	003d0900 	.word	0x003d0900
 8004834:	08004e28 	.word	0x08004e28

08004838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d10a      	bne.n	800494e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800498c:	f7fc f9c2 	bl	8000d14 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d10e      	bne.n	80049be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f82f 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e025      	b.n	8004a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d10e      	bne.n	80049ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f819 	bl	8004a12 <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e00f      	b.n	8004a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b09c      	sub	sp, #112	; 0x70
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a22:	e0a9      	b.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2a:	f000 80a5 	beq.w	8004b78 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fc f971 	bl	8000d14 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d140      	bne.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a58:	667b      	str	r3, [r7, #100]	; 0x64
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e6      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e5      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e069      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d051      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae2:	d149      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b40:	623a      	str	r2, [r7, #32]
 8004b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e010      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	f43f af46 	beq.w	8004a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3770      	adds	r7, #112	; 0x70
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e027      	b.n	8004c08 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004be6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e02d      	b.n	8004c88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f84f 	bl	8004d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e02d      	b.n	8004d04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f811 	bl	8004d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d2c:	e031      	b.n	8004d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d2e:	2310      	movs	r3, #16
 8004d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d32:	2310      	movs	r3, #16
 8004d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	0e5b      	lsrs	r3, r3, #25
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	0f5b      	lsrs	r3, r3, #29
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d56:	7bbb      	ldrb	r3, [r7, #14]
 8004d58:	7b3a      	ldrb	r2, [r7, #12]
 8004d5a:	4911      	ldr	r1, [pc, #68]	; (8004da0 <UARTEx_SetNbDataToProcess+0x94>)
 8004d5c:	5c8a      	ldrb	r2, [r1, r2]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d62:	7b3a      	ldrb	r2, [r7, #12]
 8004d64:	490f      	ldr	r1, [pc, #60]	; (8004da4 <UARTEx_SetNbDataToProcess+0x98>)
 8004d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	7b7a      	ldrb	r2, [r7, #13]
 8004d78:	4909      	ldr	r1, [pc, #36]	; (8004da0 <UARTEx_SetNbDataToProcess+0x94>)
 8004d7a:	5c8a      	ldrb	r2, [r1, r2]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d80:	7b7a      	ldrb	r2, [r7, #13]
 8004d82:	4908      	ldr	r1, [pc, #32]	; (8004da4 <UARTEx_SetNbDataToProcess+0x98>)
 8004d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	08004e40 	.word	0x08004e40
 8004da4:	08004e48 	.word	0x08004e48

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4d0d      	ldr	r5, [pc, #52]	; (8004de0 <__libc_init_array+0x38>)
 8004dac:	4c0d      	ldr	r4, [pc, #52]	; (8004de4 <__libc_init_array+0x3c>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	2600      	movs	r6, #0
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	4d0b      	ldr	r5, [pc, #44]	; (8004de8 <__libc_init_array+0x40>)
 8004dba:	4c0c      	ldr	r4, [pc, #48]	; (8004dec <__libc_init_array+0x44>)
 8004dbc:	f000 f820 	bl	8004e00 <_init>
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd0:	4798      	blx	r3
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dda:	4798      	blx	r3
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	08004e58 	.word	0x08004e58
 8004de4:	08004e58 	.word	0x08004e58
 8004de8:	08004e58 	.word	0x08004e58
 8004dec:	08004e5c 	.word	0x08004e5c

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
