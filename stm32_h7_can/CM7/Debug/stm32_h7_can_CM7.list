
stm32_h7_can_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008368  08008368  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008370  08008370  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008374  08008374  00018374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08008378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  080083ec  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  0800844c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007d4  24000134  080084ac  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000908  080084ac  00020908  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e202  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f3a  00000000  00000000  0003e364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001468  00000000  00000000  000412a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001340  00000000  00000000  00042708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d16c  00000000  00000000  00043a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018fd6  00000000  00000000  00080bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018f9cb  00000000  00000000  00099b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00229555  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006050  00000000  00000000  002295a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080081f0 	.word	0x080081f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	080081f0 	.word	0x080081f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <main+0x110>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	60fa      	str	r2, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fae5 	bl	8000da8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fe21 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f87d 	bl	80008e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <main+0x110>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <main+0x110>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <main+0x110>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f002 fbb5 	bl	8002f74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f002 fbcb 	bl	8002fa8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <main+0x110>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	60fa      	str	r2, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fab7 	bl	8000da8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fa4f 	bl	8000cdc <MX_GPIO_Init>
  MX_ETH_Init();
 800083e:	f000 f8cd 	bl	80009dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000842:	f000 f9cd 	bl	8000be0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000846:	f000 fa17 	bl	8000c78 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 800084a:	f000 f913 	bl	8000a74 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Welcome to the CANbus!!!\n\r");
 800084e:	481d      	ldr	r0, [pc, #116]	; (80008c4 <main+0x114>)
 8000850:	f006 fce2 	bl	8007218 <iprintf>
//  	HAL_Delay(100); /*AAO-*/
//  }

  while (1) {
      // Wait until a CAN message is received
      while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 8000854:	bf00      	nop
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <main+0x118>)
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <main+0x11c>)
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <main+0x120>)
 800085e:	f001 fe6b 	bl	8002538 <HAL_FDCAN_GetRxMessage>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f6      	bne.n	8000856 <main+0xa6>

      // Delay for 10 ms
      HAL_Delay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f000 fe6d 	bl	8001548 <HAL_Delay>

      // Print CAN ID
      printf("\n\r0x%lx", RxHeader.Identifier);
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <main+0x11c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	4817      	ldr	r0, [pc, #92]	; (80008d4 <main+0x124>)
 8000876:	f006 fccf 	bl	8007218 <iprintf>

      // Print the CAN data length and data bytes
      printf(" [%lu]", RxHeader.DataLength >> 16);  // Data length is stored in bits 16-19
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <main+0x11c>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4815      	ldr	r0, [pc, #84]	; (80008d8 <main+0x128>)
 8000884:	f006 fcc8 	bl	8007218 <iprintf>
      printf(" ");
 8000888:	2020      	movs	r0, #32
 800088a:	f006 fcdd 	bl	8007248 <putchar>

      // Loop through each byte of the CAN message data and print it
      for (int i = 0; i < (RxHeader.DataLength >> 16); i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	e00a      	b.n	80008aa <main+0xfa>
          printf("0x%02X ", RxData[i]);  // Print each byte in hexadecimal
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <main+0x118>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	480f      	ldr	r0, [pc, #60]	; (80008dc <main+0x12c>)
 80008a0:	f006 fcba 	bl	8007218 <iprintf>
      for (int i = 0; i < (RxHeader.DataLength >> 16); i++) {
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3301      	adds	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <main+0x11c>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	0c1a      	lsrs	r2, r3, #16
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d8ee      	bhi.n	8000894 <main+0xe4>

      // Optional: toggle LED for visual feedback (commented out)
      // HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

      // Delay for 100 ms
      HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f000 fe46 	bl	8001548 <HAL_Delay>
      while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 80008bc:	e7ca      	b.n	8000854 <main+0xa4>
 80008be:	bf00      	nop
 80008c0:	58024400 	.word	0x58024400
 80008c4:	08008208 	.word	0x08008208
 80008c8:	240008e0 	.word	0x240008e0
 80008cc:	240008b8 	.word	0x240008b8
 80008d0:	24000238 	.word	0x24000238
 80008d4:	08008224 	.word	0x08008224
 80008d8:	0800822c 	.word	0x0800822c
 80008dc:	08008234 	.word	0x08008234

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	224c      	movs	r2, #76	; 0x4c
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f006 fc8a 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2220      	movs	r2, #32
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fc84 	bl	8007208 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000900:	2004      	movs	r0, #4
 8000902:	f002 fcad 	bl	8003260 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <SystemClock_Config+0xf4>)
 800090c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090e:	4a31      	ldr	r2, [pc, #196]	; (80009d4 <SystemClock_Config+0xf4>)
 8000910:	f023 0301 	bic.w	r3, r3, #1
 8000914:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <SystemClock_Config+0xf4>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <SystemClock_Config+0xf8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000928:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <SystemClock_Config+0xf8>)
 800092a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <SystemClock_Config+0xf8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093c:	bf00      	nop
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <SystemClock_Config+0xf8>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800094a:	d1f8      	bne.n	800093e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094c:	2301      	movs	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000950:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	2302      	movs	r3, #2
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000962:	2325      	movs	r3, #37	; 0x25
 8000964:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800096a:	2305      	movs	r3, #5
 800096c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096e:	2302      	movs	r3, #2
 8000970:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000972:	230c      	movs	r3, #12
 8000974:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000976:	2300      	movs	r3, #0
 8000978:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fcd5 	bl	8003334 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000990:	f000 fa0a 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	233f      	movs	r3, #63	; 0x3f
 8000996:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000998:	2303      	movs	r3, #3
 800099a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009a4:	2340      	movs	r3, #64	; 0x40
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a8:	2340      	movs	r3, #64	; 0x40
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2102      	movs	r1, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 f8e8 	bl	8003b90 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009c6:	f000 f9ef 	bl	8000da8 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	; 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	58000400 	.word	0x58000400
 80009d8:	58024800 	.word	0x58024800

080009dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_ETH_Init+0x80>)
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <MX_ETH_Init+0x84>)
 80009e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_ETH_Init+0x88>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_ETH_Init+0x88>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_ETH_Init+0x88>)
 80009f4:	22e1      	movs	r2, #225	; 0xe1
 80009f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_ETH_Init+0x88>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_ETH_Init+0x88>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_ETH_Init+0x88>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_ETH_Init+0x80>)
 8000a0c:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <MX_ETH_Init+0x88>)
 8000a0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_ETH_Init+0x80>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_ETH_Init+0x80>)
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_ETH_Init+0x80>)
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_ETH_Init+0x80>)
 8000a24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_ETH_Init+0x80>)
 8000a2c:	f000 feb4 	bl	8001798 <HAL_ETH_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a36:	f000 f9b7 	bl	8000da8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a3a:	2238      	movs	r2, #56	; 0x38
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a40:	f006 fbe2 	bl	8007208 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a46:	2221      	movs	r2, #33	; 0x21
 8000a48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	24000188 	.word	0x24000188
 8000a60:	40028000 	.word	0x40028000
 8000a64:	240008e8 	.word	0x240008e8
 8000a68:	240000d4 	.word	0x240000d4
 8000a6c:	24000074 	.word	0x24000074
 8000a70:	24000150 	.word	0x24000150

08000a74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a7a:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000a7c:	4a55      	ldr	r2, [pc, #340]	; (8000bd4 <MX_FDCAN1_Init+0x160>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a80:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a86:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a8c:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a92:	4b4f      	ldr	r3, [pc, #316]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000a98:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8000a9e:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000aac:	221f      	movs	r2, #31
 8000aae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ab6:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ac2:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ac8:	4b41      	ldr	r3, [pc, #260]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ada:	4b3d      	ldr	r3, [pc, #244]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000ae0:	4b3b      	ldr	r3, [pc, #236]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000ae8:	2204      	movs	r2, #4
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000aec:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000af8:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b22:	482b      	ldr	r0, [pc, #172]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b24:	f001 fa5c 	bl	8001fe0 <HAL_FDCAN_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b2e:	f000 f93b 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
   /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	60da      	str	r2, [r3, #12]
    // Default
//    sFilterConfig.FilterID1 = 0x000; // Filter
//    sFilterConfig.FilterID2 = 0x000; // Mask
    // InClass CAN
    sFilterConfig.FilterID1 = 0x300; // Filter
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b50:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x700; // Mask
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b58:	615a      	str	r2, [r3, #20]

//    sFilterConfig.FilterID1 = 0x617; // Filter
//    sFilterConfig.FilterID2 = 0x7FF; // Mask

    /* Configure global filter to reject all non-matching frames */
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2202      	movs	r2, #2
 8000b62:	2102      	movs	r1, #2
 8000b64:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b66:	f001 fc8f 	bl	8002488 <HAL_FDCAN_ConfigGlobalFilter>

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000b6a:	491b      	ldr	r1, [pc, #108]	; (8000bd8 <MX_FDCAN1_Init+0x164>)
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b6e:	f001 fc15 	bl	800239c <HAL_FDCAN_ConfigFilter>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_FDCAN1_Init+0x108>
      {
         /* Filter configuration Error */
         Error_Handler();
 8000b78:	f000 f916 	bl	8000da8 <Error_Handler>
      }
     /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b7e:	f001 fcb0 	bl	80024e2 <HAL_FDCAN_Start>
      }
         /* Start Error */
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <MX_FDCAN1_Init+0x15c>)
 8000b88:	f001 fe44 	bl	8002814 <HAL_FDCAN_ActivateNotification>
      }
         /* Notification Error */

     /* Configure Tx buffer message */
    TxHeader.Identifier = 0x111;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000b8e:	f240 1211 	movw	r2, #273	; 0x111
 8000b92:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000ba2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000ba6:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000bb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bb4:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000bb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bbc:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <MX_FDCAN1_Init+0x168>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
   /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000238 	.word	0x24000238
 8000bd4:	4000a000 	.word	0x4000a000
 8000bd8:	24000874 	.word	0x24000874
 8000bdc:	24000894 	.word	0x24000894

08000be0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_USART3_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c2a:	f004 fea5 	bl	8005978 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f8b8 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f005 fed8 	bl	80069f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f8af 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c4e:	f005 ff0d 	bl	8006a6c <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f8a6 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f005 fe8e 	bl	800697e <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f89e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	240002d8 	.word	0x240002d8
 8000c74:	40004800 	.word	0x40004800

08000c78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c84:	2209      	movs	r2, #9
 8000c86:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc0:	f002 f986 	bl	8002fd0 <HAL_PCD_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cca:	f000 f86d 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	24000368 	.word	0x24000368
 8000cd8:	40080000 	.word	0x40080000

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_GPIO_Init+0xc8>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

}
 8000d96:	bf00      	nop
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	58024400 	.word	0x58024400

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dbc:	1d39      	adds	r1, r7, #4
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <__io_putchar+0x20>)
 8000dc6:	f004 fe27 	bl	8005a18 <HAL_UART_Transmit>
  return ch;
 8000dca:	687b      	ldr	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	240002d8 	.word	0x240002d8

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_MspInit+0x30>)
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x30>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x30>)
 8000df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	58024400 	.word	0x58024400

08000e0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a59      	ldr	r2, [pc, #356]	; (8000f90 <HAL_ETH_MspInit+0x184>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	f040 80ab 	bne.w	8000f86 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e30:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e36:	4a57      	ldr	r2, [pc, #348]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e40:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e4e:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e54:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e6c:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e72:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e7c:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a40      	ldr	r2, [pc, #256]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	4a39      	ldr	r2, [pc, #228]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb8:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a31      	ldr	r2, [pc, #196]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	4a2a      	ldr	r2, [pc, #168]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f02:	2332      	movs	r3, #50	; 0x32
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f12:	230b      	movs	r3, #11
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_ETH_MspInit+0x18c>)
 8000f1e:	f001 fe79 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f22:	2386      	movs	r3, #134	; 0x86
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f32:	230b      	movs	r3, #11
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4817      	ldr	r0, [pc, #92]	; (8000f9c <HAL_ETH_MspInit+0x190>)
 8000f3e:	f001 fe69 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <HAL_ETH_MspInit+0x194>)
 8000f60:	f001 fe58 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f76:	230b      	movs	r3, #11
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_ETH_MspInit+0x198>)
 8000f82:	f001 fe47 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3738      	adds	r7, #56	; 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40028000 	.word	0x40028000
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	58020400 	.word	0x58020400
 8000fa4:	58021800 	.word	0x58021800

08000fa8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0b8      	sub	sp, #224	; 0xe0
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	22bc      	movs	r2, #188	; 0xbc
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 f91d 	bl	8007208 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_FDCAN_MspInit+0xc0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d142      	bne.n	800105e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fdc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 f95d 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ff4:	f7ff fed8 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_FDCAN_MspInit+0xc4>)
 8000ffa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	; (800106c <HAL_FDCAN_MspInit+0xc4>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_FDCAN_MspInit+0xc4>)
 800100a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_FDCAN_MspInit+0xc4>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_FDCAN_MspInit+0xc4>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_FDCAN_MspInit+0xc4>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800104c:	2309      	movs	r3, #9
 800104e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001052:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_FDCAN_MspInit+0xc8>)
 800105a:	f001 fddb 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	37e0      	adds	r7, #224	; 0xe0
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	4000a000 	.word	0x4000a000
 800106c:	58024400 	.word	0x58024400
 8001070:	58020c00 	.word	0x58020c00

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0b8      	sub	sp, #224	; 0xe0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	22bc      	movs	r2, #188	; 0xbc
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f006 f8b7 	bl	8007208 <memset>
  if(huart->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <HAL_UART_MspInit+0xc0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d142      	bne.n	800112a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 f8f8 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff fe73 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0xc8>)
 8001126:	f001 fd75 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	37e0      	adds	r7, #224	; 0xe0
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004800 	.word	0x40004800
 8001138:	58024400 	.word	0x58024400
 800113c:	58020c00 	.word	0x58020c00

08001140 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0b8      	sub	sp, #224	; 0xe0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	22bc      	movs	r2, #188	; 0xbc
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f006 f851 	bl	8007208 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <HAL_PCD_MspInit+0xe8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d156      	bne.n	800121e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001170:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001174:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800117a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f890 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800118e:	f7ff fe0b 	bl	8000da8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001192:	f002 f8bf 	bl	8003314 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_PCD_MspInit+0xec>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_PCD_MspInit+0xec>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011b4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011ce:	230a      	movs	r3, #10
 80011d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d8:	4619      	mov	r1, r3
 80011da:	4815      	ldr	r0, [pc, #84]	; (8001230 <HAL_PCD_MspInit+0xf0>)
 80011dc:	f001 fd1a 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <HAL_PCD_MspInit+0xf0>)
 80011fc:	f001 fd0a 	bl	8002c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800120c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	37e0      	adds	r7, #224	; 0xe0
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40080000 	.word	0x40080000
 800122c:	58024400 	.word	0x58024400
 8001230:	58020000 	.word	0x58020000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 f942 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
	}

return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fd69 	bl	8000db4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
	}
	return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f005 ff00 	bl	8007198 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24080000 	.word	0x24080000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	240008f0 	.word	0x240008f0
 80013cc:	24000908 	.word	0x24000908

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d4:	f7ff f956 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	; (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f005 fed1 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff f9d5 	bl	80007b0 <main>
  bx  lr
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800140c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001410:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001414:	08008378 	.word	0x08008378
  ldr r2, =_sbss
 8001418:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 800141c:	24000908 	.word	0x24000908

08001420 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC3_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f982 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001430:	f002 fd64 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	4913      	ldr	r1, [pc, #76]	; (8001490 <HAL_Init+0x6c>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_Init+0x68>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_Init+0x6c>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_Init+0x70>)
 8001466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_Init+0x74>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f814 	bl	800149c <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e002      	b.n	8001484 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800147e:	f7ff fcab 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	58024400 	.word	0x58024400
 8001490:	08008288 	.word	0x08008288
 8001494:	24000004 	.word	0x24000004
 8001498:	24000000 	.word	0x24000000

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_InitTick+0x60>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e021      	b.n	80014f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_InitTick+0x64>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_InitTick+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f959 	bl	800177e <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f000 f931 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x68>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2400000c 	.word	0x2400000c
 8001500:	24000000 	.word	0x24000000
 8001504:	24000008 	.word	0x24000008

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2400000c 	.word	0x2400000c
 800152c:	240008f4 	.word	0x240008f4

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	240008f4 	.word	0x240008f4

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2400000c 	.word	0x2400000c

08001590 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetREVID+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0c1b      	lsrs	r3, r3, #16
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	5c001000 	.word	0x5c001000

080015a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	58000400 	.word	0x58000400

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff47 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb2 	bl	80016f0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0cf      	b.n	800194a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2223      	movs	r2, #35	; 0x23
 80017b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fb25 	bl	8000e0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_ETH_Init+0x1bc>)
 80017c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c8:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_ETH_Init+0x1bc>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <HAL_ETH_Init+0x1bc>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7a1b      	ldrb	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fedd 	bl	80015a8 <HAL_SYSCFG_ETHInterfaceSelect>
 80017ee:	e003      	b.n	80017f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017f4:	f7ff fed8 	bl	80015a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017f8:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_ETH_Init+0x1c0>)
 80017fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001812:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff fe8c 	bl	8001530 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800181a:	e011      	b.n	8001840 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800181c:	f7ff fe88 	bl	8001530 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800182a:	d909      	bls.n	8001840 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2204      	movs	r2, #4
 8001830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	22e0      	movs	r2, #224	; 0xe0
 8001838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e084      	b.n	800194a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e4      	bne.n	800181c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f886 	bl	8001964 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001858:	f002 fcca 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800185c:	4603      	mov	r3, r0
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <HAL_ETH_Init+0x1c4>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	0c9a      	lsrs	r2, r3, #18
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3a01      	subs	r2, #1
 800186c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fa71 	bl	8001d58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001882:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800188e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001892:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	22e0      	movs	r2, #224	; 0xe0
 80018ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e049      	b.n	800194a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_ETH_Init+0x1c8>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6952      	ldr	r2, [r2, #20]
 80018ca:	0051      	lsls	r1, r2, #1
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fad9 	bl	8001e92 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb1f 	bl	8001f24 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	3305      	adds	r3, #5
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	021a      	lsls	r2, r3, #8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	3303      	adds	r3, #3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	061a      	lsls	r2, r3, #24
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	3302      	adds	r3, #2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001924:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001932:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001934:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2210      	movs	r2, #16
 8001944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	58024400 	.word	0x58024400
 8001958:	58000400 	.word	0x58000400
 800195c:	431bde83 	.word	0x431bde83
 8001960:	ffff8001 	.word	0xffff8001

08001964 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001974:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800197c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800197e:	f002 fc37 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8001982:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d908      	bls.n	800199e <HAL_ETH_SetMDIOClockRange+0x3a>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d804      	bhi.n	800199e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e027      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d908      	bls.n	80019b8 <HAL_ETH_SetMDIOClockRange+0x54>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d204      	bcs.n	80019b8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e01a      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d303      	bcc.n	80019c8 <HAL_ETH_SetMDIOClockRange+0x64>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d911      	bls.n	80019ec <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d908      	bls.n	80019e2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_ETH_SetMDIOClockRange+0xac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d804      	bhi.n	80019e2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e005      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e000      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80019ec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	01312cff 	.word	0x01312cff
 8001a04:	02160ebf 	.word	0x02160ebf
 8001a08:	03938700 	.word	0x03938700
 8001a0c:	05f5e0ff 	.word	0x05f5e0ff
 8001a10:	08f0d17f 	.word	0x08f0d17f

08001a14 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7b1b      	ldrb	r3, [r3, #12]
 8001a34:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7b5b      	ldrb	r3, [r3, #13]
 8001a3c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7b9b      	ldrb	r3, [r3, #14]
 8001a44:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	7bdb      	ldrb	r3, [r3, #15]
 8001a4c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	7c12      	ldrb	r2, [r2, #16]
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d102      	bne.n	8001a5e <ETH_SetMACConfig+0x4a>
 8001a58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x4c>
 8001a5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	7c52      	ldrb	r2, [r2, #17]
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d102      	bne.n	8001a70 <ETH_SetMACConfig+0x5c>
 8001a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a6e:	e000      	b.n	8001a72 <ETH_SetMACConfig+0x5e>
 8001a70:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7c9b      	ldrb	r3, [r3, #18]
 8001a78:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a7a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a80:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	7f5b      	ldrb	r3, [r3, #29]
 8001a94:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	7f92      	ldrb	r2, [r2, #30]
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d102      	bne.n	8001aa6 <ETH_SetMACConfig+0x92>
 8001aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa4:	e000      	b.n	8001aa8 <ETH_SetMACConfig+0x94>
 8001aa6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001aa8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	7fdb      	ldrb	r3, [r3, #31]
 8001aae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ab0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d102      	bne.n	8001ac2 <ETH_SetMACConfig+0xae>
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac0:	e000      	b.n	8001ac4 <ETH_SetMACConfig+0xb0>
 8001ac2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001ac4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ad2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001ad4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <ETH_SetMACConfig+0x22c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001afe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b12:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b1c:	2a00      	cmp	r2, #0
 8001b1e:	d102      	bne.n	8001b26 <ETH_SetMACConfig+0x112>
 8001b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b24:	e000      	b.n	8001b28 <ETH_SetMACConfig+0x114>
 8001b26:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b28:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <ETH_SetMACConfig+0x230>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <ETH_SetMACConfig+0x234>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d101      	bne.n	8001b86 <ETH_SetMACConfig+0x172>
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0x174>
 8001b86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b88:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b9a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001bb0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bb8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f023 0103 	bic.w	r1, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001bde:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d101      	bne.n	8001c02 <ETH_SetMACConfig+0x1ee>
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	e000      	b.n	8001c04 <ETH_SetMACConfig+0x1f0>
 8001c02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	00048083 	.word	0x00048083
 8001c44:	c0f88000 	.word	0xc0f88000
 8001c48:	fffffef0 	.word	0xfffffef0

08001c4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <ETH_SetDMAConfig+0xf8>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6811      	ldr	r1, [r2, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c72:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
 8001c84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <ETH_SetDMAConfig+0xfc>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7b5b      	ldrb	r3, [r3, #13]
 8001caa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <ETH_SetDMAConfig+0x100>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cd0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7d1b      	ldrb	r3, [r3, #20]
 8001cdc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7f5b      	ldrb	r3, [r3, #29]
 8001ce4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <ETH_SetDMAConfig+0x104>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d06:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7f1b      	ldrb	r3, [r3, #28]
 8001d0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <ETH_SetDMAConfig+0x108>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d34:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	ffff87fd 	.word	0xffff87fd
 8001d48:	ffff2ffe 	.word	0xffff2ffe
 8001d4c:	fffec000 	.word	0xfffec000
 8001d50:	ffc0efef 	.word	0xffc0efef
 8001d54:	7fc0ffff 	.word	0x7fc0ffff

08001d58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0a4      	sub	sp, #144	; 0x90
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d66:	2300      	movs	r3, #0
 8001d68:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001db0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001df0:	2320      	movs	r3, #32
 8001df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e32:	2300      	movs	r3, #0
 8001e34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fde6 	bl	8001a14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fee1 	bl	8001c4c <ETH_SetDMAConfig>
}
 8001e8a:	bf00      	nop
 8001e8c:	3790      	adds	r7, #144	; 0x90
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e01d      	b.n	8001edc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68d9      	ldr	r1, [r3, #12]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	3206      	adds	r2, #6
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d9de      	bls.n	8001ea0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e023      	b.n	8001f7a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6919      	ldr	r1, [r3, #16]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	3212      	adds	r2, #18
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d9d8      	bls.n	8001f32 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b098      	sub	sp, #96	; 0x60
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001fe8:	4a84      	ldr	r2, [pc, #528]	; (80021fc <HAL_FDCAN_Init+0x21c>)
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4611      	mov	r1, r2
 8001ff0:	224c      	movs	r2, #76	; 0x4c
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 f8fa 	bl	80071ec <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1c6      	b.n	8002390 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7e      	ldr	r2, [pc, #504]	; (8002200 <HAL_FDCAN_Init+0x220>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d106      	bne.n	800201a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe ffba 	bl	8000fa8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0210 	bic.w	r2, r2, #16
 8002042:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002044:	f7ff fa74 	bl	8001530 <HAL_GetTick>
 8002048:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800204a:	e014      	b.n	8002076 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800204c:	f7ff fa70 	bl	8001530 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d90d      	bls.n	8002076 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e18c      	b.n	8002390 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b08      	cmp	r3, #8
 8002082:	d0e3      	beq.n	800204c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002094:	f7ff fa4c 	bl	8001530 <HAL_GetTick>
 8002098:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800209a:	e014      	b.n	80020c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800209c:	f7ff fa48 	bl	8001530 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b0a      	cmp	r3, #10
 80020a8:	d90d      	bls.n	80020c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2203      	movs	r2, #3
 80020be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e164      	b.n	8002390 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0e3      	beq.n	800209c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0202 	orr.w	r2, r2, #2
 80020e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7c1b      	ldrb	r3, [r3, #16]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fa:	619a      	str	r2, [r3, #24]
 80020fc:	e007      	b.n	800210e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7c5b      	ldrb	r3, [r3, #17]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002124:	619a      	str	r2, [r3, #24]
 8002126:	e007      	b.n	8002138 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002136:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7c9b      	ldrb	r3, [r3, #18]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	e007      	b.n	8002162 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002160:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002186:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0204 	orr.w	r2, r2, #4
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	e030      	b.n	8002214 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d02c      	beq.n	8002214 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d020      	beq.n	8002204 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0210 	orr.w	r2, r2, #16
 80021e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d114      	bne.n	8002214 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0220 	orr.w	r2, r2, #32
 80021f8:	619a      	str	r2, [r3, #24]
 80021fa:	e00b      	b.n	8002214 <HAL_FDCAN_Init+0x234>
 80021fc:	0800823c 	.word	0x0800823c
 8002200:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	3b01      	subs	r3, #1
 800221a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	3b01      	subs	r3, #1
 8002222:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002224:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800222c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	3b01      	subs	r3, #1
 8002236:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800223c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800223e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002248:	d115      	bne.n	8002276 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	3b01      	subs	r3, #1
 8002256:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002258:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	3b01      	subs	r3, #1
 8002260:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002262:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	3b01      	subs	r3, #1
 800226c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002272:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002274:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	4413      	add	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d011      	beq.n	80022c6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80022aa:	f023 0107 	bic.w	r1, r3, #7
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3360      	adds	r3, #96	; 0x60
 80022b6:	443b      	add	r3, r7
 80022b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d011      	beq.n	80022f2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80022d6:	f023 0107 	bic.w	r1, r3, #7
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	3360      	adds	r3, #96	; 0x60
 80022e2:	443b      	add	r3, r7
 80022e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002302:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	3360      	adds	r3, #96	; 0x60
 800230e:	443b      	add	r3, r7
 8002310:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002314:	011a      	lsls	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	2b00      	cmp	r3, #0
 8002326:	d012      	beq.n	800234e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002330:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3360      	adds	r3, #96	; 0x60
 800233c:	443b      	add	r3, r7
 800233e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002342:	021a      	lsls	r2, r3, #8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_FDCAN_Init+0x3b8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d107      	bne.n	8002368 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f022 0203 	bic.w	r2, r2, #3
 8002366:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fac1 	bl	8002908 <FDCAN_CalcultateRamBlockAddresses>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800238c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002390:	4618      	mov	r0, r3
 8002392:	3760      	adds	r7, #96	; 0x60
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	4000a000 	.word	0x4000a000

0800239c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80023ac:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d002      	beq.n	80023ba <HAL_FDCAN_ConfigFilter+0x1e>
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d157      	bne.n	800246a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d12b      	bne.n	800241a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b07      	cmp	r3, #7
 80023c8:	d10d      	bne.n	80023e6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80023d6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80023dc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80023de:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00e      	b.n	8002404 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80023f2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80023fa:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e025      	b.n	8002466 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	075a      	lsls	r2, r3, #29
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b07      	cmp	r3, #7
 800242e:	d103      	bne.n	8002438 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	e006      	b.n	8002446 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	079a      	lsls	r2, r3, #30
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3304      	adds	r3, #4
 800245e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e008      	b.n	800247c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002470:	f043 0202 	orr.w	r2, r3, #2
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
  }
}
 800247c:	4618      	mov	r0, r3
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d110      	bne.n	80024c4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80024aa:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80024bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e008      	b.n	80024d6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024ca:	f043 0204 	orr.w	r2, r3, #4
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d111      	bne.n	800251a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e008      	b.n	800252c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002538:	b480      	push	{r7}
 800253a:	b08b      	sub	sp, #44	; 0x2c
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002550:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002552:	7efb      	ldrb	r3, [r7, #27]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 814b 	bne.w	80027f0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d14d      	bne.n	80025fc <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002568:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e13e      	b.n	8002802 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800258c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800259a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e12c      	b.n	8002802 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025b0:	0e1b      	lsrs	r3, r3, #24
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10b      	bne.n	80025d2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025c2:	0fdb      	lsrs	r3, r3, #31
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025cc:	d101      	bne.n	80025d2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	69f9      	ldr	r1, [r7, #28]
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e069      	b.n	80026d0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b41      	cmp	r3, #65	; 0x41
 8002600:	d14d      	bne.n	800269e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800260a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0ed      	b.n	8002802 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800262e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800263c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0db      	b.n	8002802 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002652:	0e1b      	lsrs	r3, r3, #24
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d10b      	bne.n	8002674 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002664:	0fdb      	lsrs	r3, r3, #31
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800266e:	d101      	bne.n	8002674 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002670:	2301      	movs	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	69f9      	ldr	r1, [r7, #28]
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
 800269c:	e018      	b.n	80026d0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d309      	bcc.n	80026bc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0a2      	b.n	8002802 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e005      	b.n	8002700 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3304      	adds	r3, #4
 800271c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e1b      	lsrs	r3, r3, #24
 8002752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0fda      	lsrs	r2, r3, #31
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3304      	adds	r3, #4
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	e00a      	b.n	800278a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	441a      	add	r2, r3
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	440b      	add	r3, r1
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	3301      	adds	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	461a      	mov	r2, r3
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	4293      	cmp	r3, r2
 800279a:	d3eb      	bcc.n	8002774 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d105      	bne.n	80027ae <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80027ac:	e01e      	b.n	80027ec <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b41      	cmp	r3, #65	; 0x41
 80027b2:	d105      	bne.n	80027c0 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80027be:	e015      	b.n	80027ec <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b1f      	cmp	r3, #31
 80027c4:	d808      	bhi.n	80027d8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80027d6:	e009      	b.n	80027ec <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 021f 	and.w	r2, r3, #31
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e008      	b.n	8002802 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027f6:	f043 0208 	orr.w	r2, r3, #8
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	372c      	adds	r7, #44	; 0x2c
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	08008298 	.word	0x08008298

08002814 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002826:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d002      	beq.n	8002834 <HAL_FDCAN_ActivateNotification+0x20>
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d155      	bne.n	80028e0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	65da      	str	r2, [r3, #92]	; 0x5c
 8002852:	e014      	b.n	800287e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d108      	bne.n	8002876 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0202 	orr.w	r2, r2, #2
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
 8002874:	e003      	b.n	800287e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2203      	movs	r2, #3
 800287c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	430a      	orrs	r2, r1
 8002898:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_FDCAN_ActivateNotification+0xec>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6553      	str	r3, [r2, #84]	; 0x54
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_FDCAN_ActivateNotification+0xf0>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	0f9b      	lsrs	r3, r3, #30
 80028d6:	490b      	ldr	r1, [pc, #44]	; (8002904 <HAL_FDCAN_ActivateNotification+0xf0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e008      	b.n	80028f2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	3fcfffff 	.word	0x3fcfffff
 8002904:	4000a800 	.word	0x4000a800

08002908 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800291e:	4ba7      	ldr	r3, [pc, #668]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002920:	4013      	ands	r3, r2
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	0091      	lsls	r1, r2, #2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	430b      	orrs	r3, r1
 800292c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002938:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4413      	add	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800295e:	4b97      	ldr	r3, [pc, #604]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002960:	4013      	ands	r3, r2
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	0091      	lsls	r1, r2, #2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	430b      	orrs	r3, r1
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	041a      	lsls	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80029a0:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	0091      	lsls	r1, r2, #2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	041a      	lsls	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4413      	add	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029e8:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	0091      	lsls	r1, r2, #2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a02:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0a:	041a      	lsls	r2, r3, #16
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	0091      	lsls	r1, r2, #2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4413      	add	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002a5c:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	0091      	lsls	r1, r2, #2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a76:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	041a      	lsls	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	4413      	add	r3, r2
 8002a94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	0091      	lsls	r1, r2, #2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ab8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	041a      	lsls	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ad4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002adc:	061a      	lsls	r2, r3, #24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002aee:	4413      	add	r3, r2
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	441a      	add	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	441a      	add	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	441a      	add	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d915      	bls.n	8002be4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002bb8:	e006      	b.n	8002bc8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002bba:	bf00      	nop
 8002bbc:	ffff0003 	.word	0xffff0003
 8002bc0:	10002b00 	.word	0x10002b00
 8002bc4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e010      	b.n	8002c06 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e005      	b.n	8002bf8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3f3      	bcc.n	8002bec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c22:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <HAL_GPIO_Init+0x234>)
 8002c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c26:	e194      	b.n	8002f52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8186 	beq.w	8002f4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d005      	beq.n	8002c58 <HAL_GPIO_Init+0x44>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d130      	bne.n	8002cba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0201 	and.w	r2, r3, #1
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d017      	beq.n	8002cf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d123      	bne.n	8002d4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	69b9      	ldr	r1, [r7, #24]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80e0 	beq.w	8002f4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_GPIO_Init+0x238>)
 8002d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d92:	4a2e      	ldr	r2, [pc, #184]	; (8002e4c <HAL_GPIO_Init+0x238>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_GPIO_Init+0x238>)
 8002d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_GPIO_Init+0x23c>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <HAL_GPIO_Init+0x240>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d052      	beq.n	8002e7c <HAL_GPIO_Init+0x268>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_GPIO_Init+0x244>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_GPIO_Init+0x22e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_GPIO_Init+0x248>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x22a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x24c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x226>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <HAL_GPIO_Init+0x250>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x222>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <HAL_GPIO_Init+0x254>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x21e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <HAL_GPIO_Init+0x258>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x21a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_GPIO_Init+0x25c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x216>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_GPIO_Init+0x260>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x212>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_GPIO_Init+0x264>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x20e>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e02d      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e02b      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e26:	2308      	movs	r3, #8
 8002e28:	e029      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e027      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e025      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e023      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e021      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e01f      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e01d      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e01b      	b.n	8002e7e <HAL_GPIO_Init+0x26a>
 8002e46:	bf00      	nop
 8002e48:	58000080 	.word	0x58000080
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	58000400 	.word	0x58000400
 8002e54:	58020000 	.word	0x58020000
 8002e58:	58020400 	.word	0x58020400
 8002e5c:	58020800 	.word	0x58020800
 8002e60:	58020c00 	.word	0x58020c00
 8002e64:	58021000 	.word	0x58021000
 8002e68:	58021400 	.word	0x58021400
 8002e6c:	58021800 	.word	0x58021800
 8002e70:	58021c00 	.word	0x58021c00
 8002e74:	58022000 	.word	0x58022000
 8002e78:	58022400 	.word	0x58022400
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	f002 0203 	and.w	r2, r2, #3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4093      	lsls	r3, r2
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e8e:	4938      	ldr	r1, [pc, #224]	; (8002f70 <HAL_GPIO_Init+0x35c>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f47f ae63 	bne.w	8002c28 <HAL_GPIO_Init+0x14>
  }
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	3724      	adds	r7, #36	; 0x24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	58000400 	.word	0x58000400

08002f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <HAL_HSEM_FastTake+0x2c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3320      	adds	r3, #32
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_HSEM_FastTake+0x30>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	58026400 	.word	0x58026400
 8002fa4:	80000300 	.word	0x80000300

08002fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002fb2:	4906      	ldr	r1, [pc, #24]	; (8002fcc <HAL_HSEM_Release+0x24>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	58026400 	.word	0x58026400

08002fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b08f      	sub	sp, #60	; 0x3c
 8002fd4:	af0a      	add	r7, sp, #40	; 0x28
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e116      	b.n	8003210 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fe f89f 	bl	8001140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fe1d 	bl	8006c60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	687e      	ldr	r6, [r7, #4]
 800302e:	466d      	mov	r5, sp
 8003030:	f106 0410 	add.w	r4, r6, #16
 8003034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003040:	e885 0003 	stmia.w	r5, {r0, r1}
 8003044:	1d33      	adds	r3, r6, #4
 8003046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003048:	6838      	ldr	r0, [r7, #0]
 800304a:	f003 fd9b 	bl	8006b84 <USB_CoreInit>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0d7      	b.n	8003210 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fe0b 	bl	8006c82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e04a      	b.n	8003108 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	333d      	adds	r3, #61	; 0x3d
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	333c      	adds	r3, #60	; 0x3c
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	b298      	uxth	r0, r3
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3344      	adds	r3, #68	; 0x44
 80030ae:	4602      	mov	r2, r0
 80030b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3340      	adds	r3, #64	; 0x40
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3348      	adds	r3, #72	; 0x48
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	; 0x4c
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3354      	adds	r3, #84	; 0x54
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3301      	adds	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d3af      	bcc.n	8003072 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e044      	b.n	80031a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	3301      	adds	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d3b5      	bcc.n	8003118 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	687e      	ldr	r6, [r7, #4]
 80031b4:	466d      	mov	r5, sp
 80031b6:	f106 0410 	add.w	r4, r6, #16
 80031ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ca:	1d33      	adds	r3, r6, #4
 80031cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	f003 fda4 	bl	8006d1c <USB_DevInit>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e014      	b.n	8003210 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f80a 	bl	8003218 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 ff62 	bl	80070d2 <USB_DevDisconnect>

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003218 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_PCDEx_ActivateLPM+0x44>)
 8003248:	4313      	orrs	r3, r2
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	10000003 	.word	0x10000003

08003260 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_PWREx_ConfigSupply+0xb0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	2b06      	cmp	r3, #6
 8003272:	d00a      	beq.n	800328a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003274:	4b26      	ldr	r3, [pc, #152]	; (8003310 <HAL_PWREx_ConfigSupply+0xb0>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e040      	b.n	8003308 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e03e      	b.n	8003308 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_PWREx_ConfigSupply+0xb0>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003292:	491f      	ldr	r1, [pc, #124]	; (8003310 <HAL_PWREx_ConfigSupply+0xb0>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4313      	orrs	r3, r2
 8003298:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800329a:	f7fe f949 	bl	8001530 <HAL_GetTick>
 800329e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032a0:	e009      	b.n	80032b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032a2:	f7fe f945 	bl	8001530 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b0:	d901      	bls.n	80032b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e028      	b.n	8003308 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <HAL_PWREx_ConfigSupply+0xb0>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	d1ee      	bne.n	80032a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b1e      	cmp	r3, #30
 80032c8:	d008      	beq.n	80032dc <HAL_PWREx_ConfigSupply+0x7c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b2e      	cmp	r3, #46	; 0x2e
 80032ce:	d005      	beq.n	80032dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b1d      	cmp	r3, #29
 80032d4:	d002      	beq.n	80032dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b2d      	cmp	r3, #45	; 0x2d
 80032da:	d114      	bne.n	8003306 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032dc:	f7fe f928 	bl	8001530 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032e2:	e009      	b.n	80032f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032e4:	f7fe f924 	bl	8001530 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f2:	d901      	bls.n	80032f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWREx_ConfigSupply+0xb0>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d1ee      	bne.n	80032e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	58024800 	.word	0x58024800

08003314 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	58024800 	.word	0x58024800

08003334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f000 bc1d 	b.w	8003b82 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8087 	beq.w	8003464 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003356:	4b99      	ldr	r3, [pc, #612]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003360:	4b96      	ldr	r3, [pc, #600]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2b10      	cmp	r3, #16
 800336a:	d007      	beq.n	800337c <HAL_RCC_OscConfig+0x48>
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b18      	cmp	r3, #24
 8003370:	d110      	bne.n	8003394 <HAL_RCC_OscConfig+0x60>
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d10b      	bne.n	8003394 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d06c      	beq.n	8003462 <HAL_RCC_OscConfig+0x12e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d168      	bne.n	8003462 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e3f6      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d106      	bne.n	80033ac <HAL_RCC_OscConfig+0x78>
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a86      	ldr	r2, [pc, #536]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e02e      	b.n	800340a <HAL_RCC_OscConfig+0xd6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10c      	bne.n	80033ce <HAL_RCC_OscConfig+0x9a>
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a80      	ldr	r2, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7d      	ldr	r2, [pc, #500]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e01d      	b.n	800340a <HAL_RCC_OscConfig+0xd6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0xbe>
 80033d8:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a77      	ldr	r2, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a74      	ldr	r2, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0xd6>
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe f88d 	bl	8001530 <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341a:	f7fe f889 	bl	8001530 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b64      	cmp	r3, #100	; 0x64
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e3aa      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342c:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0xe6>
 8003438:	e014      	b.n	8003464 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe f879 	bl	8001530 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003442:	f7fe f875 	bl	8001530 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b64      	cmp	r3, #100	; 0x64
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e396      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003454:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x10e>
 8003460:	e000      	b.n	8003464 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003462:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80cb 	beq.w	8003608 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003472:	4b52      	ldr	r3, [pc, #328]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800347a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_RCC_OscConfig+0x164>
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	2b18      	cmp	r3, #24
 800348c:	d156      	bne.n	800353c <HAL_RCC_OscConfig+0x208>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d151      	bne.n	800353c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003498:	4b48      	ldr	r3, [pc, #288]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x17c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e368      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034b0:	4b42      	ldr	r3, [pc, #264]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 0219 	bic.w	r2, r3, #25
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	493f      	ldr	r1, [pc, #252]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c2:	f7fe f835 	bl	8001530 <HAL_GetTick>
 80034c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe f831 	bl	8001530 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e352      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	f7fe f852 	bl	8001590 <HAL_GetREVID>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d817      	bhi.n	8003526 <HAL_RCC_OscConfig+0x1f2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d108      	bne.n	8003510 <HAL_RCC_OscConfig+0x1dc>
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003506:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350e:	e07b      	b.n	8003608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	031b      	lsls	r3, r3, #12
 800351e:	4927      	ldr	r1, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	e070      	b.n	8003608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	4921      	ldr	r1, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800353a:	e065      	b.n	8003608 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d048      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 0219 	bic.w	r2, r3, #25
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	491a      	ldr	r1, [pc, #104]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd ffeb 	bl	8001530 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7fd ffe7 	bl	8001530 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e308      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	f7fe f808 	bl	8001590 <HAL_GetREVID>
 8003580:	4603      	mov	r3, r0
 8003582:	f241 0203 	movw	r2, #4099	; 0x1003
 8003586:	4293      	cmp	r3, r2
 8003588:	d81a      	bhi.n	80035c0 <HAL_RCC_OscConfig+0x28c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d108      	bne.n	80035a4 <HAL_RCC_OscConfig+0x270>
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 800359c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a0:	6053      	str	r3, [r2, #4]
 80035a2:	e031      	b.n	8003608 <HAL_RCC_OscConfig+0x2d4>
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	4902      	ldr	r1, [pc, #8]	; (80035bc <HAL_RCC_OscConfig+0x288>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
 80035b8:	e026      	b.n	8003608 <HAL_RCC_OscConfig+0x2d4>
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	4b9a      	ldr	r3, [pc, #616]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	4997      	ldr	r1, [pc, #604]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
 80035d4:	e018      	b.n	8003608 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d6:	4b95      	ldr	r3, [pc, #596]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a94      	ldr	r2, [pc, #592]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd ffa5 	bl	8001530 <HAL_GetTick>
 80035e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ea:	f7fd ffa1 	bl	8001530 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e2c2      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035fc:	4b8b      	ldr	r3, [pc, #556]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a9 	beq.w	8003768 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003616:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003620:	4b82      	ldr	r3, [pc, #520]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d007      	beq.n	800363c <HAL_RCC_OscConfig+0x308>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b18      	cmp	r3, #24
 8003630:	d13a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x374>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d135      	bne.n	80036a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800363c:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x320>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e296      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003654:	f7fd ff9c 	bl	8001590 <HAL_GetREVID>
 8003658:	4603      	mov	r3, r0
 800365a:	f241 0203 	movw	r2, #4099	; 0x1003
 800365e:	4293      	cmp	r3, r2
 8003660:	d817      	bhi.n	8003692 <HAL_RCC_OscConfig+0x35e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	2b20      	cmp	r3, #32
 8003668:	d108      	bne.n	800367c <HAL_RCC_OscConfig+0x348>
 800366a:	4b70      	ldr	r3, [pc, #448]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003672:	4a6e      	ldr	r2, [pc, #440]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003678:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800367a:	e075      	b.n	8003768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367c:	4b6b      	ldr	r3, [pc, #428]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	069b      	lsls	r3, r3, #26
 800368a:	4968      	ldr	r1, [pc, #416]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003690:	e06a      	b.n	8003768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003692:	4b66      	ldr	r3, [pc, #408]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	061b      	lsls	r3, r3, #24
 80036a0:	4962      	ldr	r1, [pc, #392]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036a6:	e05f      	b.n	8003768 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d042      	beq.n	8003736 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036b0:	4b5e      	ldr	r3, [pc, #376]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a5d      	ldr	r2, [pc, #372]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80036b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd ff38 	bl	8001530 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036c4:	f7fd ff34 	bl	8001530 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e255      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036e2:	f7fd ff55 	bl	8001590 <HAL_GetREVID>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d817      	bhi.n	8003720 <HAL_RCC_OscConfig+0x3ec>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d108      	bne.n	800370a <HAL_RCC_OscConfig+0x3d6>
 80036f8:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003706:	6053      	str	r3, [r2, #4]
 8003708:	e02e      	b.n	8003768 <HAL_RCC_OscConfig+0x434>
 800370a:	4b48      	ldr	r3, [pc, #288]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	069b      	lsls	r3, r3, #26
 8003718:	4944      	ldr	r1, [pc, #272]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	e023      	b.n	8003768 <HAL_RCC_OscConfig+0x434>
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	493f      	ldr	r1, [pc, #252]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
 8003734:	e018      	b.n	8003768 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800373c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fef5 	bl	8001530 <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800374a:	f7fd fef1 	bl	8001530 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e212      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800375c:	4b33      	ldr	r3, [pc, #204]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d036      	beq.n	80037e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d019      	beq.n	80037b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	4a2a      	ldr	r2, [pc, #168]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fd fed2 	bl	8001530 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003790:	f7fd fece 	bl	8001530 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1ef      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x45c>
 80037ae:	e018      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b0:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fd feb8 	bl	8001530 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fd feb4 	bl	8001530 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1d5      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d039      	beq.n	8003862 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01c      	beq.n	8003830 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80037fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003802:	f7fd fe95 	bl	8001530 <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800380a:	f7fd fe91 	bl	8001530 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1b2      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x4d6>
 8003828:	e01b      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003830:	4b9b      	ldr	r3, [pc, #620]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a9a      	ldr	r2, [pc, #616]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800383a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800383c:	f7fd fe78 	bl	8001530 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003844:	f7fd fe74 	bl	8001530 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e195      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003856:	4b92      	ldr	r3, [pc, #584]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8081 	beq.w	8003972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003870:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <HAL_RCC_OscConfig+0x770>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a8b      	ldr	r2, [pc, #556]	; (8003aa4 <HAL_RCC_OscConfig+0x770>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800387c:	f7fd fe58 	bl	8001530 <HAL_GetTick>
 8003880:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7fd fe54 	bl	8001530 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e175      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003896:	4b83      	ldr	r3, [pc, #524]	; (8003aa4 <HAL_RCC_OscConfig+0x770>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x584>
 80038aa:	4b7d      	ldr	r3, [pc, #500]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a7c      	ldr	r2, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	e02d      	b.n	8003914 <HAL_RCC_OscConfig+0x5e0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10c      	bne.n	80038da <HAL_RCC_OscConfig+0x5a6>
 80038c0:	4b77      	ldr	r3, [pc, #476]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a76      	ldr	r2, [pc, #472]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
 80038cc:	4b74      	ldr	r3, [pc, #464]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a73      	ldr	r2, [pc, #460]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038d2:	f023 0304 	bic.w	r3, r3, #4
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x5e0>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c8>
 80038e2:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a6e      	ldr	r2, [pc, #440]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	4b6c      	ldr	r3, [pc, #432]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a6b      	ldr	r2, [pc, #428]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0x5e0>
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a67      	ldr	r2, [pc, #412]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a64      	ldr	r2, [pc, #400]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fd fe08 	bl	8001530 <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fd fe04 	bl	8001530 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e123      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800393a:	4b59      	ldr	r3, [pc, #356]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0ee      	beq.n	8003924 <HAL_RCC_OscConfig+0x5f0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fd fdf2 	bl	8001530 <HAL_GetTick>
 800394c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fd fdee 	bl	8001530 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e10d      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003966:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ee      	bne.n	8003950 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8102 	beq.w	8003b80 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800397c:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003984:	2b18      	cmp	r3, #24
 8003986:	f000 80bd 	beq.w	8003b04 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b02      	cmp	r3, #2
 8003990:	f040 809e 	bne.w	8003ad0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 800399a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fdc6 	bl	8001530 <HAL_GetTick>
 80039a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fd fdc2 	bl	8001530 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0e3      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x774>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039d6:	0112      	lsls	r2, r2, #4
 80039d8:	430a      	orrs	r2, r1
 80039da:	4931      	ldr	r1, [pc, #196]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	628b      	str	r3, [r1, #40]	; 0x28
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	3b01      	subs	r3, #1
 80039e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	3b01      	subs	r3, #1
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	3b01      	subs	r3, #1
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a10:	4923      	ldr	r1, [pc, #140]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCC_OscConfig+0x778>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a2e:	00d2      	lsls	r2, r2, #3
 8003a30:	491b      	ldr	r1, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	f023 020c 	bic.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4917      	ldr	r1, [pc, #92]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a48:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f023 0202 	bic.w	r2, r3, #2
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	4912      	ldr	r1, [pc, #72]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_RCC_OscConfig+0x76c>)
 8003a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fd fd4b 	bl	8001530 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a9c:	e011      	b.n	8003ac2 <HAL_RCC_OscConfig+0x78e>
 8003a9e:	bf00      	nop
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	58024800 	.word	0x58024800
 8003aa8:	fffffc0c 	.word	0xfffffc0c
 8003aac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fd3e 	bl	8001530 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e05f      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCC_OscConfig+0x858>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x77c>
 8003ace:	e057      	b.n	8003b80 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <HAL_RCC_OscConfig+0x858>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <HAL_RCC_OscConfig+0x858>)
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fd28 	bl	8001530 <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd fd24 	bl	8001530 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e045      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af6:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_OscConfig+0x858>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x7b0>
 8003b02:	e03d      	b.n	8003b80 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_RCC_OscConfig+0x858>)
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_OscConfig+0x858>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d031      	beq.n	8003b7c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d12a      	bne.n	8003b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d122      	bne.n	8003b7c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d11a      	bne.n	8003b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0a5b      	lsrs	r3, r3, #9
 8003b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d111      	bne.n	8003b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d108      	bne.n	8003b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3730      	adds	r7, #48	; 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	58024400 	.word	0x58024400

08003b90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e19c      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 020f 	bic.w	r2, r3, #15
 8003bba:	4985      	ldr	r1, [pc, #532]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e184      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d908      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bf0:	4b78      	ldr	r3, [pc, #480]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	4975      	ldr	r1, [pc, #468]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d908      	bls.n	8003c30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	496a      	ldr	r1, [pc, #424]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d010      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	4b64      	ldr	r3, [pc, #400]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d908      	bls.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c4c:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	495e      	ldr	r1, [pc, #376]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d010      	beq.n	8003c8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d908      	bls.n	8003c8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c7a:	4b56      	ldr	r3, [pc, #344]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4953      	ldr	r1, [pc, #332]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d010      	beq.n	8003cba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d908      	bls.n	8003cba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f023 020f 	bic.w	r2, r3, #15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4947      	ldr	r1, [pc, #284]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d055      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cc6:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4940      	ldr	r1, [pc, #256]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d121      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0f6      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf8:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d115      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0ea      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0de      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d20:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0d6      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f023 0207 	bic.w	r2, r3, #7
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d42:	f7fd fbf5 	bl	8001530 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4a:	f7fd fbf1 	bl	8001530 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0be      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d60:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d1eb      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d010      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d208      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f023 020f 	bic.w	r2, r3, #15
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_RCC_ClockConfig+0x244>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d214      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	4906      	ldr	r1, [pc, #24]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_RCC_ClockConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e086      	b.n	8003ede <HAL_RCC_ClockConfig+0x34e>
 8003dd0:	52002000 	.word	0x52002000
 8003dd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d208      	bcs.n	8003e06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	4939      	ldr	r1, [pc, #228]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d208      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	492e      	ldr	r1, [pc, #184]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d208      	bcs.n	8003e62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4922      	ldr	r1, [pc, #136]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d010      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d208      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4917      	ldr	r1, [pc, #92]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e90:	f000 f834 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	4912      	ldr	r1, [pc, #72]	; (8003eec <HAL_RCC_ClockConfig+0x35c>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_RCC_ClockConfig+0x358>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <HAL_RCC_ClockConfig+0x35c>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x360>)
 8003ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x364>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x368>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fae2 	bl	800149c <HAL_InitTick>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	08008288 	.word	0x08008288
 8003ef0:	24000004 	.word	0x24000004
 8003ef4:	24000000 	.word	0x24000000
 8003ef8:	24000008 	.word	0x24000008

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f02:	4bb3      	ldr	r3, [pc, #716]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f0a:	2b18      	cmp	r3, #24
 8003f0c:	f200 8155 	bhi.w	80041ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f7d 	.word	0x08003f7d
 8003f1c:	080041bb 	.word	0x080041bb
 8003f20:	080041bb 	.word	0x080041bb
 8003f24:	080041bb 	.word	0x080041bb
 8003f28:	080041bb 	.word	0x080041bb
 8003f2c:	080041bb 	.word	0x080041bb
 8003f30:	080041bb 	.word	0x080041bb
 8003f34:	080041bb 	.word	0x080041bb
 8003f38:	08003fa3 	.word	0x08003fa3
 8003f3c:	080041bb 	.word	0x080041bb
 8003f40:	080041bb 	.word	0x080041bb
 8003f44:	080041bb 	.word	0x080041bb
 8003f48:	080041bb 	.word	0x080041bb
 8003f4c:	080041bb 	.word	0x080041bb
 8003f50:	080041bb 	.word	0x080041bb
 8003f54:	080041bb 	.word	0x080041bb
 8003f58:	08003fa9 	.word	0x08003fa9
 8003f5c:	080041bb 	.word	0x080041bb
 8003f60:	080041bb 	.word	0x080041bb
 8003f64:	080041bb 	.word	0x080041bb
 8003f68:	080041bb 	.word	0x080041bb
 8003f6c:	080041bb 	.word	0x080041bb
 8003f70:	080041bb 	.word	0x080041bb
 8003f74:	080041bb 	.word	0x080041bb
 8003f78:	08003faf 	.word	0x08003faf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f7c:	4b94      	ldr	r3, [pc, #592]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f88:	4b91      	ldr	r3, [pc, #580]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	08db      	lsrs	r3, r3, #3
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	4a90      	ldr	r2, [pc, #576]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f9a:	e111      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f9c:	4b8d      	ldr	r3, [pc, #564]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f9e:	61bb      	str	r3, [r7, #24]
    break;
 8003fa0:	e10e      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fa2:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fa4:	61bb      	str	r3, [r7, #24]
    break;
 8003fa6:	e10b      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fa8:	4b8c      	ldr	r3, [pc, #560]	; (80041dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003faa:	61bb      	str	r3, [r7, #24]
    break;
 8003fac:	e108      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fae:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fb8:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fc4:	4b82      	ldr	r3, [pc, #520]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003fce:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	08db      	lsrs	r3, r3, #3
 8003fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80e1 	beq.w	80041b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	f000 8083 	beq.w	8004100 <HAL_RCC_GetSysClockFreq+0x204>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	f200 80a1 	bhi.w	8004144 <HAL_RCC_GetSysClockFreq+0x248>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x114>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d056      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800400e:	e099      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004010:	4b6f      	ldr	r3, [pc, #444]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02d      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800401c:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	4a6b      	ldr	r2, [pc, #428]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
 800402c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004046:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004056:	ed97 6a02 	vldr	s12, [r7, #8]
 800405a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800405e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800406a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004076:	e087      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a02 	vldr	s12, [r7, #8]
 800409e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ba:	e065      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ce:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fe:	e043      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a02 	vldr	s12, [r7, #8]
 8004126:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004142:	e021      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a02 	vldr	s12, [r7, #8]
 800416a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004186:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	0a5b      	lsrs	r3, r3, #9
 800418e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004192:	3301      	adds	r3, #1
 8004194:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ac:	ee17 3a90 	vmov	r3, s15
 80041b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041b2:	e005      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041bc:	61bb      	str	r3, [r7, #24]
    break;
 80041be:	bf00      	nop
  }

  return sysclockfreq;
 80041c0:	69bb      	ldr	r3, [r7, #24]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	03d09000 	.word	0x03d09000
 80041d8:	003d0900 	.word	0x003d0900
 80041dc:	007a1200 	.word	0x007a1200
 80041e0:	46000000 	.word	0x46000000
 80041e4:	4c742400 	.word	0x4c742400
 80041e8:	4a742400 	.word	0x4a742400
 80041ec:	4af42400 	.word	0x4af42400

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041f6:	f7ff fe81 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_RCC_GetHCLKFreq+0x50>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490f      	ldr	r1, [pc, #60]	; (8004244 <HAL_RCC_GetHCLKFreq+0x54>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCC_GetHCLKFreq+0x50>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_GetHCLKFreq+0x54>)
 800421e:	5cd3      	ldrb	r3, [r2, r3]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_RCC_GetHCLKFreq+0x58>)
 800422c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800422e:	4a07      	ldr	r2, [pc, #28]	; (800424c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_RCC_GetHCLKFreq+0x58>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	58024400 	.word	0x58024400
 8004244:	08008288 	.word	0x08008288
 8004248:	24000004 	.word	0x24000004
 800424c:	24000000 	.word	0x24000000

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004254:	f7ff ffcc 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400
 8004278:	08008288 	.word	0x08008288

0800427c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004280:	f7ff ffb6 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4904      	ldr	r1, [pc, #16]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	58024400 	.word	0x58024400
 80042a4:	08008288 	.word	0x08008288

080042a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042b4:	2300      	movs	r3, #0
 80042b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d03f      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042cc:	d02a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042d2:	d824      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042d8:	d018      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042de:	d81e      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e8:	d007      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042ea:	e018      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ec:	4ba3      	ldr	r3, [pc, #652]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4aa2      	ldr	r2, [pc, #648]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042f8:	e015      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2102      	movs	r1, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f001 f9d5 	bl	80056b0 <RCCEx_PLL2_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800430a:	e00c      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3324      	adds	r3, #36	; 0x24
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fa7e 	bl	8005814 <RCCEx_PLL3_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800431c:	e003      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
      break;
 8004322:	e000      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800432c:	4b93      	ldr	r3, [pc, #588]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004338:	4990      	ldr	r1, [pc, #576]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	650b      	str	r3, [r1, #80]	; 0x50
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d03d      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	2b04      	cmp	r3, #4
 8004356:	d826      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004375 	.word	0x08004375
 8004364:	08004383 	.word	0x08004383
 8004368:	08004395 	.word	0x08004395
 800436c:	080043ad 	.word	0x080043ad
 8004370:	080043ad 	.word	0x080043ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004374:	4b81      	ldr	r3, [pc, #516]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a80      	ldr	r2, [pc, #512]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004380:	e015      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f991 	bl	80056b0 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004392:	e00c      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3324      	adds	r3, #36	; 0x24
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fa3a 	bl	8005814 <RCCEx_PLL3_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
      break;
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80043ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b4:	4b71      	ldr	r3, [pc, #452]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b8:	f023 0207 	bic.w	r2, r3, #7
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	496e      	ldr	r1, [pc, #440]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	650b      	str	r3, [r1, #80]	; 0x50
 80043c6:	e001      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d042      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e0:	d02b      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d825      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80043e8:	2bc0      	cmp	r3, #192	; 0xc0
 80043ea:	d028      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043ec:	2bc0      	cmp	r3, #192	; 0xc0
 80043ee:	d821      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d016      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d81d      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d007      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004400:	e018      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004402:	4b5e      	ldr	r3, [pc, #376]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a5d      	ldr	r2, [pc, #372]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800440e:	e017      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f94a 	bl	80056b0 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004420:	e00e      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3324      	adds	r3, #36	; 0x24
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f9f3 	bl	8005814 <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004432:	e005      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
      break;
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800443e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004446:	4b4d      	ldr	r3, [pc, #308]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	494a      	ldr	r1, [pc, #296]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	650b      	str	r3, [r1, #80]	; 0x50
 8004458:	e001      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d049      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004474:	d030      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800447a:	d82a      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800447c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004480:	d02c      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004482:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004486:	d824      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448c:	d018      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800448e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004492:	d81e      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d007      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800449e:	e018      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4a35      	ldr	r2, [pc, #212]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044ac:	e017      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f8fb 	bl	80056b0 <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044be:	e00e      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3324      	adds	r3, #36	; 0x24
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 f9a4 	bl	8005814 <RCCEx_PLL3_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044d0:	e005      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80044d8:	bf00      	nop
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80044dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f2:	4922      	ldr	r1, [pc, #136]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	658b      	str	r3, [r1, #88]	; 0x58
 80044f8:	e001      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04b      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004514:	d030      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451a:	d82a      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800451c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004520:	d02e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004522:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004526:	d824      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800452c:	d018      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800452e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004532:	d81e      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453c:	d007      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800453e:	e018      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4a0d      	ldr	r2, [pc, #52]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800454c:	e019      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f8ab 	bl	80056b0 <RCCEx_PLL2_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800455e:	e010      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f954 	bl	8005814 <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004570:	e007      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
      break;
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800457c:	58024400 	.word	0x58024400
      break;
 8004580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004588:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004596:	4996      	ldr	r1, [pc, #600]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004598:	4313      	orrs	r3, r2
 800459a:	658b      	str	r3, [r1, #88]	; 0x58
 800459c:	e001      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d032      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b2:	2b30      	cmp	r3, #48	; 0x30
 80045b4:	d01c      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80045b6:	2b30      	cmp	r3, #48	; 0x30
 80045b8:	d817      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d00c      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d813      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d10f      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ca:	4b89      	ldr	r3, [pc, #548]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	4a88      	ldr	r2, [pc, #544]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80045d6:	e00e      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f866 	bl	80056b0 <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80045e8:	e005      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80045f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045fc:	4b7c      	ldr	r3, [pc, #496]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	4979      	ldr	r1, [pc, #484]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800460a:	4313      	orrs	r3, r2
 800460c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d047      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004628:	d030      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800462a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800462e:	d82a      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004630:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004634:	d02c      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800463a:	d824      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004640:	d018      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	d81e      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d007      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004652:	e018      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004654:	4b66      	ldr	r3, [pc, #408]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4a65      	ldr	r2, [pc, #404]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004660:	e017      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f001 f821 	bl	80056b0 <RCCEx_PLL2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004672:	e00e      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3324      	adds	r3, #36	; 0x24
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f001 f8ca 	bl	8005814 <RCCEx_PLL3_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004684:	e005      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
      break;
 800468a:	e002      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004698:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	4952      	ldr	r1, [pc, #328]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	650b      	str	r3, [r1, #80]	; 0x50
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d049      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c4:	d02e      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80046c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ca:	d828      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80046cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d0:	d02a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80046d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d6:	d822      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80046d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046dc:	d026      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80046de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046e2:	d81c      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80046e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e8:	d010      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x464>
 80046ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ee:	d816      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01d      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d111      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	2101      	movs	r1, #1
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ffd5 	bl	80056b0 <RCCEx_PLL2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800470a:	e012      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3324      	adds	r3, #36	; 0x24
 8004710:	2101      	movs	r1, #1
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f87e 	bl	8005814 <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800471c:	e009      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
      break;
 8004722:	e006      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004724:	bf00      	nop
 8004726:	e004      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004728:	bf00      	nop
 800472a:	e002      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004738:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	492a      	ldr	r1, [pc, #168]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004746:	4313      	orrs	r3, r2
 8004748:	650b      	str	r3, [r1, #80]	; 0x50
 800474a:	e001      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d04d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004766:	d02e      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800476c:	d828      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d02a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d822      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800477a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800477e:	d026      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004784:	d81c      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478a:	d010      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004790:	d816      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01d      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d111      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 ff84 	bl	80056b0 <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047ac:	e012      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f82d 	bl	8005814 <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047be:	e009      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	e006      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80047c6:	bf00      	nop
 80047c8:	e004      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80047ca:	bf00      	nop
 80047cc:	e002      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80047d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047e8:	4901      	ldr	r1, [pc, #4]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	658b      	str	r3, [r1, #88]	; 0x58
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80047f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02f      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800480c:	d00e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800480e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004812:	d814      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d015      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800481c:	d10f      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481e:	4baf      	ldr	r3, [pc, #700]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4aae      	ldr	r2, [pc, #696]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800482a:	e00c      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f000 ff3c 	bl	80056b0 <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	75fb      	strb	r3, [r7, #23]
      break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800484c:	4ba3      	ldr	r3, [pc, #652]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004858:	49a0      	ldr	r1, [pc, #640]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800485a:	4313      	orrs	r3, r2
 800485c:	650b      	str	r3, [r1, #80]	; 0x50
 800485e:	e001      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d032      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	2b03      	cmp	r3, #3
 8004876:	d81b      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048b7 	.word	0x080048b7
 8004884:	08004891 	.word	0x08004891
 8004888:	0800489f 	.word	0x0800489f
 800488c:	080048b7 	.word	0x080048b7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004890:	4b92      	ldr	r3, [pc, #584]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4a91      	ldr	r2, [pc, #580]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 ff03 	bl	80056b0 <RCCEx_PLL2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
      break;
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80048b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048be:	4b87      	ldr	r3, [pc, #540]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	4984      	ldr	r1, [pc, #528]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048d0:	e001      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8086 	beq.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e4:	4b7e      	ldr	r3, [pc, #504]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7d      	ldr	r2, [pc, #500]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048f0:	f7fc fe1e 	bl	8001530 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048f6:	e009      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f8:	f7fc fe1a 	bl	8001530 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d902      	bls.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	75fb      	strb	r3, [r7, #23]
        break;
 800490a:	e005      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800490c:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ef      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d166      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800491e:	4b6f      	ldr	r3, [pc, #444]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004928:	4053      	eors	r3, r2
 800492a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d013      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004932:	4b6a      	ldr	r3, [pc, #424]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800493c:	4b67      	ldr	r3, [pc, #412]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a66      	ldr	r2, [pc, #408]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004948:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a63      	ldr	r2, [pc, #396]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800494e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004954:	4a61      	ldr	r2, [pc, #388]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d115      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fc fde3 	bl	8001530 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496c:	e00b      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fc fddf 	bl	8001530 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	; 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d902      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	75fb      	strb	r3, [r7, #23]
            break;
 8004984:	e005      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004986:	4b55      	ldr	r3, [pc, #340]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ed      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d126      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a6:	d10d      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80049a8:	4b4c      	ldr	r3, [pc, #304]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049b6:	0919      	lsrs	r1, r3, #4
 80049b8:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80049ba:	400b      	ands	r3, r1
 80049bc:	4947      	ldr	r1, [pc, #284]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	610b      	str	r3, [r1, #16]
 80049c2:	e005      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80049c4:	4b45      	ldr	r3, [pc, #276]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	4a44      	ldr	r2, [pc, #272]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049ce:	6113      	str	r3, [r2, #16]
 80049d0:	4b42      	ldr	r3, [pc, #264]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049de:	493f      	ldr	r1, [pc, #252]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	670b      	str	r3, [r1, #112]	; 0x70
 80049e4:	e004      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	75bb      	strb	r3, [r7, #22]
 80049ea:	e001      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8085 	beq.w	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a02:	2b28      	cmp	r3, #40	; 0x28
 8004a04:	d866      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004ae9 	.word	0x08004ae9
 8004a10:	08004ad5 	.word	0x08004ad5
 8004a14:	08004ad5 	.word	0x08004ad5
 8004a18:	08004ad5 	.word	0x08004ad5
 8004a1c:	08004ad5 	.word	0x08004ad5
 8004a20:	08004ad5 	.word	0x08004ad5
 8004a24:	08004ad5 	.word	0x08004ad5
 8004a28:	08004ad5 	.word	0x08004ad5
 8004a2c:	08004ab1 	.word	0x08004ab1
 8004a30:	08004ad5 	.word	0x08004ad5
 8004a34:	08004ad5 	.word	0x08004ad5
 8004a38:	08004ad5 	.word	0x08004ad5
 8004a3c:	08004ad5 	.word	0x08004ad5
 8004a40:	08004ad5 	.word	0x08004ad5
 8004a44:	08004ad5 	.word	0x08004ad5
 8004a48:	08004ad5 	.word	0x08004ad5
 8004a4c:	08004ac3 	.word	0x08004ac3
 8004a50:	08004ad5 	.word	0x08004ad5
 8004a54:	08004ad5 	.word	0x08004ad5
 8004a58:	08004ad5 	.word	0x08004ad5
 8004a5c:	08004ad5 	.word	0x08004ad5
 8004a60:	08004ad5 	.word	0x08004ad5
 8004a64:	08004ad5 	.word	0x08004ad5
 8004a68:	08004ad5 	.word	0x08004ad5
 8004a6c:	08004ae9 	.word	0x08004ae9
 8004a70:	08004ad5 	.word	0x08004ad5
 8004a74:	08004ad5 	.word	0x08004ad5
 8004a78:	08004ad5 	.word	0x08004ad5
 8004a7c:	08004ad5 	.word	0x08004ad5
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004ad5 	.word	0x08004ad5
 8004a88:	08004ad5 	.word	0x08004ad5
 8004a8c:	08004ae9 	.word	0x08004ae9
 8004a90:	08004ad5 	.word	0x08004ad5
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004ad5 	.word	0x08004ad5
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004ad5 	.word	0x08004ad5
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004ae9 	.word	0x08004ae9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fdfa 	bl	80056b0 <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ac0:	e013      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3324      	adds	r3, #36	; 0x24
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fea3 	bl	8005814 <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ad2:	e00a      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad8:	e007      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	58024800 	.word	0x58024800
 8004ae4:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004af0:	4b96      	ldr	r3, [pc, #600]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afc:	4993      	ldr	r1, [pc, #588]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	654b      	str	r3, [r1, #84]	; 0x54
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d038      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	2b05      	cmp	r3, #5
 8004b1a:	d821      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b67 	.word	0x08004b67
 8004b28:	08004b3d 	.word	0x08004b3d
 8004b2c:	08004b4f 	.word	0x08004b4f
 8004b30:	08004b67 	.word	0x08004b67
 8004b34:	08004b67 	.word	0x08004b67
 8004b38:	08004b67 	.word	0x08004b67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fdb4 	bl	80056b0 <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b4c:	e00c      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3324      	adds	r3, #36	; 0x24
 8004b52:	2101      	movs	r1, #1
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fe5d 	bl	8005814 <RCCEx_PLL3_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	75fb      	strb	r3, [r7, #23]
      break;
 8004b64:	e000      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b6e:	4b77      	ldr	r3, [pc, #476]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f023 0207 	bic.w	r2, r3, #7
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7a:	4974      	ldr	r1, [pc, #464]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b80:	e001      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d03a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	2b05      	cmp	r3, #5
 8004b9a:	d821      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004be7 	.word	0x08004be7
 8004ba8:	08004bbd 	.word	0x08004bbd
 8004bac:	08004bcf 	.word	0x08004bcf
 8004bb0:	08004be7 	.word	0x08004be7
 8004bb4:	08004be7 	.word	0x08004be7
 8004bb8:	08004be7 	.word	0x08004be7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fd74 	bl	80056b0 <RCCEx_PLL2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004bcc:	e00c      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3324      	adds	r3, #36	; 0x24
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fe1d 	bl	8005814 <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004bde:	e003      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bee:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f023 0207 	bic.w	r2, r3, #7
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	4953      	ldr	r1, [pc, #332]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	658b      	str	r3, [r1, #88]	; 0x58
 8004c02:	e001      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d04b      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c1e:	d02e      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c24:	d828      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d02a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d822      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c36:	d026      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c3c:	d81c      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c42:	d010      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c48:	d816      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01d      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c52:	d111      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fd28 	bl	80056b0 <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c64:	e012      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fdd1 	bl	8005814 <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c76:	e009      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca0:	492a      	ldr	r1, [pc, #168]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	654b      	str	r3, [r1, #84]	; 0x54
 8004ca6:	e001      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d04d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cc2:	d02e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004cc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cc8:	d828      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d02a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd4:	d822      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004cd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cda:	d026      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ce0:	d81c      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cec:	d816      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01d      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fcd6 	bl	80056b0 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d08:	e012      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3324      	adds	r3, #36	; 0x24
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fd7f 	bl	8005814 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d22:	bf00      	nop
 8004d24:	e004      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d44:	4901      	ldr	r1, [pc, #4]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	658b      	str	r3, [r1, #88]	; 0x58
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d04b      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d6a:	d02e      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004d6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d70:	d828      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d76:	d02a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7c:	d822      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d82:	d026      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004d84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d88:	d81c      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d94:	d816      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01d      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9e:	d111      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fc82 	bl	80056b0 <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004db0:	e012      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3324      	adds	r3, #36	; 0x24
 8004db6:	2102      	movs	r1, #2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fd2b 	bl	8005814 <RCCEx_PLL3_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004dc2:	e009      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc8:	e006      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e004      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e002      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004dde:	4b9d      	ldr	r3, [pc, #628]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dec:	4999      	ldr	r1, [pc, #612]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	658b      	str	r3, [r1, #88]	; 0x58
 8004df2:	e001      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d10a      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fcfc 	bl	8005814 <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e26:	4b8b      	ldr	r3, [pc, #556]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e34:	4987      	ldr	r1, [pc, #540]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3324      	adds	r3, #36	; 0x24
 8004e56:	2102      	movs	r1, #2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fcdb 	bl	8005814 <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e68:	4b7a      	ldr	r3, [pc, #488]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	4977      	ldr	r1, [pc, #476]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d034      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e92:	d01d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e98:	d817      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004ea4:	e011      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fbff 	bl	80056b0 <RCCEx_PLL2_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004eb6:	e00c      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3324      	adds	r3, #36	; 0x24
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fca8 	bl	8005814 <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ec8:	e003      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed8:	4b5e      	ldr	r3, [pc, #376]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ee6:	495b      	ldr	r1, [pc, #364]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	658b      	str	r3, [r1, #88]	; 0x58
 8004eec:	e001      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d033      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f08:	d01c      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004f0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f0e:	d816      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f14:	d003      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1a:	d007      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004f1c:	e00f      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1e:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	4a4c      	ldr	r2, [pc, #304]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f2a:	e00c      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3324      	adds	r3, #36	; 0x24
 8004f30:	2101      	movs	r1, #1
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fc6e 	bl	8005814 <RCCEx_PLL3_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f3c:	e003      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
      break;
 8004f42:	e000      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f4c:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5a:	493e      	ldr	r1, [pc, #248]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	654b      	str	r3, [r1, #84]	; 0x54
 8004f60:	e001      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d029      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7e:	d007      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f82:	4b34      	ldr	r3, [pc, #208]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	4a33      	ldr	r2, [pc, #204]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	2102      	movs	r1, #2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fb8a 	bl	80056b0 <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004fa0:	e002      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	4926      	ldr	r1, [pc, #152]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fc0:	e001      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3324      	adds	r3, #36	; 0x24
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fc1b 	bl	8005814 <RCCEx_PLL3_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d033      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffc:	d017      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005002:	d811      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d013      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800500a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500e:	d80b      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005018:	d106      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501a:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005026:	e007      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
      break;
 800502c:	e004      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10c      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504a:	4902      	ldr	r1, [pc, #8]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800504c:	4313      	orrs	r3, r2
 800504e:	654b      	str	r3, [r1, #84]	; 0x54
 8005050:	e004      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	492e      	ldr	r1, [pc, #184]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005076:	4313      	orrs	r3, r2
 8005078:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005086:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005094:	4926      	ldr	r1, [pc, #152]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005096:	4313      	orrs	r3, r2
 8005098:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050a6:	4b22      	ldr	r3, [pc, #136]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b2:	491f      	ldr	r1, [pc, #124]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050c4:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ce:	6113      	str	r3, [r2, #16]
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050da:	4915      	ldr	r1, [pc, #84]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da08      	bge.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	490e      	ldr	r1, [pc, #56]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	4906      	ldr	r1, [pc, #24]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005116:	4313      	orrs	r3, r2
 8005118:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800511a:	7dbb      	ldrb	r3, [r7, #22]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400

08005134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005138:	f7ff f85a 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4904      	ldr	r1, [pc, #16]	; (800515c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	08008288 	.word	0x08008288

08005160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005168:	4ba1      	ldr	r3, [pc, #644]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005172:	4b9f      	ldr	r3, [pc, #636]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	0b1b      	lsrs	r3, r3, #12
 8005178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800517c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800517e:	4b9c      	ldr	r3, [pc, #624]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800518a:	4b99      	ldr	r3, [pc, #612]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8111 	beq.w	80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f000 8083 	beq.w	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	f200 80a1 	bhi.w	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d056      	beq.n	8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051ca:	e099      	b.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051cc:	4b88      	ldr	r3, [pc, #544]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02d      	beq.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051d8:	4b85      	ldr	r3, [pc, #532]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	4a84      	ldr	r2, [pc, #528]	; (80053f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b7b      	ldr	r3, [pc, #492]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a78 	vldr	s11, [pc, #480]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005232:	e087      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	4b6a      	ldr	r3, [pc, #424]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a03 	vldr	s12, [r7, #12]
 800525a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005276:	e065      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a03 	vldr	s12, [r7, #12]
 800529e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ba:	e043      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b48      	ldr	r3, [pc, #288]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052fe:	e021      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a03 	vldr	s12, [r7, #12]
 8005326:	eddf 5a34 	vldr	s11, [pc, #208]	; 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800535a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800535e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536a:	ee17 2a90 	vmov	r2, s15
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005372:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005398:	ee17 2a90 	vmov	r2, s15
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80053be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c6:	ee17 2a90 	vmov	r2, s15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053ce:	e008      	b.n	80053e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	46000000 	.word	0x46000000
 80053fc:	4c742400 	.word	0x4c742400
 8005400:	4a742400 	.word	0x4a742400
 8005404:	4af42400 	.word	0x4af42400

08005408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005410:	4ba1      	ldr	r3, [pc, #644]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800541a:	4b9f      	ldr	r3, [pc, #636]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	0d1b      	lsrs	r3, r3, #20
 8005420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005426:	4b9c      	ldr	r3, [pc, #624]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005432:	4b99      	ldr	r3, [pc, #612]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8111 	beq.w	8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	f000 8083 	beq.w	8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b02      	cmp	r3, #2
 8005462:	f200 80a1 	bhi.w	80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d056      	beq.n	8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005472:	e099      	b.n	80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	4b88      	ldr	r3, [pc, #544]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02d      	beq.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005480:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	4a84      	ldr	r2, [pc, #528]	; (800569c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b7b      	ldr	r3, [pc, #492]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054da:	e087      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b6a      	ldr	r3, [pc, #424]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800551e:	e065      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b59      	ldr	r3, [pc, #356]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a03 	vldr	s12, [r7, #12]
 8005546:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005562:	e043      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b48      	ldr	r3, [pc, #288]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055a6:	e021      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	4b37      	ldr	r3, [pc, #220]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80055ec:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	0a5b      	lsrs	r3, r3, #9
 80055f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005606:	edd7 6a07 	vldr	s13, [r7, #28]
 800560a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800560e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005612:	ee17 2a90 	vmov	r2, s15
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005634:	edd7 6a07 	vldr	s13, [r7, #28]
 8005638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	ee17 2a90 	vmov	r2, s15
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005648:	4b13      	ldr	r3, [pc, #76]	; (8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	0e1b      	lsrs	r3, r3, #24
 800564e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800565e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005662:	edd7 6a07 	vldr	s13, [r7, #28]
 8005666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566e:	ee17 2a90 	vmov	r2, s15
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005676:	e008      	b.n	800568a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
}
 800568a:	bf00      	nop
 800568c:	3724      	adds	r7, #36	; 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	58024400 	.word	0x58024400
 800569c:	03d09000 	.word	0x03d09000
 80056a0:	46000000 	.word	0x46000000
 80056a4:	4c742400 	.word	0x4c742400
 80056a8:	4a742400 	.word	0x4a742400
 80056ac:	4af42400 	.word	0x4af42400

080056b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056be:	4b53      	ldr	r3, [pc, #332]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d101      	bne.n	80056ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e099      	b.n	8005802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056ce:	4b4f      	ldr	r3, [pc, #316]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a4e      	ldr	r2, [pc, #312]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80056d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056da:	f7fb ff29 	bl	8001530 <HAL_GetTick>
 80056de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056e2:	f7fb ff25 	bl	8001530 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e086      	b.n	8005802 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005700:	4b42      	ldr	r3, [pc, #264]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	493f      	ldr	r1, [pc, #252]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	628b      	str	r3, [r1, #40]	; 0x28
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	3b01      	subs	r3, #1
 800571a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	3b01      	subs	r3, #1
 8005724:	025b      	lsls	r3, r3, #9
 8005726:	b29b      	uxth	r3, r3
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	3b01      	subs	r3, #1
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	3b01      	subs	r3, #1
 800573e:	061b      	lsls	r3, r3, #24
 8005740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005744:	4931      	ldr	r1, [pc, #196]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005746:	4313      	orrs	r3, r2
 8005748:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800574a:	4b30      	ldr	r3, [pc, #192]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	492d      	ldr	r1, [pc, #180]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005758:	4313      	orrs	r3, r2
 800575a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f023 0220 	bic.w	r2, r3, #32
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	4928      	ldr	r1, [pc, #160]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800576e:	4b27      	ldr	r3, [pc, #156]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	4a26      	ldr	r2, [pc, #152]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 800577c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <RCCEx_PLL2_Config+0x160>)
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	69d2      	ldr	r2, [r2, #28]
 8005786:	00d2      	lsls	r2, r2, #3
 8005788:	4920      	ldr	r1, [pc, #128]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 800578a:	4313      	orrs	r3, r2
 800578c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800578e:	4b1f      	ldr	r3, [pc, #124]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	4a1e      	ldr	r2, [pc, #120]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 8005794:	f043 0310 	orr.w	r3, r3, #16
 8005798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057ac:	e00f      	b.n	80057ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d106      	bne.n	80057c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057b4:	4b15      	ldr	r3, [pc, #84]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057c0:	e005      	b.n	80057ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	4a11      	ldr	r2, [pc, #68]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057ce:	4b0f      	ldr	r3, [pc, #60]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a0e      	ldr	r2, [pc, #56]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057da:	f7fb fea9 	bl	8001530 <HAL_GetTick>
 80057de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057e0:	e008      	b.n	80057f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057e2:	f7fb fea5 	bl	8001530 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e006      	b.n	8005802 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <RCCEx_PLL2_Config+0x15c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	58024400 	.word	0x58024400
 8005810:	ffff0007 	.word	0xffff0007

08005814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005822:	4b53      	ldr	r3, [pc, #332]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b03      	cmp	r3, #3
 800582c:	d101      	bne.n	8005832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e099      	b.n	8005966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005832:	4b4f      	ldr	r3, [pc, #316]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a4e      	ldr	r2, [pc, #312]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fb fe77 	bl	8001530 <HAL_GetTick>
 8005842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005844:	e008      	b.n	8005858 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005846:	f7fb fe73 	bl	8001530 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e086      	b.n	8005966 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005858:	4b45      	ldr	r3, [pc, #276]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005864:	4b42      	ldr	r3, [pc, #264]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	051b      	lsls	r3, r3, #20
 8005872:	493f      	ldr	r1, [pc, #252]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	628b      	str	r3, [r1, #40]	; 0x28
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	3b01      	subs	r3, #1
 800587e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	3b01      	subs	r3, #1
 8005888:	025b      	lsls	r3, r3, #9
 800588a:	b29b      	uxth	r3, r3
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	3b01      	subs	r3, #1
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058a8:	4931      	ldr	r1, [pc, #196]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058ae:	4b30      	ldr	r3, [pc, #192]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	492d      	ldr	r1, [pc, #180]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058c0:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	4928      	ldr	r1, [pc, #160]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058d2:	4b27      	ldr	r3, [pc, #156]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	4a26      	ldr	r2, [pc, #152]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <RCCEx_PLL3_Config+0x160>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	69d2      	ldr	r2, [r2, #28]
 80058ea:	00d2      	lsls	r2, r2, #3
 80058ec:	4920      	ldr	r1, [pc, #128]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058f2:	4b1f      	ldr	r3, [pc, #124]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d106      	bne.n	8005912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 800590a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005910:	e00f      	b.n	8005932 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d106      	bne.n	8005926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 800591e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005924:	e005      	b.n	8005932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a11      	ldr	r2, [pc, #68]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 800592c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593e:	f7fb fdf7 	bl	8001530 <HAL_GetTick>
 8005942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005944:	e008      	b.n	8005958 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005946:	f7fb fdf3 	bl	8001530 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <RCCEx_PLL3_Config+0x15c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400
 8005974:	ffff0007 	.word	0xffff0007

08005978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e042      	b.n	8005a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fb fb69 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2224      	movs	r2, #36	; 0x24
 80059a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8c2 	bl	8005b44 <UART_SetConfig>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e022      	b.n	8005a10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fe1e 	bl	8006614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fea5 	bl	8006758 <UART_CheckIdleState>
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	f040 8083 	bne.w	8005b3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Transmit+0x28>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e07b      	b.n	8005b3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Transmit+0x3a>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e074      	b.n	8005b3c <HAL_UART_Transmit+0x124>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2221      	movs	r2, #33	; 0x21
 8005a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a6a:	f7fb fd61 	bl	8001530 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a88:	d108      	bne.n	8005a9c <HAL_UART_Transmit+0x84>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	e003      	b.n	8005aa4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005aac:	e02c      	b.n	8005b08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2180      	movs	r1, #128	; 0x80
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fe98 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e039      	b.n	8005b3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10b      	bne.n	8005ae6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e007      	b.n	8005af6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1cc      	bne.n	8005aae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fe65 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e006      	b.n	8005b3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b092      	sub	sp, #72	; 0x48
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4bbe      	ldr	r3, [pc, #760]	; (8005e6c <UART_SetConfig+0x328>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4ab3      	ldr	r2, [pc, #716]	; (8005e70 <UART_SetConfig+0x32c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bac:	4313      	orrs	r3, r2
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	4baf      	ldr	r3, [pc, #700]	; (8005e74 <UART_SetConfig+0x330>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f023 010f 	bic.w	r1, r3, #15
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4aa6      	ldr	r2, [pc, #664]	; (8005e78 <UART_SetConfig+0x334>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d177      	bne.n	8005cd4 <UART_SetConfig+0x190>
 8005be4:	4ba5      	ldr	r3, [pc, #660]	; (8005e7c <UART_SetConfig+0x338>)
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bec:	2b28      	cmp	r3, #40	; 0x28
 8005bee:	d86d      	bhi.n	8005ccc <UART_SetConfig+0x188>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0xb4>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c9d 	.word	0x08005c9d
 8005bfc:	08005ccd 	.word	0x08005ccd
 8005c00:	08005ccd 	.word	0x08005ccd
 8005c04:	08005ccd 	.word	0x08005ccd
 8005c08:	08005ccd 	.word	0x08005ccd
 8005c0c:	08005ccd 	.word	0x08005ccd
 8005c10:	08005ccd 	.word	0x08005ccd
 8005c14:	08005ccd 	.word	0x08005ccd
 8005c18:	08005ca5 	.word	0x08005ca5
 8005c1c:	08005ccd 	.word	0x08005ccd
 8005c20:	08005ccd 	.word	0x08005ccd
 8005c24:	08005ccd 	.word	0x08005ccd
 8005c28:	08005ccd 	.word	0x08005ccd
 8005c2c:	08005ccd 	.word	0x08005ccd
 8005c30:	08005ccd 	.word	0x08005ccd
 8005c34:	08005ccd 	.word	0x08005ccd
 8005c38:	08005cad 	.word	0x08005cad
 8005c3c:	08005ccd 	.word	0x08005ccd
 8005c40:	08005ccd 	.word	0x08005ccd
 8005c44:	08005ccd 	.word	0x08005ccd
 8005c48:	08005ccd 	.word	0x08005ccd
 8005c4c:	08005ccd 	.word	0x08005ccd
 8005c50:	08005ccd 	.word	0x08005ccd
 8005c54:	08005ccd 	.word	0x08005ccd
 8005c58:	08005cb5 	.word	0x08005cb5
 8005c5c:	08005ccd 	.word	0x08005ccd
 8005c60:	08005ccd 	.word	0x08005ccd
 8005c64:	08005ccd 	.word	0x08005ccd
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005ccd 	.word	0x08005ccd
 8005c70:	08005ccd 	.word	0x08005ccd
 8005c74:	08005ccd 	.word	0x08005ccd
 8005c78:	08005cbd 	.word	0x08005cbd
 8005c7c:	08005ccd 	.word	0x08005ccd
 8005c80:	08005ccd 	.word	0x08005ccd
 8005c84:	08005ccd 	.word	0x08005ccd
 8005c88:	08005ccd 	.word	0x08005ccd
 8005c8c:	08005ccd 	.word	0x08005ccd
 8005c90:	08005ccd 	.word	0x08005ccd
 8005c94:	08005ccd 	.word	0x08005ccd
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca2:	e222      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005caa:	e21e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e21a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e216      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e212      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e20e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e20a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a69      	ldr	r2, [pc, #420]	; (8005e80 <UART_SetConfig+0x33c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d130      	bne.n	8005d40 <UART_SetConfig+0x1fc>
 8005cde:	4b67      	ldr	r3, [pc, #412]	; (8005e7c <UART_SetConfig+0x338>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d826      	bhi.n	8005d38 <UART_SetConfig+0x1f4>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x1ac>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e1ec      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e1e8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e1e4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e1e0      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e1dc      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e1d8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e1d4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a4f      	ldr	r2, [pc, #316]	; (8005e84 <UART_SetConfig+0x340>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d130      	bne.n	8005dac <UART_SetConfig+0x268>
 8005d4a:	4b4c      	ldr	r3, [pc, #304]	; (8005e7c <UART_SetConfig+0x338>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d826      	bhi.n	8005da4 <UART_SetConfig+0x260>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x218>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d75 	.word	0x08005d75
 8005d60:	08005d7d 	.word	0x08005d7d
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e1b6      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e1b2      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d84:	2308      	movs	r3, #8
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e1ae      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e1aa      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d94:	2320      	movs	r3, #32
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e1a6      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e1a2      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e19e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a35      	ldr	r2, [pc, #212]	; (8005e88 <UART_SetConfig+0x344>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d130      	bne.n	8005e18 <UART_SetConfig+0x2d4>
 8005db6:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <UART_SetConfig+0x338>)
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d826      	bhi.n	8005e10 <UART_SetConfig+0x2cc>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x284>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005de1 	.word	0x08005de1
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	08005df1 	.word	0x08005df1
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e180      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e17c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e178      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e174      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e170      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e16c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e168      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <UART_SetConfig+0x348>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d142      	bne.n	8005ea8 <UART_SetConfig+0x364>
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <UART_SetConfig+0x338>)
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d838      	bhi.n	8005ea0 <UART_SetConfig+0x35c>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x2f0>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e4d 	.word	0x08005e4d
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e14a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e146      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e142      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e13e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e6c:	cfff69f3 	.word	0xcfff69f3
 8005e70:	58000c00 	.word	0x58000c00
 8005e74:	11fff4ff 	.word	0x11fff4ff
 8005e78:	40011000 	.word	0x40011000
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	40004400 	.word	0x40004400
 8005e84:	40004800 	.word	0x40004800
 8005e88:	40004c00 	.word	0x40004c00
 8005e8c:	40005000 	.word	0x40005000
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e96:	e128      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9e:	e124      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e120      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4acb      	ldr	r2, [pc, #812]	; (80061dc <UART_SetConfig+0x698>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d176      	bne.n	8005fa0 <UART_SetConfig+0x45c>
 8005eb2:	4bcb      	ldr	r3, [pc, #812]	; (80061e0 <UART_SetConfig+0x69c>)
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eba:	2b28      	cmp	r3, #40	; 0x28
 8005ebc:	d86c      	bhi.n	8005f98 <UART_SetConfig+0x454>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x380>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f69 	.word	0x08005f69
 8005ec8:	08005f99 	.word	0x08005f99
 8005ecc:	08005f99 	.word	0x08005f99
 8005ed0:	08005f99 	.word	0x08005f99
 8005ed4:	08005f99 	.word	0x08005f99
 8005ed8:	08005f99 	.word	0x08005f99
 8005edc:	08005f99 	.word	0x08005f99
 8005ee0:	08005f99 	.word	0x08005f99
 8005ee4:	08005f71 	.word	0x08005f71
 8005ee8:	08005f99 	.word	0x08005f99
 8005eec:	08005f99 	.word	0x08005f99
 8005ef0:	08005f99 	.word	0x08005f99
 8005ef4:	08005f99 	.word	0x08005f99
 8005ef8:	08005f99 	.word	0x08005f99
 8005efc:	08005f99 	.word	0x08005f99
 8005f00:	08005f99 	.word	0x08005f99
 8005f04:	08005f79 	.word	0x08005f79
 8005f08:	08005f99 	.word	0x08005f99
 8005f0c:	08005f99 	.word	0x08005f99
 8005f10:	08005f99 	.word	0x08005f99
 8005f14:	08005f99 	.word	0x08005f99
 8005f18:	08005f99 	.word	0x08005f99
 8005f1c:	08005f99 	.word	0x08005f99
 8005f20:	08005f99 	.word	0x08005f99
 8005f24:	08005f81 	.word	0x08005f81
 8005f28:	08005f99 	.word	0x08005f99
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08005f99 	.word	0x08005f99
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e0bc      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e0b8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e0b4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e0b0      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e0ac      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f90:	2340      	movs	r3, #64	; 0x40
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e0a8      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e0a4      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a8f      	ldr	r2, [pc, #572]	; (80061e4 <UART_SetConfig+0x6a0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d130      	bne.n	800600c <UART_SetConfig+0x4c8>
 8005faa:	4b8d      	ldr	r3, [pc, #564]	; (80061e0 <UART_SetConfig+0x69c>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d826      	bhi.n	8006004 <UART_SetConfig+0x4c0>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0x478>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fd5 	.word	0x08005fd5
 8005fc0:	08005fdd 	.word	0x08005fdd
 8005fc4:	08005fe5 	.word	0x08005fe5
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e086      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e082      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e07e      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e07a      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e076      	b.n	80060ea <UART_SetConfig+0x5a6>
 8005ffc:	2340      	movs	r3, #64	; 0x40
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e072      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e06e      	b.n	80060ea <UART_SetConfig+0x5a6>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a75      	ldr	r2, [pc, #468]	; (80061e8 <UART_SetConfig+0x6a4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d130      	bne.n	8006078 <UART_SetConfig+0x534>
 8006016:	4b72      	ldr	r3, [pc, #456]	; (80061e0 <UART_SetConfig+0x69c>)
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b05      	cmp	r3, #5
 8006020:	d826      	bhi.n	8006070 <UART_SetConfig+0x52c>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x4e4>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006041 	.word	0x08006041
 800602c:	08006049 	.word	0x08006049
 8006030:	08006051 	.word	0x08006051
 8006034:	08006059 	.word	0x08006059
 8006038:	08006061 	.word	0x08006061
 800603c:	08006069 	.word	0x08006069
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e050      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e04c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e048      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e044      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006060:	2320      	movs	r3, #32
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e040      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e03c      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e038      	b.n	80060ea <UART_SetConfig+0x5a6>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5b      	ldr	r2, [pc, #364]	; (80061ec <UART_SetConfig+0x6a8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d130      	bne.n	80060e4 <UART_SetConfig+0x5a0>
 8006082:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <UART_SetConfig+0x69c>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b05      	cmp	r3, #5
 800608c:	d826      	bhi.n	80060dc <UART_SetConfig+0x598>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0x550>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	2302      	movs	r3, #2
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e01a      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e016      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e012      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e00e      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060cc:	2320      	movs	r3, #32
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e00a      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e006      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0x5a6>
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	; (80061ec <UART_SetConfig+0x6a8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	f040 80f8 	bne.w	80062e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	dc46      	bgt.n	800618c <UART_SetConfig+0x648>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	f2c0 8082 	blt.w	8006208 <UART_SetConfig+0x6c4>
 8006104:	3b02      	subs	r3, #2
 8006106:	2b1e      	cmp	r3, #30
 8006108:	d87e      	bhi.n	8006208 <UART_SetConfig+0x6c4>
 800610a:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <UART_SetConfig+0x5cc>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006193 	.word	0x08006193
 8006114:	08006209 	.word	0x08006209
 8006118:	0800619b 	.word	0x0800619b
 800611c:	08006209 	.word	0x08006209
 8006120:	08006209 	.word	0x08006209
 8006124:	08006209 	.word	0x08006209
 8006128:	080061ab 	.word	0x080061ab
 800612c:	08006209 	.word	0x08006209
 8006130:	08006209 	.word	0x08006209
 8006134:	08006209 	.word	0x08006209
 8006138:	08006209 	.word	0x08006209
 800613c:	08006209 	.word	0x08006209
 8006140:	08006209 	.word	0x08006209
 8006144:	08006209 	.word	0x08006209
 8006148:	080061bb 	.word	0x080061bb
 800614c:	08006209 	.word	0x08006209
 8006150:	08006209 	.word	0x08006209
 8006154:	08006209 	.word	0x08006209
 8006158:	08006209 	.word	0x08006209
 800615c:	08006209 	.word	0x08006209
 8006160:	08006209 	.word	0x08006209
 8006164:	08006209 	.word	0x08006209
 8006168:	08006209 	.word	0x08006209
 800616c:	08006209 	.word	0x08006209
 8006170:	08006209 	.word	0x08006209
 8006174:	08006209 	.word	0x08006209
 8006178:	08006209 	.word	0x08006209
 800617c:	08006209 	.word	0x08006209
 8006180:	08006209 	.word	0x08006209
 8006184:	08006209 	.word	0x08006209
 8006188:	080061fb 	.word	0x080061fb
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d037      	beq.n	8006200 <UART_SetConfig+0x6bc>
 8006190:	e03a      	b.n	8006208 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006192:	f7fe ffcf 	bl	8005134 <HAL_RCCEx_GetD3PCLK1Freq>
 8006196:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006198:	e03c      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe ffde 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a8:	e034      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061aa:	f107 0318 	add.w	r3, r7, #24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff f92a 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b8:	e02c      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ba:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <UART_SetConfig+0x69c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <UART_SetConfig+0x69c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	08db      	lsrs	r3, r3, #3
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	4a07      	ldr	r2, [pc, #28]	; (80061f0 <UART_SetConfig+0x6ac>)
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d8:	e01c      	b.n	8006214 <UART_SetConfig+0x6d0>
 80061da:	bf00      	nop
 80061dc:	40011400 	.word	0x40011400
 80061e0:	58024400 	.word	0x58024400
 80061e4:	40007800 	.word	0x40007800
 80061e8:	40007c00 	.word	0x40007c00
 80061ec:	58000c00 	.word	0x58000c00
 80061f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b9d      	ldr	r3, [pc, #628]	; (800646c <UART_SetConfig+0x928>)
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f8:	e00c      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061fa:	4b9d      	ldr	r3, [pc, #628]	; (8006470 <UART_SetConfig+0x92c>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061fe:	e009      	b.n	8006214 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006206:	e005      	b.n	8006214 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006212:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 81de 	beq.w	80065d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	4a94      	ldr	r2, [pc, #592]	; (8006474 <UART_SetConfig+0x930>)
 8006222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006226:	461a      	mov	r2, r3
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	fbb3 f3f2 	udiv	r3, r3, r2
 800622e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623c:	429a      	cmp	r2, r3
 800623e:	d305      	bcc.n	800624c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006248:	429a      	cmp	r2, r3
 800624a:	d903      	bls.n	8006254 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006252:	e1c1      	b.n	80065d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006256:	2200      	movs	r2, #0
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	60fa      	str	r2, [r7, #12]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4a84      	ldr	r2, [pc, #528]	; (8006474 <UART_SetConfig+0x930>)
 8006262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006266:	b29b      	uxth	r3, r3
 8006268:	2200      	movs	r2, #0
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006276:	f7fa f883 	bl	8000380 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	020b      	lsls	r3, r1, #8
 800628c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006290:	0202      	lsls	r2, r0, #8
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	6849      	ldr	r1, [r1, #4]
 8006296:	0849      	lsrs	r1, r1, #1
 8006298:	2000      	movs	r0, #0
 800629a:	460c      	mov	r4, r1
 800629c:	4605      	mov	r5, r0
 800629e:	eb12 0804 	adds.w	r8, r2, r4
 80062a2:	eb43 0905 	adc.w	r9, r3, r5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	469a      	mov	sl, r3
 80062ae:	4693      	mov	fp, r2
 80062b0:	4652      	mov	r2, sl
 80062b2:	465b      	mov	r3, fp
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7fa f862 	bl	8000380 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4613      	mov	r3, r2
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ca:	d308      	bcc.n	80062de <UART_SetConfig+0x79a>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d2:	d204      	bcs.n	80062de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062da:	60da      	str	r2, [r3, #12]
 80062dc:	e17c      	b.n	80065d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062e4:	e178      	b.n	80065d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	f040 80c5 	bne.w	800647c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	dc48      	bgt.n	800638c <UART_SetConfig+0x848>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db7b      	blt.n	80063f6 <UART_SetConfig+0x8b2>
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d879      	bhi.n	80063f6 <UART_SetConfig+0x8b2>
 8006302:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x7c4>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	08006393 	.word	0x08006393
 800630c:	0800639b 	.word	0x0800639b
 8006310:	080063f7 	.word	0x080063f7
 8006314:	080063f7 	.word	0x080063f7
 8006318:	080063a3 	.word	0x080063a3
 800631c:	080063f7 	.word	0x080063f7
 8006320:	080063f7 	.word	0x080063f7
 8006324:	080063f7 	.word	0x080063f7
 8006328:	080063b3 	.word	0x080063b3
 800632c:	080063f7 	.word	0x080063f7
 8006330:	080063f7 	.word	0x080063f7
 8006334:	080063f7 	.word	0x080063f7
 8006338:	080063f7 	.word	0x080063f7
 800633c:	080063f7 	.word	0x080063f7
 8006340:	080063f7 	.word	0x080063f7
 8006344:	080063f7 	.word	0x080063f7
 8006348:	080063c3 	.word	0x080063c3
 800634c:	080063f7 	.word	0x080063f7
 8006350:	080063f7 	.word	0x080063f7
 8006354:	080063f7 	.word	0x080063f7
 8006358:	080063f7 	.word	0x080063f7
 800635c:	080063f7 	.word	0x080063f7
 8006360:	080063f7 	.word	0x080063f7
 8006364:	080063f7 	.word	0x080063f7
 8006368:	080063f7 	.word	0x080063f7
 800636c:	080063f7 	.word	0x080063f7
 8006370:	080063f7 	.word	0x080063f7
 8006374:	080063f7 	.word	0x080063f7
 8006378:	080063f7 	.word	0x080063f7
 800637c:	080063f7 	.word	0x080063f7
 8006380:	080063f7 	.word	0x080063f7
 8006384:	080063f7 	.word	0x080063f7
 8006388:	080063e9 	.word	0x080063e9
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d02e      	beq.n	80063ee <UART_SetConfig+0x8aa>
 8006390:	e031      	b.n	80063f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006392:	f7fd ff5d 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8006396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006398:	e033      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639a:	f7fd ff6f 	bl	800427c <HAL_RCC_GetPCLK2Freq>
 800639e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063a0:	e02f      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe feda 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b0:	e027      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063b2:	f107 0318 	add.w	r3, r7, #24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff f826 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c0:	e01f      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c2:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <UART_SetConfig+0x934>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ce:	4b2a      	ldr	r3, [pc, #168]	; (8006478 <UART_SetConfig+0x934>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	4a24      	ldr	r2, [pc, #144]	; (800646c <UART_SetConfig+0x928>)
 80063da:	fa22 f303 	lsr.w	r3, r2, r3
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063e0:	e00f      	b.n	8006402 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063e2:	4b22      	ldr	r3, [pc, #136]	; (800646c <UART_SetConfig+0x928>)
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063e6:	e00c      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063e8:	4b21      	ldr	r3, [pc, #132]	; (8006470 <UART_SetConfig+0x92c>)
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ec:	e009      	b.n	8006402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f4:	e005      	b.n	8006402 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80e7 	beq.w	80065d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	4a19      	ldr	r2, [pc, #100]	; (8006474 <UART_SetConfig+0x930>)
 8006410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006414:	461a      	mov	r2, r3
 8006416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006418:	fbb3 f3f2 	udiv	r3, r3, r2
 800641c:	005a      	lsls	r2, r3, #1
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	085b      	lsrs	r3, r3, #1
 8006424:	441a      	add	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	2b0f      	cmp	r3, #15
 8006434:	d916      	bls.n	8006464 <UART_SetConfig+0x920>
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d212      	bcs.n	8006464 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	b29b      	uxth	r3, r3
 8006442:	f023 030f 	bic.w	r3, r3, #15
 8006446:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	b29b      	uxth	r3, r3
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	b29a      	uxth	r2, r3
 8006454:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006456:	4313      	orrs	r3, r2
 8006458:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	e0b9      	b.n	80065d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800646a:	e0b5      	b.n	80065d8 <UART_SetConfig+0xa94>
 800646c:	03d09000 	.word	0x03d09000
 8006470:	003d0900 	.word	0x003d0900
 8006474:	080082a8 	.word	0x080082a8
 8006478:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800647c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006480:	2b20      	cmp	r3, #32
 8006482:	dc49      	bgt.n	8006518 <UART_SetConfig+0x9d4>
 8006484:	2b00      	cmp	r3, #0
 8006486:	db7c      	blt.n	8006582 <UART_SetConfig+0xa3e>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d87a      	bhi.n	8006582 <UART_SetConfig+0xa3e>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x950>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	0800651f 	.word	0x0800651f
 8006498:	08006527 	.word	0x08006527
 800649c:	08006583 	.word	0x08006583
 80064a0:	08006583 	.word	0x08006583
 80064a4:	0800652f 	.word	0x0800652f
 80064a8:	08006583 	.word	0x08006583
 80064ac:	08006583 	.word	0x08006583
 80064b0:	08006583 	.word	0x08006583
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	08006583 	.word	0x08006583
 80064bc:	08006583 	.word	0x08006583
 80064c0:	08006583 	.word	0x08006583
 80064c4:	08006583 	.word	0x08006583
 80064c8:	08006583 	.word	0x08006583
 80064cc:	08006583 	.word	0x08006583
 80064d0:	08006583 	.word	0x08006583
 80064d4:	0800654f 	.word	0x0800654f
 80064d8:	08006583 	.word	0x08006583
 80064dc:	08006583 	.word	0x08006583
 80064e0:	08006583 	.word	0x08006583
 80064e4:	08006583 	.word	0x08006583
 80064e8:	08006583 	.word	0x08006583
 80064ec:	08006583 	.word	0x08006583
 80064f0:	08006583 	.word	0x08006583
 80064f4:	08006583 	.word	0x08006583
 80064f8:	08006583 	.word	0x08006583
 80064fc:	08006583 	.word	0x08006583
 8006500:	08006583 	.word	0x08006583
 8006504:	08006583 	.word	0x08006583
 8006508:	08006583 	.word	0x08006583
 800650c:	08006583 	.word	0x08006583
 8006510:	08006583 	.word	0x08006583
 8006514:	08006575 	.word	0x08006575
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d02e      	beq.n	800657a <UART_SetConfig+0xa36>
 800651c:	e031      	b.n	8006582 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fd fe97 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8006522:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006524:	e033      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006526:	f7fd fea9 	bl	800427c <HAL_RCC_GetPCLK2Freq>
 800652a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800652c:	e02f      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fe14 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653c:	e027      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff60 	bl	8005408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800654c:	e01f      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800654e:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <UART_SetConfig+0xac0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800655a:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <UART_SetConfig+0xac0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	4a28      	ldr	r2, [pc, #160]	; (8006608 <UART_SetConfig+0xac4>)
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800656c:	e00f      	b.n	800658e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800656e:	4b26      	ldr	r3, [pc, #152]	; (8006608 <UART_SetConfig+0xac4>)
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006572:	e00c      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006574:	4b25      	ldr	r3, [pc, #148]	; (800660c <UART_SetConfig+0xac8>)
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006578:	e009      	b.n	800658e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006580:	e005      	b.n	800658e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800658c:	bf00      	nop
    }

    if (pclk != 0U)
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d021      	beq.n	80065d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <UART_SetConfig+0xacc>)
 800659a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800659e:	461a      	mov	r2, r3
 80065a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	441a      	add	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b0f      	cmp	r3, #15
 80065bc:	d909      	bls.n	80065d2 <UART_SetConfig+0xa8e>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c4:	d205      	bcs.n	80065d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	e002      	b.n	80065d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2201      	movs	r2, #1
 80065dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80065f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3748      	adds	r7, #72	; 0x48
 80065fc:	46bd      	mov	sp, r7
 80065fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	03d09000 	.word	0x03d09000
 800660c:	003d0900 	.word	0x003d0900
 8006610:	080082a8 	.word	0x080082a8

08006614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01a      	beq.n	800672a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006712:	d10a      	bne.n	800672a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af02      	add	r7, sp, #8
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006768:	f7fa fee2 	bl	8001530 <HAL_GetTick>
 800676c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d10e      	bne.n	800679a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800677c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f82f 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e025      	b.n	80067e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d10e      	bne.n	80067c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f819 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e00f      	b.n	80067e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b09c      	sub	sp, #112	; 0x70
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	603b      	str	r3, [r7, #0]
 80067fa:	4613      	mov	r3, r2
 80067fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fe:	e0a9      	b.n	8006954 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006806:	f000 80a5 	beq.w	8006954 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680a:	f7fa fe91 	bl	8001530 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006816:	429a      	cmp	r2, r3
 8006818:	d302      	bcc.n	8006820 <UART_WaitOnFlagUntilTimeout+0x32>
 800681a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800681c:	2b00      	cmp	r3, #0
 800681e:	d140      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800682e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006834:	667b      	str	r3, [r7, #100]	; 0x64
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800683e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006840:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800684c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e6      	bne.n	8006820 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	663b      	str	r3, [r7, #96]	; 0x60
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006872:	64ba      	str	r2, [r7, #72]	; 0x48
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e069      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d051      	beq.n	8006954 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068be:	d149      	bne.n	8006954 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	613b      	str	r3, [r7, #16]
   return(result);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	66bb      	str	r3, [r7, #104]	; 0x68
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800691c:	623a      	str	r2, [r7, #32]
 800691e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	61bb      	str	r3, [r7, #24]
   return(result);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e010      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69da      	ldr	r2, [r3, #28]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4013      	ands	r3, r2
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	bf0c      	ite	eq
 8006964:	2301      	moveq	r3, #1
 8006966:	2300      	movne	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	429a      	cmp	r2, r3
 8006970:	f43f af46 	beq.w	8006800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3770      	adds	r7, #112	; 0x70
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UARTEx_DisableFifoMode+0x16>
 8006990:	2302      	movs	r3, #2
 8006992:	e027      	b.n	80069e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2224      	movs	r2, #36	; 0x24
 80069a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e02d      	b.n	8006a64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0201 	bic.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f84f 	bl	8006ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e02d      	b.n	8006ae0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	; 0x24
 8006a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f811 	bl	8006ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d108      	bne.n	8006b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b08:	e031      	b.n	8006b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b0e:	2310      	movs	r3, #16
 8006b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	0e5b      	lsrs	r3, r3, #25
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	0f5b      	lsrs	r3, r3, #29
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	7b3a      	ldrb	r2, [r7, #12]
 8006b36:	4911      	ldr	r1, [pc, #68]	; (8006b7c <UARTEx_SetNbDataToProcess+0x94>)
 8006b38:	5c8a      	ldrb	r2, [r1, r2]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b3e:	7b3a      	ldrb	r2, [r7, #12]
 8006b40:	490f      	ldr	r1, [pc, #60]	; (8006b80 <UARTEx_SetNbDataToProcess+0x98>)
 8006b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	7b7a      	ldrb	r2, [r7, #13]
 8006b54:	4909      	ldr	r1, [pc, #36]	; (8006b7c <UARTEx_SetNbDataToProcess+0x94>)
 8006b56:	5c8a      	ldrb	r2, [r1, r2]
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b5c:	7b7a      	ldrb	r2, [r7, #13]
 8006b5e:	4908      	ldr	r1, [pc, #32]	; (8006b80 <UARTEx_SetNbDataToProcess+0x98>)
 8006b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	080082c0 	.word	0x080082c0
 8006b80:	080082c8 	.word	0x080082c8

08006b84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b84:	b084      	sub	sp, #16
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	f107 001c 	add.w	r0, r7, #28
 8006b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d120      	bne.n	8006bde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <USB_CoreInit+0xd4>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d105      	bne.n	8006bd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 faac 	bl	8007130 <USB_CoreReset>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	e01a      	b.n	8006c14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 faa0 	bl	8007130 <USB_CoreReset>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
 8006c06:	e005      	b.n	8006c14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d116      	bne.n	8006c48 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c28:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <USB_CoreInit+0xd8>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f043 0206 	orr.w	r2, r3, #6
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c54:	b004      	add	sp, #16
 8006c56:	4770      	bx	lr
 8006c58:	ffbdffbf 	.word	0xffbdffbf
 8006c5c:	03ee0000 	.word	0x03ee0000

08006c60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 0201 	bic.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d115      	bne.n	8006cd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f7fa fc49 	bl	8001548 <HAL_Delay>
      ms++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fa29 	bl	8007114 <USB_GetMode>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d01e      	beq.n	8006d06 <USB_SetCurrentMode+0x84>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b31      	cmp	r3, #49	; 0x31
 8006ccc:	d9f0      	bls.n	8006cb0 <USB_SetCurrentMode+0x2e>
 8006cce:	e01a      	b.n	8006d06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d115      	bne.n	8006d02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	f7fa fc30 	bl	8001548 <HAL_Delay>
      ms++;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa10 	bl	8007114 <USB_GetMode>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <USB_SetCurrentMode+0x84>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b31      	cmp	r3, #49	; 0x31
 8006cfe:	d9f0      	bls.n	8006ce2 <USB_SetCurrentMode+0x60>
 8006d00:	e001      	b.n	8006d06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e005      	b.n	8006d12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b32      	cmp	r3, #50	; 0x32
 8006d0a:	d101      	bne.n	8006d10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	e009      	b.n	8006d50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3340      	adds	r3, #64	; 0x40
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b0e      	cmp	r3, #14
 8006d54:	d9f2      	bls.n	8006d3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11c      	bne.n	8006d96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d6a:	f043 0302 	orr.w	r3, r3, #2
 8006d6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e005      	b.n	8006da2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da8:	461a      	mov	r2, r3
 8006daa:	2300      	movs	r3, #0
 8006dac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	4619      	mov	r1, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	680b      	ldr	r3, [r1, #0]
 8006dc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10c      	bne.n	8006de2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f965 	bl	80070a0 <USB_SetDevSpeed>
 8006dd6:	e008      	b.n	8006dea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dd8:	2101      	movs	r1, #1
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f960 	bl	80070a0 <USB_SetDevSpeed>
 8006de0:	e003      	b.n	8006dea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006de2:	2103      	movs	r1, #3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f95b 	bl	80070a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dea:	2110      	movs	r1, #16
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f8f3 	bl	8006fd8 <USB_FlushTxFifo>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f91f 	bl	8007040 <USB_FlushRxFifo>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	e043      	b.n	8006ebe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e4c:	d118      	bne.n	8006e80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	461a      	mov	r2, r3
 8006e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	e013      	b.n	8006e92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	461a      	mov	r2, r3
 8006e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	e008      	b.n	8006e92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3b7      	bcc.n	8006e36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	e043      	b.n	8006f54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee2:	d118      	bne.n	8006f16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e013      	b.n	8006f28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e008      	b.n	8006f28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	461a      	mov	r2, r3
 8006f48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d3b7      	bcc.n	8006ecc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f043 0210 	orr.w	r2, r3, #16
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <USB_DevInit+0x2b4>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f043 0208 	orr.w	r2, r3, #8
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d105      	bne.n	8006fc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <USB_DevInit+0x2b8>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fcc:	b004      	add	sp, #16
 8006fce:	4770      	bx	lr
 8006fd0:	803c3800 	.word	0x803c3800
 8006fd4:	40000004 	.word	0x40000004

08006fd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a13      	ldr	r2, [pc, #76]	; (800703c <USB_FlushTxFifo+0x64>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e01b      	b.n	8007030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	daf2      	bge.n	8006fe6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	019b      	lsls	r3, r3, #6
 8007008:	f043 0220 	orr.w	r2, r3, #32
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4a08      	ldr	r2, [pc, #32]	; (800703c <USB_FlushTxFifo+0x64>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d901      	bls.n	8007022 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e006      	b.n	8007030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b20      	cmp	r3, #32
 800702c:	d0f0      	beq.n	8007010 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	00030d40 	.word	0x00030d40

08007040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a11      	ldr	r2, [pc, #68]	; (800709c <USB_FlushRxFifo+0x5c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e018      	b.n	8007090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	daf2      	bge.n	800704c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2210      	movs	r2, #16
 800706e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a08      	ldr	r2, [pc, #32]	; (800709c <USB_FlushRxFifo+0x5c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e006      	b.n	8007090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0310 	and.w	r3, r3, #16
 800708a:	2b10      	cmp	r3, #16
 800708c:	d0f0      	beq.n	8007070 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	00030d40 	.word	0x00030d40

080070a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c0:	4313      	orrs	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070ec:	f023 0303 	bic.w	r3, r3, #3
 80070f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0301 	and.w	r3, r3, #1
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <USB_CoreReset+0x64>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e01b      	b.n	8007186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <USB_CoreReset+0x64>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e006      	b.n	8007186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d0f0      	beq.n	8007166 <USB_CoreReset+0x36>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	00030d40 	.word	0x00030d40

08007198 <__errno>:
 8007198:	4b01      	ldr	r3, [pc, #4]	; (80071a0 <__errno+0x8>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	24000010 	.word	0x24000010

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4d0d      	ldr	r5, [pc, #52]	; (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	; (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2600      	movs	r6, #0
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4d0b      	ldr	r5, [pc, #44]	; (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	; (80071e8 <__libc_init_array+0x44>)
 80071b8:	f001 f81a 	bl	80081f0 <_init>
 80071bc:	1b64      	subs	r4, r4, r5
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2600      	movs	r6, #0
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071cc:	4798      	blx	r3
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d6:	4798      	blx	r3
 80071d8:	3601      	adds	r6, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	08008370 	.word	0x08008370
 80071e0:	08008370 	.word	0x08008370
 80071e4:	08008370 	.word	0x08008370
 80071e8:	08008374 	.word	0x08008374

080071ec <memcpy>:
 80071ec:	440a      	add	r2, r1
 80071ee:	4291      	cmp	r1, r2
 80071f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071f4:	d100      	bne.n	80071f8 <memcpy+0xc>
 80071f6:	4770      	bx	lr
 80071f8:	b510      	push	{r4, lr}
 80071fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007202:	4291      	cmp	r1, r2
 8007204:	d1f9      	bne.n	80071fa <memcpy+0xe>
 8007206:	bd10      	pop	{r4, pc}

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <iprintf>:
 8007218:	b40f      	push	{r0, r1, r2, r3}
 800721a:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <iprintf+0x2c>)
 800721c:	b513      	push	{r0, r1, r4, lr}
 800721e:	681c      	ldr	r4, [r3, #0]
 8007220:	b124      	cbz	r4, 800722c <iprintf+0x14>
 8007222:	69a3      	ldr	r3, [r4, #24]
 8007224:	b913      	cbnz	r3, 800722c <iprintf+0x14>
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f87c 	bl	8007324 <__sinit>
 800722c:	ab05      	add	r3, sp, #20
 800722e:	9a04      	ldr	r2, [sp, #16]
 8007230:	68a1      	ldr	r1, [r4, #8]
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	4620      	mov	r0, r4
 8007236:	f000 f9d3 	bl	80075e0 <_vfiprintf_r>
 800723a:	b002      	add	sp, #8
 800723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007240:	b004      	add	sp, #16
 8007242:	4770      	bx	lr
 8007244:	24000010 	.word	0x24000010

08007248 <putchar>:
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <putchar+0x28>)
 800724a:	b513      	push	{r0, r1, r4, lr}
 800724c:	681c      	ldr	r4, [r3, #0]
 800724e:	4601      	mov	r1, r0
 8007250:	b134      	cbz	r4, 8007260 <putchar+0x18>
 8007252:	69a3      	ldr	r3, [r4, #24]
 8007254:	b923      	cbnz	r3, 8007260 <putchar+0x18>
 8007256:	9001      	str	r0, [sp, #4]
 8007258:	4620      	mov	r0, r4
 800725a:	f000 f863 	bl	8007324 <__sinit>
 800725e:	9901      	ldr	r1, [sp, #4]
 8007260:	68a2      	ldr	r2, [r4, #8]
 8007262:	4620      	mov	r0, r4
 8007264:	b002      	add	sp, #8
 8007266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800726a:	f000 bc7d 	b.w	8007b68 <_putc_r>
 800726e:	bf00      	nop
 8007270:	24000010 	.word	0x24000010

08007274 <std>:
 8007274:	2300      	movs	r3, #0
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	e9c0 3300 	strd	r3, r3, [r0]
 800727e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007282:	6083      	str	r3, [r0, #8]
 8007284:	8181      	strh	r1, [r0, #12]
 8007286:	6643      	str	r3, [r0, #100]	; 0x64
 8007288:	81c2      	strh	r2, [r0, #14]
 800728a:	6183      	str	r3, [r0, #24]
 800728c:	4619      	mov	r1, r3
 800728e:	2208      	movs	r2, #8
 8007290:	305c      	adds	r0, #92	; 0x5c
 8007292:	f7ff ffb9 	bl	8007208 <memset>
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x38>)
 8007298:	6263      	str	r3, [r4, #36]	; 0x24
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <std+0x3c>)
 800729c:	62a3      	str	r3, [r4, #40]	; 0x28
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <std+0x40>)
 80072a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <std+0x44>)
 80072a4:	6224      	str	r4, [r4, #32]
 80072a6:	6323      	str	r3, [r4, #48]	; 0x30
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	bf00      	nop
 80072ac:	08007c19 	.word	0x08007c19
 80072b0:	08007c3b 	.word	0x08007c3b
 80072b4:	08007c73 	.word	0x08007c73
 80072b8:	08007c97 	.word	0x08007c97

080072bc <_cleanup_r>:
 80072bc:	4901      	ldr	r1, [pc, #4]	; (80072c4 <_cleanup_r+0x8>)
 80072be:	f000 b8af 	b.w	8007420 <_fwalk_reent>
 80072c2:	bf00      	nop
 80072c4:	08007f71 	.word	0x08007f71

080072c8 <__sfmoreglue>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	2268      	movs	r2, #104	; 0x68
 80072cc:	1e4d      	subs	r5, r1, #1
 80072ce:	4355      	muls	r5, r2
 80072d0:	460e      	mov	r6, r1
 80072d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072d6:	f000 f8e5 	bl	80074a4 <_malloc_r>
 80072da:	4604      	mov	r4, r0
 80072dc:	b140      	cbz	r0, 80072f0 <__sfmoreglue+0x28>
 80072de:	2100      	movs	r1, #0
 80072e0:	e9c0 1600 	strd	r1, r6, [r0]
 80072e4:	300c      	adds	r0, #12
 80072e6:	60a0      	str	r0, [r4, #8]
 80072e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072ec:	f7ff ff8c 	bl	8007208 <memset>
 80072f0:	4620      	mov	r0, r4
 80072f2:	bd70      	pop	{r4, r5, r6, pc}

080072f4 <__sfp_lock_acquire>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sfp_lock_acquire+0x8>)
 80072f6:	f000 b8b3 	b.w	8007460 <__retarget_lock_acquire_recursive>
 80072fa:	bf00      	nop
 80072fc:	240008f9 	.word	0x240008f9

08007300 <__sfp_lock_release>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__sfp_lock_release+0x8>)
 8007302:	f000 b8ae 	b.w	8007462 <__retarget_lock_release_recursive>
 8007306:	bf00      	nop
 8007308:	240008f9 	.word	0x240008f9

0800730c <__sinit_lock_acquire>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__sinit_lock_acquire+0x8>)
 800730e:	f000 b8a7 	b.w	8007460 <__retarget_lock_acquire_recursive>
 8007312:	bf00      	nop
 8007314:	240008fa 	.word	0x240008fa

08007318 <__sinit_lock_release>:
 8007318:	4801      	ldr	r0, [pc, #4]	; (8007320 <__sinit_lock_release+0x8>)
 800731a:	f000 b8a2 	b.w	8007462 <__retarget_lock_release_recursive>
 800731e:	bf00      	nop
 8007320:	240008fa 	.word	0x240008fa

08007324 <__sinit>:
 8007324:	b510      	push	{r4, lr}
 8007326:	4604      	mov	r4, r0
 8007328:	f7ff fff0 	bl	800730c <__sinit_lock_acquire>
 800732c:	69a3      	ldr	r3, [r4, #24]
 800732e:	b11b      	cbz	r3, 8007338 <__sinit+0x14>
 8007330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007334:	f7ff bff0 	b.w	8007318 <__sinit_lock_release>
 8007338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800733c:	6523      	str	r3, [r4, #80]	; 0x50
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <__sinit+0x68>)
 8007340:	4a13      	ldr	r2, [pc, #76]	; (8007390 <__sinit+0x6c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	62a2      	str	r2, [r4, #40]	; 0x28
 8007346:	42a3      	cmp	r3, r4
 8007348:	bf04      	itt	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	61a3      	streq	r3, [r4, #24]
 800734e:	4620      	mov	r0, r4
 8007350:	f000 f820 	bl	8007394 <__sfp>
 8007354:	6060      	str	r0, [r4, #4]
 8007356:	4620      	mov	r0, r4
 8007358:	f000 f81c 	bl	8007394 <__sfp>
 800735c:	60a0      	str	r0, [r4, #8]
 800735e:	4620      	mov	r0, r4
 8007360:	f000 f818 	bl	8007394 <__sfp>
 8007364:	2200      	movs	r2, #0
 8007366:	60e0      	str	r0, [r4, #12]
 8007368:	2104      	movs	r1, #4
 800736a:	6860      	ldr	r0, [r4, #4]
 800736c:	f7ff ff82 	bl	8007274 <std>
 8007370:	68a0      	ldr	r0, [r4, #8]
 8007372:	2201      	movs	r2, #1
 8007374:	2109      	movs	r1, #9
 8007376:	f7ff ff7d 	bl	8007274 <std>
 800737a:	68e0      	ldr	r0, [r4, #12]
 800737c:	2202      	movs	r2, #2
 800737e:	2112      	movs	r1, #18
 8007380:	f7ff ff78 	bl	8007274 <std>
 8007384:	2301      	movs	r3, #1
 8007386:	61a3      	str	r3, [r4, #24]
 8007388:	e7d2      	b.n	8007330 <__sinit+0xc>
 800738a:	bf00      	nop
 800738c:	080082d0 	.word	0x080082d0
 8007390:	080072bd 	.word	0x080072bd

08007394 <__sfp>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	4607      	mov	r7, r0
 8007398:	f7ff ffac 	bl	80072f4 <__sfp_lock_acquire>
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <__sfp+0x84>)
 800739e:	681e      	ldr	r6, [r3, #0]
 80073a0:	69b3      	ldr	r3, [r6, #24]
 80073a2:	b913      	cbnz	r3, 80073aa <__sfp+0x16>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff ffbd 	bl	8007324 <__sinit>
 80073aa:	3648      	adds	r6, #72	; 0x48
 80073ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	d503      	bpl.n	80073bc <__sfp+0x28>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	b30b      	cbz	r3, 80073fc <__sfp+0x68>
 80073b8:	6836      	ldr	r6, [r6, #0]
 80073ba:	e7f7      	b.n	80073ac <__sfp+0x18>
 80073bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073c0:	b9d5      	cbnz	r5, 80073f8 <__sfp+0x64>
 80073c2:	4b16      	ldr	r3, [pc, #88]	; (800741c <__sfp+0x88>)
 80073c4:	60e3      	str	r3, [r4, #12]
 80073c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073ca:	6665      	str	r5, [r4, #100]	; 0x64
 80073cc:	f000 f847 	bl	800745e <__retarget_lock_init_recursive>
 80073d0:	f7ff ff96 	bl	8007300 <__sfp_lock_release>
 80073d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073dc:	6025      	str	r5, [r4, #0]
 80073de:	61a5      	str	r5, [r4, #24]
 80073e0:	2208      	movs	r2, #8
 80073e2:	4629      	mov	r1, r5
 80073e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073e8:	f7ff ff0e 	bl	8007208 <memset>
 80073ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073f4:	4620      	mov	r0, r4
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f8:	3468      	adds	r4, #104	; 0x68
 80073fa:	e7d9      	b.n	80073b0 <__sfp+0x1c>
 80073fc:	2104      	movs	r1, #4
 80073fe:	4638      	mov	r0, r7
 8007400:	f7ff ff62 	bl	80072c8 <__sfmoreglue>
 8007404:	4604      	mov	r4, r0
 8007406:	6030      	str	r0, [r6, #0]
 8007408:	2800      	cmp	r0, #0
 800740a:	d1d5      	bne.n	80073b8 <__sfp+0x24>
 800740c:	f7ff ff78 	bl	8007300 <__sfp_lock_release>
 8007410:	230c      	movs	r3, #12
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	e7ee      	b.n	80073f4 <__sfp+0x60>
 8007416:	bf00      	nop
 8007418:	080082d0 	.word	0x080082d0
 800741c:	ffff0001 	.word	0xffff0001

08007420 <_fwalk_reent>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	4606      	mov	r6, r0
 8007426:	4688      	mov	r8, r1
 8007428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800742c:	2700      	movs	r7, #0
 800742e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007432:	f1b9 0901 	subs.w	r9, r9, #1
 8007436:	d505      	bpl.n	8007444 <_fwalk_reent+0x24>
 8007438:	6824      	ldr	r4, [r4, #0]
 800743a:	2c00      	cmp	r4, #0
 800743c:	d1f7      	bne.n	800742e <_fwalk_reent+0xe>
 800743e:	4638      	mov	r0, r7
 8007440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007444:	89ab      	ldrh	r3, [r5, #12]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d907      	bls.n	800745a <_fwalk_reent+0x3a>
 800744a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800744e:	3301      	adds	r3, #1
 8007450:	d003      	beq.n	800745a <_fwalk_reent+0x3a>
 8007452:	4629      	mov	r1, r5
 8007454:	4630      	mov	r0, r6
 8007456:	47c0      	blx	r8
 8007458:	4307      	orrs	r7, r0
 800745a:	3568      	adds	r5, #104	; 0x68
 800745c:	e7e9      	b.n	8007432 <_fwalk_reent+0x12>

0800745e <__retarget_lock_init_recursive>:
 800745e:	4770      	bx	lr

08007460 <__retarget_lock_acquire_recursive>:
 8007460:	4770      	bx	lr

08007462 <__retarget_lock_release_recursive>:
 8007462:	4770      	bx	lr

08007464 <sbrk_aligned>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4e0e      	ldr	r6, [pc, #56]	; (80074a0 <sbrk_aligned+0x3c>)
 8007468:	460c      	mov	r4, r1
 800746a:	6831      	ldr	r1, [r6, #0]
 800746c:	4605      	mov	r5, r0
 800746e:	b911      	cbnz	r1, 8007476 <sbrk_aligned+0x12>
 8007470:	f000 fbc2 	bl	8007bf8 <_sbrk_r>
 8007474:	6030      	str	r0, [r6, #0]
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 fbbd 	bl	8007bf8 <_sbrk_r>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d00a      	beq.n	8007498 <sbrk_aligned+0x34>
 8007482:	1cc4      	adds	r4, r0, #3
 8007484:	f024 0403 	bic.w	r4, r4, #3
 8007488:	42a0      	cmp	r0, r4
 800748a:	d007      	beq.n	800749c <sbrk_aligned+0x38>
 800748c:	1a21      	subs	r1, r4, r0
 800748e:	4628      	mov	r0, r5
 8007490:	f000 fbb2 	bl	8007bf8 <_sbrk_r>
 8007494:	3001      	adds	r0, #1
 8007496:	d101      	bne.n	800749c <sbrk_aligned+0x38>
 8007498:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800749c:	4620      	mov	r0, r4
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	24000900 	.word	0x24000900

080074a4 <_malloc_r>:
 80074a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a8:	1ccd      	adds	r5, r1, #3
 80074aa:	f025 0503 	bic.w	r5, r5, #3
 80074ae:	3508      	adds	r5, #8
 80074b0:	2d0c      	cmp	r5, #12
 80074b2:	bf38      	it	cc
 80074b4:	250c      	movcc	r5, #12
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	4607      	mov	r7, r0
 80074ba:	db01      	blt.n	80074c0 <_malloc_r+0x1c>
 80074bc:	42a9      	cmp	r1, r5
 80074be:	d905      	bls.n	80074cc <_malloc_r+0x28>
 80074c0:	230c      	movs	r3, #12
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	2600      	movs	r6, #0
 80074c6:	4630      	mov	r0, r6
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	4e2e      	ldr	r6, [pc, #184]	; (8007588 <_malloc_r+0xe4>)
 80074ce:	f000 fe03 	bl	80080d8 <__malloc_lock>
 80074d2:	6833      	ldr	r3, [r6, #0]
 80074d4:	461c      	mov	r4, r3
 80074d6:	bb34      	cbnz	r4, 8007526 <_malloc_r+0x82>
 80074d8:	4629      	mov	r1, r5
 80074da:	4638      	mov	r0, r7
 80074dc:	f7ff ffc2 	bl	8007464 <sbrk_aligned>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	4604      	mov	r4, r0
 80074e4:	d14d      	bne.n	8007582 <_malloc_r+0xde>
 80074e6:	6834      	ldr	r4, [r6, #0]
 80074e8:	4626      	mov	r6, r4
 80074ea:	2e00      	cmp	r6, #0
 80074ec:	d140      	bne.n	8007570 <_malloc_r+0xcc>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	4631      	mov	r1, r6
 80074f2:	4638      	mov	r0, r7
 80074f4:	eb04 0803 	add.w	r8, r4, r3
 80074f8:	f000 fb7e 	bl	8007bf8 <_sbrk_r>
 80074fc:	4580      	cmp	r8, r0
 80074fe:	d13a      	bne.n	8007576 <_malloc_r+0xd2>
 8007500:	6821      	ldr	r1, [r4, #0]
 8007502:	3503      	adds	r5, #3
 8007504:	1a6d      	subs	r5, r5, r1
 8007506:	f025 0503 	bic.w	r5, r5, #3
 800750a:	3508      	adds	r5, #8
 800750c:	2d0c      	cmp	r5, #12
 800750e:	bf38      	it	cc
 8007510:	250c      	movcc	r5, #12
 8007512:	4629      	mov	r1, r5
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff ffa5 	bl	8007464 <sbrk_aligned>
 800751a:	3001      	adds	r0, #1
 800751c:	d02b      	beq.n	8007576 <_malloc_r+0xd2>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	442b      	add	r3, r5
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	e00e      	b.n	8007544 <_malloc_r+0xa0>
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	1b52      	subs	r2, r2, r5
 800752a:	d41e      	bmi.n	800756a <_malloc_r+0xc6>
 800752c:	2a0b      	cmp	r2, #11
 800752e:	d916      	bls.n	800755e <_malloc_r+0xba>
 8007530:	1961      	adds	r1, r4, r5
 8007532:	42a3      	cmp	r3, r4
 8007534:	6025      	str	r5, [r4, #0]
 8007536:	bf18      	it	ne
 8007538:	6059      	strne	r1, [r3, #4]
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	bf08      	it	eq
 800753e:	6031      	streq	r1, [r6, #0]
 8007540:	5162      	str	r2, [r4, r5]
 8007542:	604b      	str	r3, [r1, #4]
 8007544:	4638      	mov	r0, r7
 8007546:	f104 060b 	add.w	r6, r4, #11
 800754a:	f000 fdcb 	bl	80080e4 <__malloc_unlock>
 800754e:	f026 0607 	bic.w	r6, r6, #7
 8007552:	1d23      	adds	r3, r4, #4
 8007554:	1af2      	subs	r2, r6, r3
 8007556:	d0b6      	beq.n	80074c6 <_malloc_r+0x22>
 8007558:	1b9b      	subs	r3, r3, r6
 800755a:	50a3      	str	r3, [r4, r2]
 800755c:	e7b3      	b.n	80074c6 <_malloc_r+0x22>
 800755e:	6862      	ldr	r2, [r4, #4]
 8007560:	42a3      	cmp	r3, r4
 8007562:	bf0c      	ite	eq
 8007564:	6032      	streq	r2, [r6, #0]
 8007566:	605a      	strne	r2, [r3, #4]
 8007568:	e7ec      	b.n	8007544 <_malloc_r+0xa0>
 800756a:	4623      	mov	r3, r4
 800756c:	6864      	ldr	r4, [r4, #4]
 800756e:	e7b2      	b.n	80074d6 <_malloc_r+0x32>
 8007570:	4634      	mov	r4, r6
 8007572:	6876      	ldr	r6, [r6, #4]
 8007574:	e7b9      	b.n	80074ea <_malloc_r+0x46>
 8007576:	230c      	movs	r3, #12
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	4638      	mov	r0, r7
 800757c:	f000 fdb2 	bl	80080e4 <__malloc_unlock>
 8007580:	e7a1      	b.n	80074c6 <_malloc_r+0x22>
 8007582:	6025      	str	r5, [r4, #0]
 8007584:	e7de      	b.n	8007544 <_malloc_r+0xa0>
 8007586:	bf00      	nop
 8007588:	240008fc 	.word	0x240008fc

0800758c <__sfputc_r>:
 800758c:	6893      	ldr	r3, [r2, #8]
 800758e:	3b01      	subs	r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	b410      	push	{r4}
 8007594:	6093      	str	r3, [r2, #8]
 8007596:	da08      	bge.n	80075aa <__sfputc_r+0x1e>
 8007598:	6994      	ldr	r4, [r2, #24]
 800759a:	42a3      	cmp	r3, r4
 800759c:	db01      	blt.n	80075a2 <__sfputc_r+0x16>
 800759e:	290a      	cmp	r1, #10
 80075a0:	d103      	bne.n	80075aa <__sfputc_r+0x1e>
 80075a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a6:	f000 bb7b 	b.w	8007ca0 <__swbuf_r>
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	1c58      	adds	r0, r3, #1
 80075ae:	6010      	str	r0, [r2, #0]
 80075b0:	7019      	strb	r1, [r3, #0]
 80075b2:	4608      	mov	r0, r1
 80075b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <__sfputs_r>:
 80075ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075bc:	4606      	mov	r6, r0
 80075be:	460f      	mov	r7, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	18d5      	adds	r5, r2, r3
 80075c4:	42ac      	cmp	r4, r5
 80075c6:	d101      	bne.n	80075cc <__sfputs_r+0x12>
 80075c8:	2000      	movs	r0, #0
 80075ca:	e007      	b.n	80075dc <__sfputs_r+0x22>
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	463a      	mov	r2, r7
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ffda 	bl	800758c <__sfputc_r>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d1f3      	bne.n	80075c4 <__sfputs_r+0xa>
 80075dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075e0 <_vfiprintf_r>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	460d      	mov	r5, r1
 80075e6:	b09d      	sub	sp, #116	; 0x74
 80075e8:	4614      	mov	r4, r2
 80075ea:	4698      	mov	r8, r3
 80075ec:	4606      	mov	r6, r0
 80075ee:	b118      	cbz	r0, 80075f8 <_vfiprintf_r+0x18>
 80075f0:	6983      	ldr	r3, [r0, #24]
 80075f2:	b90b      	cbnz	r3, 80075f8 <_vfiprintf_r+0x18>
 80075f4:	f7ff fe96 	bl	8007324 <__sinit>
 80075f8:	4b89      	ldr	r3, [pc, #548]	; (8007820 <_vfiprintf_r+0x240>)
 80075fa:	429d      	cmp	r5, r3
 80075fc:	d11b      	bne.n	8007636 <_vfiprintf_r+0x56>
 80075fe:	6875      	ldr	r5, [r6, #4]
 8007600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007602:	07d9      	lsls	r1, r3, #31
 8007604:	d405      	bmi.n	8007612 <_vfiprintf_r+0x32>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	059a      	lsls	r2, r3, #22
 800760a:	d402      	bmi.n	8007612 <_vfiprintf_r+0x32>
 800760c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800760e:	f7ff ff27 	bl	8007460 <__retarget_lock_acquire_recursive>
 8007612:	89ab      	ldrh	r3, [r5, #12]
 8007614:	071b      	lsls	r3, r3, #28
 8007616:	d501      	bpl.n	800761c <_vfiprintf_r+0x3c>
 8007618:	692b      	ldr	r3, [r5, #16]
 800761a:	b9eb      	cbnz	r3, 8007658 <_vfiprintf_r+0x78>
 800761c:	4629      	mov	r1, r5
 800761e:	4630      	mov	r0, r6
 8007620:	f000 fba2 	bl	8007d68 <__swsetup_r>
 8007624:	b1c0      	cbz	r0, 8007658 <_vfiprintf_r+0x78>
 8007626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007628:	07dc      	lsls	r4, r3, #31
 800762a:	d50e      	bpl.n	800764a <_vfiprintf_r+0x6a>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007630:	b01d      	add	sp, #116	; 0x74
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007636:	4b7b      	ldr	r3, [pc, #492]	; (8007824 <_vfiprintf_r+0x244>)
 8007638:	429d      	cmp	r5, r3
 800763a:	d101      	bne.n	8007640 <_vfiprintf_r+0x60>
 800763c:	68b5      	ldr	r5, [r6, #8]
 800763e:	e7df      	b.n	8007600 <_vfiprintf_r+0x20>
 8007640:	4b79      	ldr	r3, [pc, #484]	; (8007828 <_vfiprintf_r+0x248>)
 8007642:	429d      	cmp	r5, r3
 8007644:	bf08      	it	eq
 8007646:	68f5      	ldreq	r5, [r6, #12]
 8007648:	e7da      	b.n	8007600 <_vfiprintf_r+0x20>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	0598      	lsls	r0, r3, #22
 800764e:	d4ed      	bmi.n	800762c <_vfiprintf_r+0x4c>
 8007650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007652:	f7ff ff06 	bl	8007462 <__retarget_lock_release_recursive>
 8007656:	e7e9      	b.n	800762c <_vfiprintf_r+0x4c>
 8007658:	2300      	movs	r3, #0
 800765a:	9309      	str	r3, [sp, #36]	; 0x24
 800765c:	2320      	movs	r3, #32
 800765e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007662:	f8cd 800c 	str.w	r8, [sp, #12]
 8007666:	2330      	movs	r3, #48	; 0x30
 8007668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800782c <_vfiprintf_r+0x24c>
 800766c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007670:	f04f 0901 	mov.w	r9, #1
 8007674:	4623      	mov	r3, r4
 8007676:	469a      	mov	sl, r3
 8007678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800767c:	b10a      	cbz	r2, 8007682 <_vfiprintf_r+0xa2>
 800767e:	2a25      	cmp	r2, #37	; 0x25
 8007680:	d1f9      	bne.n	8007676 <_vfiprintf_r+0x96>
 8007682:	ebba 0b04 	subs.w	fp, sl, r4
 8007686:	d00b      	beq.n	80076a0 <_vfiprintf_r+0xc0>
 8007688:	465b      	mov	r3, fp
 800768a:	4622      	mov	r2, r4
 800768c:	4629      	mov	r1, r5
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff ff93 	bl	80075ba <__sfputs_r>
 8007694:	3001      	adds	r0, #1
 8007696:	f000 80aa 	beq.w	80077ee <_vfiprintf_r+0x20e>
 800769a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800769c:	445a      	add	r2, fp
 800769e:	9209      	str	r2, [sp, #36]	; 0x24
 80076a0:	f89a 3000 	ldrb.w	r3, [sl]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80a2 	beq.w	80077ee <_vfiprintf_r+0x20e>
 80076aa:	2300      	movs	r3, #0
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b4:	f10a 0a01 	add.w	sl, sl, #1
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	9307      	str	r3, [sp, #28]
 80076bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076c0:	931a      	str	r3, [sp, #104]	; 0x68
 80076c2:	4654      	mov	r4, sl
 80076c4:	2205      	movs	r2, #5
 80076c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ca:	4858      	ldr	r0, [pc, #352]	; (800782c <_vfiprintf_r+0x24c>)
 80076cc:	f7f8 fe08 	bl	80002e0 <memchr>
 80076d0:	9a04      	ldr	r2, [sp, #16]
 80076d2:	b9d8      	cbnz	r0, 800770c <_vfiprintf_r+0x12c>
 80076d4:	06d1      	lsls	r1, r2, #27
 80076d6:	bf44      	itt	mi
 80076d8:	2320      	movmi	r3, #32
 80076da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076de:	0713      	lsls	r3, r2, #28
 80076e0:	bf44      	itt	mi
 80076e2:	232b      	movmi	r3, #43	; 0x2b
 80076e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e8:	f89a 3000 	ldrb.w	r3, [sl]
 80076ec:	2b2a      	cmp	r3, #42	; 0x2a
 80076ee:	d015      	beq.n	800771c <_vfiprintf_r+0x13c>
 80076f0:	9a07      	ldr	r2, [sp, #28]
 80076f2:	4654      	mov	r4, sl
 80076f4:	2000      	movs	r0, #0
 80076f6:	f04f 0c0a 	mov.w	ip, #10
 80076fa:	4621      	mov	r1, r4
 80076fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007700:	3b30      	subs	r3, #48	; 0x30
 8007702:	2b09      	cmp	r3, #9
 8007704:	d94e      	bls.n	80077a4 <_vfiprintf_r+0x1c4>
 8007706:	b1b0      	cbz	r0, 8007736 <_vfiprintf_r+0x156>
 8007708:	9207      	str	r2, [sp, #28]
 800770a:	e014      	b.n	8007736 <_vfiprintf_r+0x156>
 800770c:	eba0 0308 	sub.w	r3, r0, r8
 8007710:	fa09 f303 	lsl.w	r3, r9, r3
 8007714:	4313      	orrs	r3, r2
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	46a2      	mov	sl, r4
 800771a:	e7d2      	b.n	80076c2 <_vfiprintf_r+0xe2>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	1d19      	adds	r1, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	9103      	str	r1, [sp, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfbb      	ittet	lt
 8007728:	425b      	neglt	r3, r3
 800772a:	f042 0202 	orrlt.w	r2, r2, #2
 800772e:	9307      	strge	r3, [sp, #28]
 8007730:	9307      	strlt	r3, [sp, #28]
 8007732:	bfb8      	it	lt
 8007734:	9204      	strlt	r2, [sp, #16]
 8007736:	7823      	ldrb	r3, [r4, #0]
 8007738:	2b2e      	cmp	r3, #46	; 0x2e
 800773a:	d10c      	bne.n	8007756 <_vfiprintf_r+0x176>
 800773c:	7863      	ldrb	r3, [r4, #1]
 800773e:	2b2a      	cmp	r3, #42	; 0x2a
 8007740:	d135      	bne.n	80077ae <_vfiprintf_r+0x1ce>
 8007742:	9b03      	ldr	r3, [sp, #12]
 8007744:	1d1a      	adds	r2, r3, #4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	9203      	str	r2, [sp, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	bfb8      	it	lt
 800774e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007752:	3402      	adds	r4, #2
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800783c <_vfiprintf_r+0x25c>
 800775a:	7821      	ldrb	r1, [r4, #0]
 800775c:	2203      	movs	r2, #3
 800775e:	4650      	mov	r0, sl
 8007760:	f7f8 fdbe 	bl	80002e0 <memchr>
 8007764:	b140      	cbz	r0, 8007778 <_vfiprintf_r+0x198>
 8007766:	2340      	movs	r3, #64	; 0x40
 8007768:	eba0 000a 	sub.w	r0, r0, sl
 800776c:	fa03 f000 	lsl.w	r0, r3, r0
 8007770:	9b04      	ldr	r3, [sp, #16]
 8007772:	4303      	orrs	r3, r0
 8007774:	3401      	adds	r4, #1
 8007776:	9304      	str	r3, [sp, #16]
 8007778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777c:	482c      	ldr	r0, [pc, #176]	; (8007830 <_vfiprintf_r+0x250>)
 800777e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007782:	2206      	movs	r2, #6
 8007784:	f7f8 fdac 	bl	80002e0 <memchr>
 8007788:	2800      	cmp	r0, #0
 800778a:	d03f      	beq.n	800780c <_vfiprintf_r+0x22c>
 800778c:	4b29      	ldr	r3, [pc, #164]	; (8007834 <_vfiprintf_r+0x254>)
 800778e:	bb1b      	cbnz	r3, 80077d8 <_vfiprintf_r+0x1f8>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	3307      	adds	r3, #7
 8007794:	f023 0307 	bic.w	r3, r3, #7
 8007798:	3308      	adds	r3, #8
 800779a:	9303      	str	r3, [sp, #12]
 800779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779e:	443b      	add	r3, r7
 80077a0:	9309      	str	r3, [sp, #36]	; 0x24
 80077a2:	e767      	b.n	8007674 <_vfiprintf_r+0x94>
 80077a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a8:	460c      	mov	r4, r1
 80077aa:	2001      	movs	r0, #1
 80077ac:	e7a5      	b.n	80076fa <_vfiprintf_r+0x11a>
 80077ae:	2300      	movs	r3, #0
 80077b0:	3401      	adds	r4, #1
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	4619      	mov	r1, r3
 80077b6:	f04f 0c0a 	mov.w	ip, #10
 80077ba:	4620      	mov	r0, r4
 80077bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c0:	3a30      	subs	r2, #48	; 0x30
 80077c2:	2a09      	cmp	r2, #9
 80077c4:	d903      	bls.n	80077ce <_vfiprintf_r+0x1ee>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0c5      	beq.n	8007756 <_vfiprintf_r+0x176>
 80077ca:	9105      	str	r1, [sp, #20]
 80077cc:	e7c3      	b.n	8007756 <_vfiprintf_r+0x176>
 80077ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d2:	4604      	mov	r4, r0
 80077d4:	2301      	movs	r3, #1
 80077d6:	e7f0      	b.n	80077ba <_vfiprintf_r+0x1da>
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	462a      	mov	r2, r5
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <_vfiprintf_r+0x258>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4630      	mov	r0, r6
 80077e4:	f3af 8000 	nop.w
 80077e8:	4607      	mov	r7, r0
 80077ea:	1c78      	adds	r0, r7, #1
 80077ec:	d1d6      	bne.n	800779c <_vfiprintf_r+0x1bc>
 80077ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f0:	07d9      	lsls	r1, r3, #31
 80077f2:	d405      	bmi.n	8007800 <_vfiprintf_r+0x220>
 80077f4:	89ab      	ldrh	r3, [r5, #12]
 80077f6:	059a      	lsls	r2, r3, #22
 80077f8:	d402      	bmi.n	8007800 <_vfiprintf_r+0x220>
 80077fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077fc:	f7ff fe31 	bl	8007462 <__retarget_lock_release_recursive>
 8007800:	89ab      	ldrh	r3, [r5, #12]
 8007802:	065b      	lsls	r3, r3, #25
 8007804:	f53f af12 	bmi.w	800762c <_vfiprintf_r+0x4c>
 8007808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800780a:	e711      	b.n	8007630 <_vfiprintf_r+0x50>
 800780c:	ab03      	add	r3, sp, #12
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	462a      	mov	r2, r5
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <_vfiprintf_r+0x258>)
 8007814:	a904      	add	r1, sp, #16
 8007816:	4630      	mov	r0, r6
 8007818:	f000 f880 	bl	800791c <_printf_i>
 800781c:	e7e4      	b.n	80077e8 <_vfiprintf_r+0x208>
 800781e:	bf00      	nop
 8007820:	080082f4 	.word	0x080082f4
 8007824:	08008314 	.word	0x08008314
 8007828:	080082d4 	.word	0x080082d4
 800782c:	08008334 	.word	0x08008334
 8007830:	0800833e 	.word	0x0800833e
 8007834:	00000000 	.word	0x00000000
 8007838:	080075bb 	.word	0x080075bb
 800783c:	0800833a 	.word	0x0800833a

08007840 <_printf_common>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	4616      	mov	r6, r2
 8007846:	4699      	mov	r9, r3
 8007848:	688a      	ldr	r2, [r1, #8]
 800784a:	690b      	ldr	r3, [r1, #16]
 800784c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007850:	4293      	cmp	r3, r2
 8007852:	bfb8      	it	lt
 8007854:	4613      	movlt	r3, r2
 8007856:	6033      	str	r3, [r6, #0]
 8007858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800785c:	4607      	mov	r7, r0
 800785e:	460c      	mov	r4, r1
 8007860:	b10a      	cbz	r2, 8007866 <_printf_common+0x26>
 8007862:	3301      	adds	r3, #1
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	0699      	lsls	r1, r3, #26
 800786a:	bf42      	ittt	mi
 800786c:	6833      	ldrmi	r3, [r6, #0]
 800786e:	3302      	addmi	r3, #2
 8007870:	6033      	strmi	r3, [r6, #0]
 8007872:	6825      	ldr	r5, [r4, #0]
 8007874:	f015 0506 	ands.w	r5, r5, #6
 8007878:	d106      	bne.n	8007888 <_printf_common+0x48>
 800787a:	f104 0a19 	add.w	sl, r4, #25
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	6832      	ldr	r2, [r6, #0]
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	42ab      	cmp	r3, r5
 8007886:	dc26      	bgt.n	80078d6 <_printf_common+0x96>
 8007888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800788c:	1e13      	subs	r3, r2, #0
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	bf18      	it	ne
 8007892:	2301      	movne	r3, #1
 8007894:	0692      	lsls	r2, r2, #26
 8007896:	d42b      	bmi.n	80078f0 <_printf_common+0xb0>
 8007898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800789c:	4649      	mov	r1, r9
 800789e:	4638      	mov	r0, r7
 80078a0:	47c0      	blx	r8
 80078a2:	3001      	adds	r0, #1
 80078a4:	d01e      	beq.n	80078e4 <_printf_common+0xa4>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	68e5      	ldr	r5, [r4, #12]
 80078aa:	6832      	ldr	r2, [r6, #0]
 80078ac:	f003 0306 	and.w	r3, r3, #6
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	bf08      	it	eq
 80078b4:	1aad      	subeq	r5, r5, r2
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	bf0c      	ite	eq
 80078bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c0:	2500      	movne	r5, #0
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bfc4      	itt	gt
 80078c6:	1a9b      	subgt	r3, r3, r2
 80078c8:	18ed      	addgt	r5, r5, r3
 80078ca:	2600      	movs	r6, #0
 80078cc:	341a      	adds	r4, #26
 80078ce:	42b5      	cmp	r5, r6
 80078d0:	d11a      	bne.n	8007908 <_printf_common+0xc8>
 80078d2:	2000      	movs	r0, #0
 80078d4:	e008      	b.n	80078e8 <_printf_common+0xa8>
 80078d6:	2301      	movs	r3, #1
 80078d8:	4652      	mov	r2, sl
 80078da:	4649      	mov	r1, r9
 80078dc:	4638      	mov	r0, r7
 80078de:	47c0      	blx	r8
 80078e0:	3001      	adds	r0, #1
 80078e2:	d103      	bne.n	80078ec <_printf_common+0xac>
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ec:	3501      	adds	r5, #1
 80078ee:	e7c6      	b.n	800787e <_printf_common+0x3e>
 80078f0:	18e1      	adds	r1, r4, r3
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	2030      	movs	r0, #48	; 0x30
 80078f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078fa:	4422      	add	r2, r4
 80078fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007904:	3302      	adds	r3, #2
 8007906:	e7c7      	b.n	8007898 <_printf_common+0x58>
 8007908:	2301      	movs	r3, #1
 800790a:	4622      	mov	r2, r4
 800790c:	4649      	mov	r1, r9
 800790e:	4638      	mov	r0, r7
 8007910:	47c0      	blx	r8
 8007912:	3001      	adds	r0, #1
 8007914:	d0e6      	beq.n	80078e4 <_printf_common+0xa4>
 8007916:	3601      	adds	r6, #1
 8007918:	e7d9      	b.n	80078ce <_printf_common+0x8e>
	...

0800791c <_printf_i>:
 800791c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	7e0f      	ldrb	r7, [r1, #24]
 8007922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007924:	2f78      	cmp	r7, #120	; 0x78
 8007926:	4691      	mov	r9, r2
 8007928:	4680      	mov	r8, r0
 800792a:	460c      	mov	r4, r1
 800792c:	469a      	mov	sl, r3
 800792e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007932:	d807      	bhi.n	8007944 <_printf_i+0x28>
 8007934:	2f62      	cmp	r7, #98	; 0x62
 8007936:	d80a      	bhi.n	800794e <_printf_i+0x32>
 8007938:	2f00      	cmp	r7, #0
 800793a:	f000 80d8 	beq.w	8007aee <_printf_i+0x1d2>
 800793e:	2f58      	cmp	r7, #88	; 0x58
 8007940:	f000 80a3 	beq.w	8007a8a <_printf_i+0x16e>
 8007944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800794c:	e03a      	b.n	80079c4 <_printf_i+0xa8>
 800794e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007952:	2b15      	cmp	r3, #21
 8007954:	d8f6      	bhi.n	8007944 <_printf_i+0x28>
 8007956:	a101      	add	r1, pc, #4	; (adr r1, 800795c <_printf_i+0x40>)
 8007958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800795c:	080079b5 	.word	0x080079b5
 8007960:	080079c9 	.word	0x080079c9
 8007964:	08007945 	.word	0x08007945
 8007968:	08007945 	.word	0x08007945
 800796c:	08007945 	.word	0x08007945
 8007970:	08007945 	.word	0x08007945
 8007974:	080079c9 	.word	0x080079c9
 8007978:	08007945 	.word	0x08007945
 800797c:	08007945 	.word	0x08007945
 8007980:	08007945 	.word	0x08007945
 8007984:	08007945 	.word	0x08007945
 8007988:	08007ad5 	.word	0x08007ad5
 800798c:	080079f9 	.word	0x080079f9
 8007990:	08007ab7 	.word	0x08007ab7
 8007994:	08007945 	.word	0x08007945
 8007998:	08007945 	.word	0x08007945
 800799c:	08007af7 	.word	0x08007af7
 80079a0:	08007945 	.word	0x08007945
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	08007945 	.word	0x08007945
 80079ac:	08007945 	.word	0x08007945
 80079b0:	08007abf 	.word	0x08007abf
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	1d1a      	adds	r2, r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	602a      	str	r2, [r5, #0]
 80079bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c4:	2301      	movs	r3, #1
 80079c6:	e0a3      	b.n	8007b10 <_printf_i+0x1f4>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	6829      	ldr	r1, [r5, #0]
 80079cc:	0606      	lsls	r6, r0, #24
 80079ce:	f101 0304 	add.w	r3, r1, #4
 80079d2:	d50a      	bpl.n	80079ea <_printf_i+0xce>
 80079d4:	680e      	ldr	r6, [r1, #0]
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	2e00      	cmp	r6, #0
 80079da:	da03      	bge.n	80079e4 <_printf_i+0xc8>
 80079dc:	232d      	movs	r3, #45	; 0x2d
 80079de:	4276      	negs	r6, r6
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e4:	485e      	ldr	r0, [pc, #376]	; (8007b60 <_printf_i+0x244>)
 80079e6:	230a      	movs	r3, #10
 80079e8:	e019      	b.n	8007a1e <_printf_i+0x102>
 80079ea:	680e      	ldr	r6, [r1, #0]
 80079ec:	602b      	str	r3, [r5, #0]
 80079ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079f2:	bf18      	it	ne
 80079f4:	b236      	sxthne	r6, r6
 80079f6:	e7ef      	b.n	80079d8 <_printf_i+0xbc>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	6820      	ldr	r0, [r4, #0]
 80079fc:	1d19      	adds	r1, r3, #4
 80079fe:	6029      	str	r1, [r5, #0]
 8007a00:	0601      	lsls	r1, r0, #24
 8007a02:	d501      	bpl.n	8007a08 <_printf_i+0xec>
 8007a04:	681e      	ldr	r6, [r3, #0]
 8007a06:	e002      	b.n	8007a0e <_printf_i+0xf2>
 8007a08:	0646      	lsls	r6, r0, #25
 8007a0a:	d5fb      	bpl.n	8007a04 <_printf_i+0xe8>
 8007a0c:	881e      	ldrh	r6, [r3, #0]
 8007a0e:	4854      	ldr	r0, [pc, #336]	; (8007b60 <_printf_i+0x244>)
 8007a10:	2f6f      	cmp	r7, #111	; 0x6f
 8007a12:	bf0c      	ite	eq
 8007a14:	2308      	moveq	r3, #8
 8007a16:	230a      	movne	r3, #10
 8007a18:	2100      	movs	r1, #0
 8007a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a1e:	6865      	ldr	r5, [r4, #4]
 8007a20:	60a5      	str	r5, [r4, #8]
 8007a22:	2d00      	cmp	r5, #0
 8007a24:	bfa2      	ittt	ge
 8007a26:	6821      	ldrge	r1, [r4, #0]
 8007a28:	f021 0104 	bicge.w	r1, r1, #4
 8007a2c:	6021      	strge	r1, [r4, #0]
 8007a2e:	b90e      	cbnz	r6, 8007a34 <_printf_i+0x118>
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	d04d      	beq.n	8007ad0 <_printf_i+0x1b4>
 8007a34:	4615      	mov	r5, r2
 8007a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a3e:	5dc7      	ldrb	r7, [r0, r7]
 8007a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a44:	4637      	mov	r7, r6
 8007a46:	42bb      	cmp	r3, r7
 8007a48:	460e      	mov	r6, r1
 8007a4a:	d9f4      	bls.n	8007a36 <_printf_i+0x11a>
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d10b      	bne.n	8007a68 <_printf_i+0x14c>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	07de      	lsls	r6, r3, #31
 8007a54:	d508      	bpl.n	8007a68 <_printf_i+0x14c>
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	6861      	ldr	r1, [r4, #4]
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	bfde      	ittt	le
 8007a5e:	2330      	movle	r3, #48	; 0x30
 8007a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a68:	1b52      	subs	r2, r2, r5
 8007a6a:	6122      	str	r2, [r4, #16]
 8007a6c:	f8cd a000 	str.w	sl, [sp]
 8007a70:	464b      	mov	r3, r9
 8007a72:	aa03      	add	r2, sp, #12
 8007a74:	4621      	mov	r1, r4
 8007a76:	4640      	mov	r0, r8
 8007a78:	f7ff fee2 	bl	8007840 <_printf_common>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d14c      	bne.n	8007b1a <_printf_i+0x1fe>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a84:	b004      	add	sp, #16
 8007a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8a:	4835      	ldr	r0, [pc, #212]	; (8007b60 <_printf_i+0x244>)
 8007a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a90:	6829      	ldr	r1, [r5, #0]
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a98:	6029      	str	r1, [r5, #0]
 8007a9a:	061d      	lsls	r5, r3, #24
 8007a9c:	d514      	bpl.n	8007ac8 <_printf_i+0x1ac>
 8007a9e:	07df      	lsls	r7, r3, #31
 8007aa0:	bf44      	itt	mi
 8007aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8007aa6:	6023      	strmi	r3, [r4, #0]
 8007aa8:	b91e      	cbnz	r6, 8007ab2 <_printf_i+0x196>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	f023 0320 	bic.w	r3, r3, #32
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	2310      	movs	r3, #16
 8007ab4:	e7b0      	b.n	8007a18 <_printf_i+0xfc>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	f043 0320 	orr.w	r3, r3, #32
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	2378      	movs	r3, #120	; 0x78
 8007ac0:	4828      	ldr	r0, [pc, #160]	; (8007b64 <_printf_i+0x248>)
 8007ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ac6:	e7e3      	b.n	8007a90 <_printf_i+0x174>
 8007ac8:	0659      	lsls	r1, r3, #25
 8007aca:	bf48      	it	mi
 8007acc:	b2b6      	uxthmi	r6, r6
 8007ace:	e7e6      	b.n	8007a9e <_printf_i+0x182>
 8007ad0:	4615      	mov	r5, r2
 8007ad2:	e7bb      	b.n	8007a4c <_printf_i+0x130>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	6826      	ldr	r6, [r4, #0]
 8007ad8:	6961      	ldr	r1, [r4, #20]
 8007ada:	1d18      	adds	r0, r3, #4
 8007adc:	6028      	str	r0, [r5, #0]
 8007ade:	0635      	lsls	r5, r6, #24
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	d501      	bpl.n	8007ae8 <_printf_i+0x1cc>
 8007ae4:	6019      	str	r1, [r3, #0]
 8007ae6:	e002      	b.n	8007aee <_printf_i+0x1d2>
 8007ae8:	0670      	lsls	r0, r6, #25
 8007aea:	d5fb      	bpl.n	8007ae4 <_printf_i+0x1c8>
 8007aec:	8019      	strh	r1, [r3, #0]
 8007aee:	2300      	movs	r3, #0
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	4615      	mov	r5, r2
 8007af4:	e7ba      	b.n	8007a6c <_printf_i+0x150>
 8007af6:	682b      	ldr	r3, [r5, #0]
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	602a      	str	r2, [r5, #0]
 8007afc:	681d      	ldr	r5, [r3, #0]
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	2100      	movs	r1, #0
 8007b02:	4628      	mov	r0, r5
 8007b04:	f7f8 fbec 	bl	80002e0 <memchr>
 8007b08:	b108      	cbz	r0, 8007b0e <_printf_i+0x1f2>
 8007b0a:	1b40      	subs	r0, r0, r5
 8007b0c:	6060      	str	r0, [r4, #4]
 8007b0e:	6863      	ldr	r3, [r4, #4]
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	2300      	movs	r3, #0
 8007b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b18:	e7a8      	b.n	8007a6c <_printf_i+0x150>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	4649      	mov	r1, r9
 8007b20:	4640      	mov	r0, r8
 8007b22:	47d0      	blx	sl
 8007b24:	3001      	adds	r0, #1
 8007b26:	d0ab      	beq.n	8007a80 <_printf_i+0x164>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	079b      	lsls	r3, r3, #30
 8007b2c:	d413      	bmi.n	8007b56 <_printf_i+0x23a>
 8007b2e:	68e0      	ldr	r0, [r4, #12]
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	4298      	cmp	r0, r3
 8007b34:	bfb8      	it	lt
 8007b36:	4618      	movlt	r0, r3
 8007b38:	e7a4      	b.n	8007a84 <_printf_i+0x168>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d09b      	beq.n	8007a80 <_printf_i+0x164>
 8007b48:	3501      	adds	r5, #1
 8007b4a:	68e3      	ldr	r3, [r4, #12]
 8007b4c:	9903      	ldr	r1, [sp, #12]
 8007b4e:	1a5b      	subs	r3, r3, r1
 8007b50:	42ab      	cmp	r3, r5
 8007b52:	dcf2      	bgt.n	8007b3a <_printf_i+0x21e>
 8007b54:	e7eb      	b.n	8007b2e <_printf_i+0x212>
 8007b56:	2500      	movs	r5, #0
 8007b58:	f104 0619 	add.w	r6, r4, #25
 8007b5c:	e7f5      	b.n	8007b4a <_printf_i+0x22e>
 8007b5e:	bf00      	nop
 8007b60:	08008345 	.word	0x08008345
 8007b64:	08008356 	.word	0x08008356

08007b68 <_putc_r>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	4606      	mov	r6, r0
 8007b70:	b118      	cbz	r0, 8007b7a <_putc_r+0x12>
 8007b72:	6983      	ldr	r3, [r0, #24]
 8007b74:	b90b      	cbnz	r3, 8007b7a <_putc_r+0x12>
 8007b76:	f7ff fbd5 	bl	8007324 <__sinit>
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <_putc_r+0x84>)
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d124      	bne.n	8007bca <_putc_r+0x62>
 8007b80:	6874      	ldr	r4, [r6, #4]
 8007b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b84:	07d8      	lsls	r0, r3, #31
 8007b86:	d405      	bmi.n	8007b94 <_putc_r+0x2c>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	0599      	lsls	r1, r3, #22
 8007b8c:	d402      	bmi.n	8007b94 <_putc_r+0x2c>
 8007b8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b90:	f7ff fc66 	bl	8007460 <__retarget_lock_acquire_recursive>
 8007b94:	68a3      	ldr	r3, [r4, #8]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	60a3      	str	r3, [r4, #8]
 8007b9c:	da05      	bge.n	8007baa <_putc_r+0x42>
 8007b9e:	69a2      	ldr	r2, [r4, #24]
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	db1c      	blt.n	8007bde <_putc_r+0x76>
 8007ba4:	b2eb      	uxtb	r3, r5
 8007ba6:	2b0a      	cmp	r3, #10
 8007ba8:	d019      	beq.n	8007bde <_putc_r+0x76>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	701d      	strb	r5, [r3, #0]
 8007bb2:	b2ed      	uxtb	r5, r5
 8007bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb6:	07da      	lsls	r2, r3, #31
 8007bb8:	d405      	bmi.n	8007bc6 <_putc_r+0x5e>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	059b      	lsls	r3, r3, #22
 8007bbe:	d402      	bmi.n	8007bc6 <_putc_r+0x5e>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc2:	f7ff fc4e 	bl	8007462 <__retarget_lock_release_recursive>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	bd70      	pop	{r4, r5, r6, pc}
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <_putc_r+0x88>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d101      	bne.n	8007bd4 <_putc_r+0x6c>
 8007bd0:	68b4      	ldr	r4, [r6, #8]
 8007bd2:	e7d6      	b.n	8007b82 <_putc_r+0x1a>
 8007bd4:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <_putc_r+0x8c>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	bf08      	it	eq
 8007bda:	68f4      	ldreq	r4, [r6, #12]
 8007bdc:	e7d1      	b.n	8007b82 <_putc_r+0x1a>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4622      	mov	r2, r4
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 f85c 	bl	8007ca0 <__swbuf_r>
 8007be8:	4605      	mov	r5, r0
 8007bea:	e7e3      	b.n	8007bb4 <_putc_r+0x4c>
 8007bec:	080082f4 	.word	0x080082f4
 8007bf0:	08008314 	.word	0x08008314
 8007bf4:	080082d4 	.word	0x080082d4

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	; (8007c14 <_sbrk_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7f9 fbae 	bl	8001364 <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	24000904 	.word	0x24000904

08007c18 <__sread>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c20:	f000 fab2 	bl	8008188 <_read_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	bfab      	itete	ge
 8007c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c2c:	181b      	addge	r3, r3, r0
 8007c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c32:	bfac      	ite	ge
 8007c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c36:	81a3      	strhlt	r3, [r4, #12]
 8007c38:	bd10      	pop	{r4, pc}

08007c3a <__swrite>:
 8007c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	461f      	mov	r7, r3
 8007c40:	898b      	ldrh	r3, [r1, #12]
 8007c42:	05db      	lsls	r3, r3, #23
 8007c44:	4605      	mov	r5, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	4616      	mov	r6, r2
 8007c4a:	d505      	bpl.n	8007c58 <__swrite+0x1e>
 8007c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c50:	2302      	movs	r3, #2
 8007c52:	2200      	movs	r2, #0
 8007c54:	f000 f9c8 	bl	8007fe8 <_lseek_r>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	4632      	mov	r2, r6
 8007c66:	463b      	mov	r3, r7
 8007c68:	4628      	mov	r0, r5
 8007c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6e:	f000 b869 	b.w	8007d44 <_write_r>

08007c72 <__sseek>:
 8007c72:	b510      	push	{r4, lr}
 8007c74:	460c      	mov	r4, r1
 8007c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7a:	f000 f9b5 	bl	8007fe8 <_lseek_r>
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	bf15      	itete	ne
 8007c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c8e:	81a3      	strheq	r3, [r4, #12]
 8007c90:	bf18      	it	ne
 8007c92:	81a3      	strhne	r3, [r4, #12]
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <__sclose>:
 8007c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9a:	f000 b8d3 	b.w	8007e44 <_close_r>
	...

08007ca0 <__swbuf_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	460e      	mov	r6, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b118      	cbz	r0, 8007cb2 <__swbuf_r+0x12>
 8007caa:	6983      	ldr	r3, [r0, #24]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <__swbuf_r+0x12>
 8007cae:	f7ff fb39 	bl	8007324 <__sinit>
 8007cb2:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <__swbuf_r+0x98>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d12b      	bne.n	8007d10 <__swbuf_r+0x70>
 8007cb8:	686c      	ldr	r4, [r5, #4]
 8007cba:	69a3      	ldr	r3, [r4, #24]
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	071a      	lsls	r2, r3, #28
 8007cc2:	d52f      	bpl.n	8007d24 <__swbuf_r+0x84>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	b36b      	cbz	r3, 8007d24 <__swbuf_r+0x84>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	1ac0      	subs	r0, r0, r3
 8007cce:	6963      	ldr	r3, [r4, #20]
 8007cd0:	b2f6      	uxtb	r6, r6
 8007cd2:	4283      	cmp	r3, r0
 8007cd4:	4637      	mov	r7, r6
 8007cd6:	dc04      	bgt.n	8007ce2 <__swbuf_r+0x42>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f948 	bl	8007f70 <_fflush_r>
 8007ce0:	bb30      	cbnz	r0, 8007d30 <__swbuf_r+0x90>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	60a3      	str	r3, [r4, #8]
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	701e      	strb	r6, [r3, #0]
 8007cf0:	6963      	ldr	r3, [r4, #20]
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	4283      	cmp	r3, r0
 8007cf6:	d004      	beq.n	8007d02 <__swbuf_r+0x62>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	07db      	lsls	r3, r3, #31
 8007cfc:	d506      	bpl.n	8007d0c <__swbuf_r+0x6c>
 8007cfe:	2e0a      	cmp	r6, #10
 8007d00:	d104      	bne.n	8007d0c <__swbuf_r+0x6c>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 f933 	bl	8007f70 <_fflush_r>
 8007d0a:	b988      	cbnz	r0, 8007d30 <__swbuf_r+0x90>
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <__swbuf_r+0x9c>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d101      	bne.n	8007d1a <__swbuf_r+0x7a>
 8007d16:	68ac      	ldr	r4, [r5, #8]
 8007d18:	e7cf      	b.n	8007cba <__swbuf_r+0x1a>
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <__swbuf_r+0xa0>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	bf08      	it	eq
 8007d20:	68ec      	ldreq	r4, [r5, #12]
 8007d22:	e7ca      	b.n	8007cba <__swbuf_r+0x1a>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f81e 	bl	8007d68 <__swsetup_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d0cb      	beq.n	8007cc8 <__swbuf_r+0x28>
 8007d30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d34:	e7ea      	b.n	8007d0c <__swbuf_r+0x6c>
 8007d36:	bf00      	nop
 8007d38:	080082f4 	.word	0x080082f4
 8007d3c:	08008314 	.word	0x08008314
 8007d40:	080082d4 	.word	0x080082d4

08007d44 <_write_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d07      	ldr	r5, [pc, #28]	; (8007d64 <_write_r+0x20>)
 8007d48:	4604      	mov	r4, r0
 8007d4a:	4608      	mov	r0, r1
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	2200      	movs	r2, #0
 8007d50:	602a      	str	r2, [r5, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f7f9 fab5 	bl	80012c2 <_write>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_write_r+0x1e>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_write_r+0x1e>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	24000904 	.word	0x24000904

08007d68 <__swsetup_r>:
 8007d68:	4b32      	ldr	r3, [pc, #200]	; (8007e34 <__swsetup_r+0xcc>)
 8007d6a:	b570      	push	{r4, r5, r6, lr}
 8007d6c:	681d      	ldr	r5, [r3, #0]
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	b125      	cbz	r5, 8007d7e <__swsetup_r+0x16>
 8007d74:	69ab      	ldr	r3, [r5, #24]
 8007d76:	b913      	cbnz	r3, 8007d7e <__swsetup_r+0x16>
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f7ff fad3 	bl	8007324 <__sinit>
 8007d7e:	4b2e      	ldr	r3, [pc, #184]	; (8007e38 <__swsetup_r+0xd0>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d10f      	bne.n	8007da4 <__swsetup_r+0x3c>
 8007d84:	686c      	ldr	r4, [r5, #4]
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d8c:	0719      	lsls	r1, r3, #28
 8007d8e:	d42c      	bmi.n	8007dea <__swsetup_r+0x82>
 8007d90:	06dd      	lsls	r5, r3, #27
 8007d92:	d411      	bmi.n	8007db8 <__swsetup_r+0x50>
 8007d94:	2309      	movs	r3, #9
 8007d96:	6033      	str	r3, [r6, #0]
 8007d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da2:	e03e      	b.n	8007e22 <__swsetup_r+0xba>
 8007da4:	4b25      	ldr	r3, [pc, #148]	; (8007e3c <__swsetup_r+0xd4>)
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d101      	bne.n	8007dae <__swsetup_r+0x46>
 8007daa:	68ac      	ldr	r4, [r5, #8]
 8007dac:	e7eb      	b.n	8007d86 <__swsetup_r+0x1e>
 8007dae:	4b24      	ldr	r3, [pc, #144]	; (8007e40 <__swsetup_r+0xd8>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	bf08      	it	eq
 8007db4:	68ec      	ldreq	r4, [r5, #12]
 8007db6:	e7e6      	b.n	8007d86 <__swsetup_r+0x1e>
 8007db8:	0758      	lsls	r0, r3, #29
 8007dba:	d512      	bpl.n	8007de2 <__swsetup_r+0x7a>
 8007dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dbe:	b141      	cbz	r1, 8007dd2 <__swsetup_r+0x6a>
 8007dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d002      	beq.n	8007dce <__swsetup_r+0x66>
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f991 	bl	80080f0 <_free_r>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f043 0308 	orr.w	r3, r3, #8
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	b94b      	cbnz	r3, 8007e02 <__swsetup_r+0x9a>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df8:	d003      	beq.n	8007e02 <__swsetup_r+0x9a>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 f92b 	bl	8008058 <__smakebuf_r>
 8007e02:	89a0      	ldrh	r0, [r4, #12]
 8007e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e08:	f010 0301 	ands.w	r3, r0, #1
 8007e0c:	d00a      	beq.n	8007e24 <__swsetup_r+0xbc>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60a3      	str	r3, [r4, #8]
 8007e12:	6963      	ldr	r3, [r4, #20]
 8007e14:	425b      	negs	r3, r3
 8007e16:	61a3      	str	r3, [r4, #24]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	b943      	cbnz	r3, 8007e2e <__swsetup_r+0xc6>
 8007e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e20:	d1ba      	bne.n	8007d98 <__swsetup_r+0x30>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	0781      	lsls	r1, r0, #30
 8007e26:	bf58      	it	pl
 8007e28:	6963      	ldrpl	r3, [r4, #20]
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	e7f4      	b.n	8007e18 <__swsetup_r+0xb0>
 8007e2e:	2000      	movs	r0, #0
 8007e30:	e7f7      	b.n	8007e22 <__swsetup_r+0xba>
 8007e32:	bf00      	nop
 8007e34:	24000010 	.word	0x24000010
 8007e38:	080082f4 	.word	0x080082f4
 8007e3c:	08008314 	.word	0x08008314
 8007e40:	080082d4 	.word	0x080082d4

08007e44 <_close_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d06      	ldr	r5, [pc, #24]	; (8007e60 <_close_r+0x1c>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7f9 fa53 	bl	80012fa <_close>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_close_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_close_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	24000904 	.word	0x24000904

08007e64 <__sflush_r>:
 8007e64:	898a      	ldrh	r2, [r1, #12]
 8007e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	0710      	lsls	r0, r2, #28
 8007e6e:	460c      	mov	r4, r1
 8007e70:	d458      	bmi.n	8007f24 <__sflush_r+0xc0>
 8007e72:	684b      	ldr	r3, [r1, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dc05      	bgt.n	8007e84 <__sflush_r+0x20>
 8007e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dc02      	bgt.n	8007e84 <__sflush_r+0x20>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	d0f9      	beq.n	8007e7e <__sflush_r+0x1a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e90:	682f      	ldr	r7, [r5, #0]
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	d032      	beq.n	8007efc <__sflush_r+0x98>
 8007e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	075a      	lsls	r2, r3, #29
 8007e9c:	d505      	bpl.n	8007eaa <__sflush_r+0x46>
 8007e9e:	6863      	ldr	r3, [r4, #4]
 8007ea0:	1ac0      	subs	r0, r0, r3
 8007ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ea4:	b10b      	cbz	r3, 8007eaa <__sflush_r+0x46>
 8007ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ea8:	1ac0      	subs	r0, r0, r3
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4602      	mov	r2, r0
 8007eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb0:	6a21      	ldr	r1, [r4, #32]
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b0      	blx	r6
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	d106      	bne.n	8007eca <__sflush_r+0x66>
 8007ebc:	6829      	ldr	r1, [r5, #0]
 8007ebe:	291d      	cmp	r1, #29
 8007ec0:	d82c      	bhi.n	8007f1c <__sflush_r+0xb8>
 8007ec2:	4a2a      	ldr	r2, [pc, #168]	; (8007f6c <__sflush_r+0x108>)
 8007ec4:	40ca      	lsrs	r2, r1
 8007ec6:	07d6      	lsls	r6, r2, #31
 8007ec8:	d528      	bpl.n	8007f1c <__sflush_r+0xb8>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	6062      	str	r2, [r4, #4]
 8007ece:	04d9      	lsls	r1, r3, #19
 8007ed0:	6922      	ldr	r2, [r4, #16]
 8007ed2:	6022      	str	r2, [r4, #0]
 8007ed4:	d504      	bpl.n	8007ee0 <__sflush_r+0x7c>
 8007ed6:	1c42      	adds	r2, r0, #1
 8007ed8:	d101      	bne.n	8007ede <__sflush_r+0x7a>
 8007eda:	682b      	ldr	r3, [r5, #0]
 8007edc:	b903      	cbnz	r3, 8007ee0 <__sflush_r+0x7c>
 8007ede:	6560      	str	r0, [r4, #84]	; 0x54
 8007ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ee2:	602f      	str	r7, [r5, #0]
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d0ca      	beq.n	8007e7e <__sflush_r+0x1a>
 8007ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eec:	4299      	cmp	r1, r3
 8007eee:	d002      	beq.n	8007ef6 <__sflush_r+0x92>
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 f8fd 	bl	80080f0 <_free_r>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8007efa:	e7c1      	b.n	8007e80 <__sflush_r+0x1c>
 8007efc:	6a21      	ldr	r1, [r4, #32]
 8007efe:	2301      	movs	r3, #1
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b0      	blx	r6
 8007f04:	1c41      	adds	r1, r0, #1
 8007f06:	d1c7      	bne.n	8007e98 <__sflush_r+0x34>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0c4      	beq.n	8007e98 <__sflush_r+0x34>
 8007f0e:	2b1d      	cmp	r3, #29
 8007f10:	d001      	beq.n	8007f16 <__sflush_r+0xb2>
 8007f12:	2b16      	cmp	r3, #22
 8007f14:	d101      	bne.n	8007f1a <__sflush_r+0xb6>
 8007f16:	602f      	str	r7, [r5, #0]
 8007f18:	e7b1      	b.n	8007e7e <__sflush_r+0x1a>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	e7ad      	b.n	8007e80 <__sflush_r+0x1c>
 8007f24:	690f      	ldr	r7, [r1, #16]
 8007f26:	2f00      	cmp	r7, #0
 8007f28:	d0a9      	beq.n	8007e7e <__sflush_r+0x1a>
 8007f2a:	0793      	lsls	r3, r2, #30
 8007f2c:	680e      	ldr	r6, [r1, #0]
 8007f2e:	bf08      	it	eq
 8007f30:	694b      	ldreq	r3, [r1, #20]
 8007f32:	600f      	str	r7, [r1, #0]
 8007f34:	bf18      	it	ne
 8007f36:	2300      	movne	r3, #0
 8007f38:	eba6 0807 	sub.w	r8, r6, r7
 8007f3c:	608b      	str	r3, [r1, #8]
 8007f3e:	f1b8 0f00 	cmp.w	r8, #0
 8007f42:	dd9c      	ble.n	8007e7e <__sflush_r+0x1a>
 8007f44:	6a21      	ldr	r1, [r4, #32]
 8007f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f48:	4643      	mov	r3, r8
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b0      	blx	r6
 8007f50:	2800      	cmp	r0, #0
 8007f52:	dc06      	bgt.n	8007f62 <__sflush_r+0xfe>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f60:	e78e      	b.n	8007e80 <__sflush_r+0x1c>
 8007f62:	4407      	add	r7, r0
 8007f64:	eba8 0800 	sub.w	r8, r8, r0
 8007f68:	e7e9      	b.n	8007f3e <__sflush_r+0xda>
 8007f6a:	bf00      	nop
 8007f6c:	20400001 	.word	0x20400001

08007f70 <_fflush_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	690b      	ldr	r3, [r1, #16]
 8007f74:	4605      	mov	r5, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	b913      	cbnz	r3, 8007f80 <_fflush_r+0x10>
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	b118      	cbz	r0, 8007f8a <_fflush_r+0x1a>
 8007f82:	6983      	ldr	r3, [r0, #24]
 8007f84:	b90b      	cbnz	r3, 8007f8a <_fflush_r+0x1a>
 8007f86:	f7ff f9cd 	bl	8007324 <__sinit>
 8007f8a:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <_fflush_r+0x6c>)
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d11b      	bne.n	8007fc8 <_fflush_r+0x58>
 8007f90:	686c      	ldr	r4, [r5, #4]
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0ef      	beq.n	8007f7a <_fflush_r+0xa>
 8007f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f9c:	07d0      	lsls	r0, r2, #31
 8007f9e:	d404      	bmi.n	8007faa <_fflush_r+0x3a>
 8007fa0:	0599      	lsls	r1, r3, #22
 8007fa2:	d402      	bmi.n	8007faa <_fflush_r+0x3a>
 8007fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa6:	f7ff fa5b 	bl	8007460 <__retarget_lock_acquire_recursive>
 8007faa:	4628      	mov	r0, r5
 8007fac:	4621      	mov	r1, r4
 8007fae:	f7ff ff59 	bl	8007e64 <__sflush_r>
 8007fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fb4:	07da      	lsls	r2, r3, #31
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	d4e0      	bmi.n	8007f7c <_fflush_r+0xc>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	059b      	lsls	r3, r3, #22
 8007fbe:	d4dd      	bmi.n	8007f7c <_fflush_r+0xc>
 8007fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc2:	f7ff fa4e 	bl	8007462 <__retarget_lock_release_recursive>
 8007fc6:	e7d9      	b.n	8007f7c <_fflush_r+0xc>
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <_fflush_r+0x70>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d101      	bne.n	8007fd2 <_fflush_r+0x62>
 8007fce:	68ac      	ldr	r4, [r5, #8]
 8007fd0:	e7df      	b.n	8007f92 <_fflush_r+0x22>
 8007fd2:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <_fflush_r+0x74>)
 8007fd4:	429c      	cmp	r4, r3
 8007fd6:	bf08      	it	eq
 8007fd8:	68ec      	ldreq	r4, [r5, #12]
 8007fda:	e7da      	b.n	8007f92 <_fflush_r+0x22>
 8007fdc:	080082f4 	.word	0x080082f4
 8007fe0:	08008314 	.word	0x08008314
 8007fe4:	080082d4 	.word	0x080082d4

08007fe8 <_lseek_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_lseek_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 f9a6 	bl	8001348 <_lseek>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_lseek_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_lseek_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	24000904 	.word	0x24000904

0800800c <__swhatbuf_r>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	460e      	mov	r6, r1
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	2900      	cmp	r1, #0
 8008016:	b096      	sub	sp, #88	; 0x58
 8008018:	4614      	mov	r4, r2
 800801a:	461d      	mov	r5, r3
 800801c:	da08      	bge.n	8008030 <__swhatbuf_r+0x24>
 800801e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	061a      	lsls	r2, r3, #24
 8008028:	d410      	bmi.n	800804c <__swhatbuf_r+0x40>
 800802a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802e:	e00e      	b.n	800804e <__swhatbuf_r+0x42>
 8008030:	466a      	mov	r2, sp
 8008032:	f000 f8bb 	bl	80081ac <_fstat_r>
 8008036:	2800      	cmp	r0, #0
 8008038:	dbf1      	blt.n	800801e <__swhatbuf_r+0x12>
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008040:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008044:	425a      	negs	r2, r3
 8008046:	415a      	adcs	r2, r3
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	e7ee      	b.n	800802a <__swhatbuf_r+0x1e>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	2000      	movs	r0, #0
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	b016      	add	sp, #88	; 0x58
 8008054:	bd70      	pop	{r4, r5, r6, pc}
	...

08008058 <__smakebuf_r>:
 8008058:	898b      	ldrh	r3, [r1, #12]
 800805a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800805c:	079d      	lsls	r5, r3, #30
 800805e:	4606      	mov	r6, r0
 8008060:	460c      	mov	r4, r1
 8008062:	d507      	bpl.n	8008074 <__smakebuf_r+0x1c>
 8008064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	2301      	movs	r3, #1
 800806e:	6163      	str	r3, [r4, #20]
 8008070:	b002      	add	sp, #8
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	ab01      	add	r3, sp, #4
 8008076:	466a      	mov	r2, sp
 8008078:	f7ff ffc8 	bl	800800c <__swhatbuf_r>
 800807c:	9900      	ldr	r1, [sp, #0]
 800807e:	4605      	mov	r5, r0
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff fa0f 	bl	80074a4 <_malloc_r>
 8008086:	b948      	cbnz	r0, 800809c <__smakebuf_r+0x44>
 8008088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d4ef      	bmi.n	8008070 <__smakebuf_r+0x18>
 8008090:	f023 0303 	bic.w	r3, r3, #3
 8008094:	f043 0302 	orr.w	r3, r3, #2
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	e7e3      	b.n	8008064 <__smakebuf_r+0xc>
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <__smakebuf_r+0x7c>)
 800809e:	62b3      	str	r3, [r6, #40]	; 0x28
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	6020      	str	r0, [r4, #0]
 80080a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	6163      	str	r3, [r4, #20]
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	6120      	str	r0, [r4, #16]
 80080b2:	b15b      	cbz	r3, 80080cc <__smakebuf_r+0x74>
 80080b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 f889 	bl	80081d0 <_isatty_r>
 80080be:	b128      	cbz	r0, 80080cc <__smakebuf_r+0x74>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	89a0      	ldrh	r0, [r4, #12]
 80080ce:	4305      	orrs	r5, r0
 80080d0:	81a5      	strh	r5, [r4, #12]
 80080d2:	e7cd      	b.n	8008070 <__smakebuf_r+0x18>
 80080d4:	080072bd 	.word	0x080072bd

080080d8 <__malloc_lock>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__malloc_lock+0x8>)
 80080da:	f7ff b9c1 	b.w	8007460 <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	240008f8 	.word	0x240008f8

080080e4 <__malloc_unlock>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__malloc_unlock+0x8>)
 80080e6:	f7ff b9bc 	b.w	8007462 <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	240008f8 	.word	0x240008f8

080080f0 <_free_r>:
 80080f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d044      	beq.n	8008180 <_free_r+0x90>
 80080f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fa:	9001      	str	r0, [sp, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008102:	bfb8      	it	lt
 8008104:	18e4      	addlt	r4, r4, r3
 8008106:	f7ff ffe7 	bl	80080d8 <__malloc_lock>
 800810a:	4a1e      	ldr	r2, [pc, #120]	; (8008184 <_free_r+0x94>)
 800810c:	9801      	ldr	r0, [sp, #4]
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	b933      	cbnz	r3, 8008120 <_free_r+0x30>
 8008112:	6063      	str	r3, [r4, #4]
 8008114:	6014      	str	r4, [r2, #0]
 8008116:	b003      	add	sp, #12
 8008118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800811c:	f7ff bfe2 	b.w	80080e4 <__malloc_unlock>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d908      	bls.n	8008136 <_free_r+0x46>
 8008124:	6825      	ldr	r5, [r4, #0]
 8008126:	1961      	adds	r1, r4, r5
 8008128:	428b      	cmp	r3, r1
 800812a:	bf01      	itttt	eq
 800812c:	6819      	ldreq	r1, [r3, #0]
 800812e:	685b      	ldreq	r3, [r3, #4]
 8008130:	1949      	addeq	r1, r1, r5
 8008132:	6021      	streq	r1, [r4, #0]
 8008134:	e7ed      	b.n	8008112 <_free_r+0x22>
 8008136:	461a      	mov	r2, r3
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	b10b      	cbz	r3, 8008140 <_free_r+0x50>
 800813c:	42a3      	cmp	r3, r4
 800813e:	d9fa      	bls.n	8008136 <_free_r+0x46>
 8008140:	6811      	ldr	r1, [r2, #0]
 8008142:	1855      	adds	r5, r2, r1
 8008144:	42a5      	cmp	r5, r4
 8008146:	d10b      	bne.n	8008160 <_free_r+0x70>
 8008148:	6824      	ldr	r4, [r4, #0]
 800814a:	4421      	add	r1, r4
 800814c:	1854      	adds	r4, r2, r1
 800814e:	42a3      	cmp	r3, r4
 8008150:	6011      	str	r1, [r2, #0]
 8008152:	d1e0      	bne.n	8008116 <_free_r+0x26>
 8008154:	681c      	ldr	r4, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	6053      	str	r3, [r2, #4]
 800815a:	4421      	add	r1, r4
 800815c:	6011      	str	r1, [r2, #0]
 800815e:	e7da      	b.n	8008116 <_free_r+0x26>
 8008160:	d902      	bls.n	8008168 <_free_r+0x78>
 8008162:	230c      	movs	r3, #12
 8008164:	6003      	str	r3, [r0, #0]
 8008166:	e7d6      	b.n	8008116 <_free_r+0x26>
 8008168:	6825      	ldr	r5, [r4, #0]
 800816a:	1961      	adds	r1, r4, r5
 800816c:	428b      	cmp	r3, r1
 800816e:	bf04      	itt	eq
 8008170:	6819      	ldreq	r1, [r3, #0]
 8008172:	685b      	ldreq	r3, [r3, #4]
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	bf04      	itt	eq
 8008178:	1949      	addeq	r1, r1, r5
 800817a:	6021      	streq	r1, [r4, #0]
 800817c:	6054      	str	r4, [r2, #4]
 800817e:	e7ca      	b.n	8008116 <_free_r+0x26>
 8008180:	b003      	add	sp, #12
 8008182:	bd30      	pop	{r4, r5, pc}
 8008184:	240008fc 	.word	0x240008fc

08008188 <_read_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	; (80081a8 <_read_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7f9 f876 	bl	8001288 <_read>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_read_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_read_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	24000904 	.word	0x24000904

080081ac <_fstat_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	; (80081cc <_fstat_r+0x20>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	f7f9 f8aa 	bl	8001312 <_fstat>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d102      	bne.n	80081c8 <_fstat_r+0x1c>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b103      	cbz	r3, 80081c8 <_fstat_r+0x1c>
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	bf00      	nop
 80081cc:	24000904 	.word	0x24000904

080081d0 <_isatty_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d06      	ldr	r5, [pc, #24]	; (80081ec <_isatty_r+0x1c>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	602b      	str	r3, [r5, #0]
 80081dc:	f7f9 f8a9 	bl	8001332 <_isatty>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_isatty_r+0x1a>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_isatty_r+0x1a>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	24000904 	.word	0x24000904

080081f0 <_init>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr

080081fc <_fini>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr
